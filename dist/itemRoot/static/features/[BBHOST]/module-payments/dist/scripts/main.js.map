{"version":3,"sources":["webpack:///module-payments/webpack/universalModuleDefinition","webpack:///module-payments/scripts/main.js","webpack:///module-payments/webpack/bootstrap 20294490e218162ab824","webpack:///module-payments/./styles/base.less?6613","webpack:///module-payments/./styles/base.less","webpack:///module-payments//Users/ilya/.nvm/versions/node/v4.1.2/lib/~/bb-lp-cli/~/css-loader/lib/css-base.js","webpack:///module-payments//Users/ilya/.nvm/versions/node/v4.1.2/lib/~/bb-lp-cli/~/style-loader/addStyles.js","webpack:///module-payments/./scripts/main.js","webpack:///module-payments/(webpack)/buildin/module.js","webpack:///module-payments/external \"base\"","webpack:///module-payments/external \"core\"","webpack:///module-payments/./scripts/components/scheduled-transfer/scripts/main.js","webpack:///module-payments/external \"ui\"","webpack:///module-payments/./scripts/components/scheduled-transfer/scripts/lp-scheduled-transfer.js","webpack:///module-payments/./scripts/factories/scheduled-date-calculator.js","webpack:///module-payments/./scripts/components/lp-amount-input/scripts/main.js","webpack:///module-payments/./scripts/components/lp-amount-input/scripts/directives.js","webpack:///module-payments/./scripts/components/otp-check/scripts/main.js","webpack:///module-payments/external \"module-enrollment\"","webpack:///module-payments/./scripts/components/otp-check/scripts/directives.js","webpack:///module-payments/./scripts/components/otp-check/templates/desktop/layout.js","webpack:///module-payments/./scripts/components/otp-check/scripts/config.js","webpack:///module-payments/./scripts/deprecated/scripts/main.js","webpack:///module-payments/./scripts/deprecated/scripts/scheduled-date-calculator.js","webpack:///module-payments/./scripts/deprecated/scripts/scheduled-transfer.js","webpack:///module-payments/./scripts/migration/main.js","webpack:///module-payments/./scripts/migration/address-transfer.js","webpack:///module-payments/./scripts/migration/counter-party-filter.js","webpack:///module-payments/./scripts/migration/dynamic-aria-label.js","webpack:///module-payments/./scripts/migration/dynamic-focus.js","webpack:///module-payments/./scripts/migration/email-transfer.js","webpack:///module-payments/./scripts/migration/filters.js","webpack:///module-payments/./scripts/migration/iban-model.js","webpack:///module-payments/./scripts/migration/lp-currency-amount-input.js","webpack:///module-payments/./scripts/migration/lp-format-payment-reference.js","webpack:///module-payments/./scripts/migration/lp-format-us-account.js","webpack:///module-payments/./scripts/migration/lp-iban-input.js","webpack:///module-payments/./scripts/migration/lp-input-currency.js","webpack:///module-payments/./scripts/migration/lp-payment-ref-description.js","webpack:///module-payments/./scripts/migration/non-zero.js","webpack:///module-payments/./scripts/migration/p2p-enrollment.js","webpack:///module-payments/./scripts/migration/us-account-input.js","webpack:///module-payments/./scripts/constants.js","webpack:///module-payments/./scripts/payments.js","webpack:///module-payments/./scripts/providers.js","webpack:///module-payments/./scripts/services/payment-orders.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_8__","__WEBPACK_EXTERNAL_MODULE_9__","__WEBPACK_EXTERNAL_MODULE_11__","__WEBPACK_EXTERNAL_MODULE_17__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","content","locals","push","list","toString","result","i","length","item","join","mediaQuery","alreadyImportedModules","addStylesToDom","styles","options","domStyle","stylesInDom","refs","j","parts","addStyle","listToStyles","newStyles","css","media","sourceMap","part","createStyleElement","styleElement","document","createElement","head","getHeadElement","type","appendChild","createLinkElement","linkElement","rel","obj","update","remove","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","bind","URL","createObjectURL","revokeObjectURL","Blob","btoa","updateLink","parentNode","removeChild","href","applyToTag","newObj","index","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","insertBefore","setAttribute","firstChild","unescape","encodeURIComponent","JSON","stringify","blob","oldSrc","memoize","fn","memo","apply","arguments","isOldIE","test","window","navigator","userAgent","toLowerCase","getElementsByTagName","newList","mayRemove","textStore","replacement","filter","Boolean","__WEBPACK_AMD_DEFINE_RESULT__","name","base","deps","createModule","constant","provider","service","undefined","webpackPolyfill","deprecate","paths","children","core","ui","directive","_typeof","Symbol","iterator","constructor","ScheduledDateCalculator","lpScheduledTransfer","$templateCache","linkFn","scope","element","attrs","ctrls","dateCalculator","modelCtrl","formCtrl","isCustomOrder","scheduledTransfer","frequency","frequenciesEnum","WEEKLY","MONTHLY","YEARLY","handleWarningDate","found","intervals","dates","active","dateWarning","handleIntervalValidation","validIntervals","customOrder","isScheduledTransfer","$setValidity","clearActiveIntervals","l","days","months","initialize","todaysDate","Date","minEndDate","START_OF_THE_MONTH","END_OF_THE_MONTH","LAST_FRIDAY_OF_THE_MONTH","frequencies","value","group","label","endOptions","endOn","calendar","startCalendarOpen","endCalendarOpen","endDateOptions","datepickerMode","show-weeks","startDateOptions","timesEndDate","endDate","setEndDate","$name","$addControl","$formatters","setTransferPeriodDates","frequencyChanged","toggleInterval","$index","search","indexOf","splice","openStartCalendar","$event","which","preventDefault","stopPropagation","openEndCalendar","startDate","getTime","getLastDayOfMonth","getFirstDayOfMonth","getLastFridayOfMonth","timeToAdd","date","timesToRepeat","every","addWeeksToDate","addMonthsToDate","addYearsToDate","getLastDayOfMonthPlusTime","getFirstDayOfMonthPlusTime","getLastFridayOfMonthPlusTime","calculateMinimumEndDate","$watch","newValue","$on","put","restrict","replace","template","get","link","$inject","lpCoreUtils","inject","config","self","prototype","noOfWeeks","add","toDate","noOfMonths","noOfYears","endOf","startOf","lastDay","day","subtract","monthsToAdd","dateCopy","clone","isBefore","lastWeekFriday","d","repeatEvery","defaults","decimals","hideGroupSep","allowNegative","currencySymbol","lpAmountInput","lpUIUtils","$locale","$parse","elem","ctrl","maskFactory","maskDecimals","decimalsPattern","decimalDelimiter","Array","maskPattern","currencySym","thousandsDelimiter","StringMask","reverse","formatter","prefix","valueToFormat","prepareNumberToFormatter","moneyMask","parser","formatedValue","actualNumber","isNegative","needsToInvertSign","slice","$setViewValue","$render","parseInt","Math","pow","NUMBER_FORMATS","DECIMAL_SEP","GROUP_SEP","CURRENCY_SYM","$observe","$viewValue","$parsers","layoutDesktop","fieldsList","fields","otpCheck","$timeout","lpCoreBus","lpEnrollmentUtil","ngModel","namespace","otpEventNamespace","otp","input","verifyOtp","otpInputName","api","params","otpApi","mask","maskStringMaker","showChannelSelector","showOtpVerification","selectChannel","channel","channelSelected","cancel","back","otpNext","publish","select","loading","subscribe","codeSent","err","serverError","statusText","serverResponseFails","serverValidationFails","res","verifyLoading","validationError","verify","compileFn","compile","required","externalVerification","buttonInside","pattern","errorMsg","placeholder","getInstance","paymentOrder","addressTransfer","transferTypes","counterpartyAddress","transferType","address","addressOne","addressTwo","city","state","zip","setDefaultValidation","associatedTransferType","p2pAddress","validateAddress","lineOne","zipValid","tempArray","split","validateZip","re","valid","validZip","oldValue","$","jQuery","angular","ng","counterPartyFilter","$document","lpUserDetails","lpCoreError","counterpartyName","contacts","accounts","profile","onSelect","find","elementNode","keyCodes","up","down","enter","contactAccountFields","email","p2pEmail","account","bank","counterpartyList","showContacts","deregisterProfileWatch","newProfileData","console","log","fullname","firstName","lastName","activities","lastLoggedIn","key","map","details","v","startCase","deregisterContactsWatch","newContactsData","preprocessContacts","deregisterAccountsWatch","newAccountsData","preprocessAccounts","accountsConfigured","contactsConfigured","contact","open","hasOwnProperty","myAccounts","ownAccounts","identifier","alias","unshift","bindHideContacts","e","contains","target","$apply","unbindHideContacts","unbind","findFirstContact","focusContactsAccountsButton","toFocus","event","next","hasClass","prev","setTimeout","focus","findAccountToggles","contactContainer","focusOnActiveToggle","buttons","getContactParentContainer","parents","toggleShowContacts","clearCounterParty","showContactList","toggleContactAccounts","handleContactAccountToggleKeyDown","prepareSelection","keyToNextAccountToggle","handleSingleAccountKeyDown","keyToNextAccount","nextContact","prevContact","trigger","getProfileImageByName","photoUrl","decodePhotoUrl","getDefaultProfileImage","throwException","dynamicAriaLabel","ariaLabel","attr","dynamicFocus","emailTransfer","$inputElement","validEmail","autoSuggestActive","autoSuggestion","suggestions","gmail","yahoo","backbase","suggestionsMap","gmaik","gmain","gmal","gmakl","mgail","yaho","yahooo","yagoo","bakbase","backbas","baclbase","validateEmail","clear","handleAutoSuggest","temp","domain","getDomainFromEmail","originalEvent","doAutoSuggest","isValidEmail","emailDomainAndTLD","indexOfPeriod","substring","addSeperator","visualIndicator","addVisualIndicator","toUpperCase","match","newInput","IbanModel","httpService","enableCountrySearch","countryListService","endpoint","countryListEndpoint","countryList","selectedCountry","loadCountryList","xhr","read","then","response","data","error","getCountryCode","countryCode","iban","code","substr","forEach","country_code","normalizeIban","validate","iban_length","regex","RegExp","iban_regex","isValidISO7064Checksum","ctrlFn","$scope","wholeAmount","decimalAmount","amountInDomesticCurrency","fieldLength","lpCurrencyAmountInput","amount","lpCurrencyList","lpPaymentOrder","lpDisableCurrencySelection","lpAmountLabel","lpAmountPlaceholder","toggleExchangeRateModal","controller","$decimalInput","valueToCheck","formatAmount","tempAmountArray","updateAmountInDomesticCurrency","selected","exchange_rate","fixFloatDecimal","updatePaymentOrderModelAmount","instructedAmount","orderedCurrencies","decimal","leadingZero","isNaN","parseFloat","toFixed","setCurrency","instructedCurrency","currency_code","handleFieldLengthUpdate","oldFieldLength","$watchCollection","lpFormatPaymentReference","$filter","addSeperatorAndRF","sub","filtered","paymentReference","paymentDescription","showInfoMessage","paymentRefDisabled","paymentDescDisabled","lpFormatUsAccount","lpIbanInput","widget","ibanModel","ngModelCtrl","textSelection","isBackspace","lengthDiff","$element","on","change","addDashes","country","isValid","doValidation","$partialText","addClass","after","ibanArray","setCursorPosition","cursorPosition","getNewCaretPosition","setCaretPositionOfInput","getSelection","noDashSelection","selectionDiff","getSelectionPositionOfInput","dontFocus","removeClass","lpInputCurrency","currencyMaxLength","$attrs","setValidity","isValidFormat","isNonZero","isMaxLength","lpPaymentRefDescription","hidePaymentReference","$paymentReference","normalize","validatePaymentRef","toggleInfoMessage","noSeparatorSelection","clearRef","normalizedPaymentRef","$modelValue","$removeControl","nonZero","p2pEnrollment","enrollment","associatedTransferTypes","p2pMobile","p2pRegistration","p2pAccount","userAgrees","clearEmail","onP2PAccountChange","receivingAccountNumber","onEmailChange","onAgreementChange","usAccountInput","lpCountryList","modal","isAccNoConfirmed","isRoutingNoValid","showCountryDropdown","default_country","accountInput","accountNumber","routingNumber","validateRoutingNumber","setAccountValidity","confirmAccountNumber","confirmKeydown","resetRoutingNumber","setModelValue","setRoutingValidity","digitOne","digitTwo","digitThree","checkNumber","routingProvided","invalidRoutingNumber","accountRequired","confirmRequired","modelValue","pendingPaymentOrdersTimeout","customerId","lpPayments","$get","$q","$resource","API","Rest","paymentsEndpoint","getUnsubmitted","method","url","isArray","create","del","submit","createOrder","order","deferred","defer","paymentId","resolve","reject","promise","send","param","authorization","orderId","createModel","generateUUID","load","f","ids","$promise","resp","pendingOrdersGroups","preprocessPendingOrdersGroups","paymentOrderGroups","checkGroupExistance","accountId","createGroup","@id","paymentOrders","addPaymentOrderToGroup","paymentOrderDetail","y","counterpartyIban","accountDetails","counterpartyAccount","counterpartyEmail","makeFormObject","form","uuid","scheduleDate","onDate","schedule","selectedCounter","isOpenDate","urgentTransfer","setConfig","chain","mapValues","resolvePortalPlaceholders","getConfig","prop","isString","PaymentOrderModel","Services","PaymentOrders","services","payment-orders","Error","lpAccountTransfers","$http","utils","selectOtpChannel","otpCode","defVal","assign"],"mappings":"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","file":"scripts/main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-enrollment\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"core\", \"ui\", \"module-enrollment\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"module-payments\"] = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-enrollment\"));\n\telse\n\t\troot[\"module-payments\"] = factory(root[\"base\"], root[\"core\"], root[\"ui\"], root[\"module-enrollment\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_17__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-enrollment\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"core\", \"ui\", \"module-enrollment\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"module-payments\"] = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-enrollment\"));\n\telse\n\t\troot[\"module-payments\"] = factory(root[\"base\"], root[\"core\"], root[\"ui\"], root[\"module-enrollment\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_17__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(2);\n\tmodule.exports = __webpack_require__(6);\n\n\n/***/ },\n/* 1 */,\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\n\t// load the styles\n\tvar content = __webpack_require__(3);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(5)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/css-loader/index.js!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/less-loader/index.js!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/postcss-loader/index.js!./base.less\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/css-loader/index.js!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/less-loader/index.js!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/postcss-loader/index.js!./base.less\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(4)();\n\t// imports\n\n\n\t// module\n\texports.push([module.id, \".lp-labeled-input{border-radius:3px}.lp-otp-check .otp-content{padding:1em}.lp-otp-check .otp-nav{position:absolute;width:100%;left:0;bottom:0;padding:1em}.lp-otp-check .channel-selector{margin:3em 0}.lp-otp-check .channel-selector .cell{margin-bottom:1em}.lp-otp-check .channel-selector .custom-radio{margin-bottom:2em}.lp-otp-check .channel-selector .custom-radio .radio-label{display:inline-block;position:relative;padding-left:.7em;transform:translateY(-20%)}.lp-otp-check .channel-selector .custom-radio .radio-label .radio-label-main{color:#000}.lp-otp-check .channel-selector .custom-radio span{vertical-align:middle}.lp-otp-check.is-desktop .close-button{margin:5px;cursor:pointer}\", \"\"]);\n\n\t// exports\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tvar stylesInDom = {},\r\n\t\tmemoize = function(fn) {\r\n\t\t\tvar memo;\r\n\t\t\treturn function () {\r\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\t\treturn memo;\r\n\t\t\t};\r\n\t\t},\r\n\t\tisOldIE = memoize(function() {\r\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t\t}),\r\n\t\tgetHeadElement = memoize(function () {\r\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t\t}),\r\n\t\tsingletonElement = null,\r\n\t\tsingletonCounter = 0;\r\n\r\n\tmodule.exports = function(list, options) {\r\n\t\tif(false) {\r\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t\t}\r\n\r\n\t\toptions = options || {};\r\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t\t// tags it will allow on a page\r\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t\tvar styles = listToStyles(list);\r\n\t\taddStylesToDom(styles, options);\r\n\r\n\t\treturn function update(newList) {\r\n\t\t\tvar mayRemove = [];\r\n\t\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\t\tvar item = styles[i];\r\n\t\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\t\tdomStyle.refs--;\r\n\t\t\t\tmayRemove.push(domStyle);\r\n\t\t\t}\r\n\t\t\tif(newList) {\r\n\t\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\t\taddStylesToDom(newStyles, options);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tfunction addStylesToDom(styles, options) {\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tif(domStyle) {\r\n\t\t\t\tdomStyle.refs++;\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t\t}\r\n\t\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar parts = [];\r\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction listToStyles(list) {\r\n\t\tvar styles = [];\r\n\t\tvar newStyles = {};\r\n\t\tfor(var i = 0; i < list.length; i++) {\r\n\t\t\tvar item = list[i];\r\n\t\t\tvar id = item[0];\r\n\t\t\tvar css = item[1];\r\n\t\t\tvar media = item[2];\r\n\t\t\tvar sourceMap = item[3];\r\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\t\tif(!newStyles[id])\r\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\t\telse\r\n\t\t\t\tnewStyles[id].parts.push(part);\r\n\t\t}\r\n\t\treturn styles;\r\n\t}\r\n\r\n\tfunction createStyleElement() {\r\n\t\tvar styleElement = document.createElement(\"style\");\r\n\t\tvar head = getHeadElement();\r\n\t\tstyleElement.type = \"text/css\";\r\n\t\thead.appendChild(styleElement);\r\n\t\treturn styleElement;\r\n\t}\r\n\r\n\tfunction createLinkElement() {\r\n\t\tvar linkElement = document.createElement(\"link\");\r\n\t\tvar head = getHeadElement();\r\n\t\tlinkElement.rel = \"stylesheet\";\r\n\t\thead.appendChild(linkElement);\r\n\t\treturn linkElement;\r\n\t}\r\n\r\n\tfunction addStyle(obj, options) {\r\n\t\tvar styleElement, update, remove;\r\n\r\n\t\tif (options.singleton) {\r\n\t\t\tvar styleIndex = singletonCounter++;\r\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement());\r\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t\t} else if(obj.sourceMap &&\r\n\t\t\ttypeof URL === \"function\" &&\r\n\t\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\t\ttypeof Blob === \"function\" &&\r\n\t\t\ttypeof btoa === \"function\") {\r\n\t\t\tstyleElement = createLinkElement();\r\n\t\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\t\t\tif(styleElement.href)\r\n\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tstyleElement = createStyleElement();\r\n\t\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tupdate(obj);\r\n\r\n\t\treturn function updateStyle(newObj) {\r\n\t\t\tif(newObj) {\r\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tupdate(obj = newObj);\r\n\t\t\t} else {\r\n\t\t\t\tremove();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tvar replaceText = (function () {\r\n\t\tvar textStore = [];\r\n\r\n\t\treturn function (index, replacement) {\r\n\t\t\ttextStore[index] = replacement;\r\n\t\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t\t};\r\n\t})();\r\n\r\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\t\tvar css = remove ? \"\" : obj.css;\r\n\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t\t} else {\r\n\t\t\tvar cssNode = document.createTextNode(css);\r\n\t\t\tvar childNodes = styleElement.childNodes;\r\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\t\tif (childNodes.length) {\r\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t\t} else {\r\n\t\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction applyToTag(styleElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\r\n\t\tif(media) {\r\n\t\t\tstyleElement.setAttribute(\"media\", media)\r\n\t\t}\r\n\r\n\t\tif(styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = css;\r\n\t\t} else {\r\n\t\t\twhile(styleElement.firstChild) {\r\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t\t}\r\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updateLink(linkElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\r\n\t\tif(sourceMap) {\r\n\t\t\t// http://stackoverflow.com/a/26603875\r\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t\t}\r\n\r\n\t\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\t\tvar oldSrc = linkElement.href;\r\n\r\n\t\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\t\tif(oldSrc)\r\n\t\t\tURL.revokeObjectURL(oldSrc);\r\n\t}\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t\t'use strict';\n\n\t\tmodule.name = 'module-payments';\n\n\t\tvar base = __webpack_require__(8);\n\n\t\tvar deps = [__webpack_require__(9).name, __webpack_require__(10).name, __webpack_require__(14).name, __webpack_require__(16).name, __webpack_require__(21).name, __webpack_require__(24).name, __webpack_require__(17).name // NOTE: remove this dep in case of moving otp-check component away\n\t\t];\n\n\t\tmodule.exports = base.createModule(module.name, deps).constant(__webpack_require__(41)).provider(__webpack_require__(42)).provider(__webpack_require__(43)).service(__webpack_require__(44));\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)(module)))\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    module.name = 'scheduled-transfer';\n\n\t    var base = __webpack_require__(8);\n\t    var core = __webpack_require__(9);\n\t    var ui = __webpack_require__(11);\n\n\t    var deps = [core.name, ui.name];\n\n\t    module.exports = base.createModule(module.name, deps).directive(__webpack_require__(12));\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)(module)))\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    var ScheduledDateCalculator = __webpack_require__(13);\n\n\t    // @ngInject\n\t    exports.lpScheduledTransfer = function ($templateCache) {\n\n\t        $templateCache.put('scheduled-transfer.html', '<div class=\"lp-scheduled-transfer\">' + '    <div class=\"lp-st-frequency lp-st-section clearfix\">' + '        <div class=\"pull-left lp-st-caption\">Frequency</div>' + '        <div class=\"pull-left lp-st-control\">' + '            <div class=\"lp-st-frequency-dropdown\" aria-label=\"frequency\" dropdown-select=\"dropdown-select\" ng-change=\"frequencyChanged()\" ng-model=\"scheduledTransfer.frequency\" options=\"val.id as val.value group by val.group for val in frequencies\"></div>' + '        </div>' + '    </div>' + '    <div class=\"lp-st-every lp-st-section clearfix\">' + '        <div class=\"pull-left lp-st-caption\" ng-if=\"customOrder\">Every</div>' + '        <div class=\"pull-left lp-st-control clearfix\" ng-if=\"scheduledTransfer.frequency === frequenciesEnum.WEEKLY\">' + '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"1\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"lp-st-every-input pull-left\" name=\"repeatEvery\" required=\"required\" tabindex=\"0\" aria-required=\"true\" aria-label=\"Repeat weekly transfer every\" maxlength=\"2\" ng-model=\"scheduledTransfer.every\" ng-change=\"setEndDate()\" \\/><span>week(s) on:</span>' + '        </div>' + '        <div class=\"pull-left lp-st-control clearfix\" ng-if=\"scheduledTransfer.frequency === frequenciesEnum.MONTHLY\">' + '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"1\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"lp-st-every-input pull-left\" name=\"repeatEvery\" required=\"required\" tabindex=\"0\" aria-required=\"true\" aria-label=\"Repeat monthly transfer every\" maxlength=\"2\" ng-model=\"scheduledTransfer.every\" ng-change=\"setEndDate()\" \\/><span>month(s) on:</span>' + '        </div>' + '        <div class=\"pull-left lp-st-control clearfix\" ng-if=\"scheduledTransfer.frequency === frequenciesEnum.YEARLY\">' + '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"1\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"lp-st-every-input pull-left\" name=\"repeatEvery\" required=\"required\" tabindex=\"0\" aria-required=\"true\"  aria-label=\"Repeat yearly transfer every\" maxlength=\"2\" ng-model=\"scheduledTransfer.every\" ng-change=\"setEndDate()\" \\/><span>year(s):</span>' + '        </div>' + '    </div>' + '    <div class=\"lp-st-interval lp-st-section clearfix\" ng-if=\"customOrder\">' + '        <div class=\"lp-st-interval-menu weekly btn-group\" ng-if=\"scheduledTransfer.frequency === frequenciesEnum.WEEKLY\">' + '            <button type=\"button\" interval-button=\"interval-button\" aria-label=\"{{day.label}}\" ng-class=\"{\\'active\\': day.active}\" class=\"btn btn-default\" tabindex=\"0\"  ng-click=\"toggleInterval($index)\" ng-repeat=\"day in days\" ng-model=\"day\">{{day.value}}</button>' + '        </div>' + '        <div class=\"lp-st-interval-menu monthly btn-group\" ng-if=\"scheduledTransfer.frequency === frequenciesEnum.MONTHLY\">' + '            <button type=\"button\" interval-button=\"interval-button\" aria-label=\"{{date.label}}\" ng-class=\"{\\'active\\': date.active}\" class=\"btn btn-default\" tabindex=\"0\"  ng-click=\"toggleInterval($index)\" ng-repeat=\"date in dates\" ng-model=\"date\">{{date.value}}</button>' + '        </div>' + '        <div class=\"lp-st-interval-menu yearly btn-group\" ng-if=\"scheduledTransfer.frequency === frequenciesEnum.YEARLY\">' + '            <button type=\"button\" interval-button=\"interval-button\" aria-label=\"{{month.label}}\" ng-class=\"{\\'active\\': month.active}\" class=\"btn btn-default\" tabindex=\"0\" ng-click=\"toggleInterval($index)\" ng-repeat=\"month in months\" ng-model=\"month\">{{month.value}}</button>' + '        </div>' + '    </div>' + '    <div class=\"lp-st-start-date lp-st-section clearfix\">' + '        <div class=\"pull-left lp-st-caption\">Start</div>' + '        <div class=\"pull-left lp-st-control calendar\">' + '            <input ng-click=\"openStartCalendar($event)\" aria-label=\"start date\" type=\"text\" ng-required=\"isScheduledTransfer === true\" name=\"startDate\" ng-model=\"scheduledTransfer.startDate\" datepicker-popup=\"d-MMM-yyyy\" readonly=\"readonly\" is-open=\"calendar.startCalendarOpen\" datepicker-options=\"startDateOptions\" min-date=\"todaysDate\" class=\"form-control\" lp-future-time=\"\" show-button-bar=\"false\" tabindex=\"0\" ng-change=\"setEndDate()\" ng-keypress=\"openStartCalendar($event)\" \\/>' + '            <span ng-click=\"openStartCalendar($event)\" class=\"lp-icon lp-icon-calendar calendar-icon\"></span>' + '        </div>' + '    </div>' + '    <div class=\"lp-st-end-on lp-st-section clearfix\">' + '        <div class=\"pull-left lp-st-caption\">End</div>' + '        <div class=\"pull-left lp-st-control\">' + '            <div class=\"lp-st-end-on-dropdown\" aria-label=\"end on\" dropdown-select=\"dropdown-select\" ng-change=\"endOnChanged()\" ng-model=\"scheduledTransfer.endOn\" options=\"val.id as val.value for val in endOptions\"></div>' + '        </div>' + '    </div>' + '    <div class=\"lp-st-end-after lp-st-section clearfix\" ng-if=\"scheduledTransfer.endOn === \\'after\\'\">' + '        <div class=\"pull-left lp-st-caption\">Repeat</div>' + '        <div class=\"pull-left lp-st-control\">' + '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"2\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"form-control\" aria-label=\"times to repeat\" name=\"timesToRepeat\" aria-required=\"true\" required=\"required\" tabindex=\"0\" ng-model=\"scheduledTransfer.timesToRepeat\" ng-change=\"setEndDate()\"  \\/>' + '        </div>' + '    </div>' + '    <p class=\"text-muted\" ng-if=\"scheduledTransfer.endOn === \\'after\\' && timesEndDate.length > 0\" style=\"margin-left: 5px + \">Completion date: {{timesEndDate}}</p>' + '    <div class=\"lp-st-end-date lp-st-section clearfix\" ng-if=\"scheduledTransfer.endOn === \\'onDate\\'\">' + '        <div class=\"pull-left lp-st-caption\">End date</div>' + '        <div class=\"pull-left lp-st-control calendar\">' + '            <input ng-click=\"openEndCalendar($event)\" aria-label=\"end date\" type=\"text\" ng-required=\"isScheduledTransfer === true\" name=\"endDate\" ng-model=\"scheduledTransfer.endDate\" readonly=\"readonly\" datepicker-popup=\"d-MMM-yyyy\" is-open=\"calendar.endCalendarOpen\" datepicker-options=\"endDateOptions\" min-date=\"minEndDate\" class=\"form-control\" lp-future-time=\"\" show-button-bar=\"false\" tabindex=\"0\" ng-keypress=\"openEndCalendar($event)\" \\/>' + '            <span ng-click=\"openEndCalendar($event)\" class=\"lp-icon lp-icon-calendar calendar-icon\"></span>' + '        </div>' + '    </div>' + '    <p ng-if=\"dateWarning\">Transfer will be put through on the last day of the month if the month is not long enough</p>' + '</div>');\n\n\t        function linkFn(scope, element, attrs, ctrls) {\n\t            var dateCalculator;\n\t            var modelCtrl = ctrls[0];\n\t            var formCtrl = ctrls[1];\n\n\t            var isCustomOrder = function isCustomOrder() {\n\t                return scope.scheduledTransfer.frequency === scope.frequenciesEnum.WEEKLY || scope.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY || scope.scheduledTransfer.frequency === scope.frequenciesEnum.YEARLY;\n\t            };\n\n\t            var handleWarningDate = function handleWarningDate() {\n\t                var found = false;\n\n\t                if (scope.scheduledTransfer.intervals.length > 0 && scope.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY) {\n\t                    for (var i = 28; i < 31; i++) {\n\t                        if (scope.dates[i].active) {\n\t                            found = true;\n\t                        }\n\t                    }\n\t                }\n\n\t                scope.dateWarning = found;\n\t            };\n\n\t            var handleIntervalValidation = function handleIntervalValidation() {\n\t                var validIntervals = true;\n\n\t                validIntervals = scope.scheduledTransfer.intervals.length > 0 ? true : false;\n\n\t                //validate requirement from frequency\n\t                validIntervals = scope.customOrder ? validIntervals : true;\n\n\t                //validate whether the order is scheduled or not\n\t                validIntervals = scope.isScheduledTransfer ? validIntervals : true;\n\n\t                modelCtrl.$setValidity('intervalsRequired', validIntervals);\n\t            };\n\n\t            var clearActiveIntervals = function clearActiveIntervals() {\n\t                var i, l;\n\n\t                scope.scheduledTransfer.intervals = [];\n\n\t                for (i = 0, l = scope.days.length; i < l; i++) {\n\t                    scope.days[i].active = false;\n\t                }\n\n\t                for (i = 0, l = scope.dates.length; i < l; i++) {\n\t                    scope.dates[i].active = false;\n\t                }\n\n\t                for (i = 0, l = scope.months.length; i < l; i++) {\n\t                    scope.months[i].active = false;\n\t                }\n\t            };\n\n\t            var initialize = function initialize() {\n\n\t                scope.todaysDate = new Date();\n\t                scope.minEndDate = new Date();\n\n\t                scope.frequenciesEnum = {\n\t                    START_OF_THE_MONTH: 'START_OF_THE_MONTH',\n\t                    END_OF_THE_MONTH: 'END_OF_THE_MONTH',\n\t                    LAST_FRIDAY_OF_THE_MONTH: 'LAST_FRIDAY_OF_THE_MONTH',\n\t                    WEEKLY: 'WEEKLY',\n\t                    MONTHLY: 'MONTHLY',\n\t                    YEARLY: 'YEARLY'\n\t                };\n\n\t                dateCalculator = new ScheduledDateCalculator({\n\t                    frequencies: scope.frequenciesEnum\n\t                });\n\n\t                //MENU OPTIONS\n\t                //groups prepended with letter to order list\n\t                if (!scope.frequencies) {\n\t                    // if endOptions where not passed these are defaults\n\t                    scope.frequencies = [{\n\t                        id: scope.frequenciesEnum.START_OF_THE_MONTH,\n\t                        value: 'First of the month',\n\t                        group: 'apreset'\n\t                    }, {\n\t                        id: scope.frequenciesEnum.END_OF_THE_MONTH,\n\t                        value: 'End of the month',\n\t                        group: 'apreset'\n\t                    }, {\n\t                        id: scope.frequenciesEnum.LAST_FRIDAY_OF_THE_MONTH,\n\t                        value: 'Last Friday of the month',\n\t                        group: 'apreset'\n\t                    }, {\n\t                        id: scope.frequenciesEnum.WEEKLY,\n\t                        value: 'Weekly',\n\t                        group: 'bcustom'\n\t                    }, {\n\t                        id: scope.frequenciesEnum.MONTHLY,\n\t                        value: 'Monthly',\n\t                        group: 'bcustom'\n\t                    }, {\n\t                        id: scope.frequenciesEnum.YEARLY,\n\t                        value: 'Yearly',\n\t                        group: 'bcustom'\n\t                    }];\n\t                }\n\t                //interval days\n\t                scope.days = [{\n\t                    id: 1,\n\t                    value: 'M',\n\t                    label: 'Monday',\n\t                    active: false\n\t                }, {\n\t                    id: 2,\n\t                    value: 'T',\n\t                    label: 'Tuesday',\n\t                    active: false\n\t                }, {\n\t                    id: 3,\n\t                    value: 'W',\n\t                    label: 'Wednesday',\n\t                    active: false\n\t                }, {\n\t                    id: 4,\n\t                    value: 'T',\n\t                    label: 'Thursday',\n\t                    active: false\n\t                }, {\n\t                    id: 5,\n\t                    value: 'F',\n\t                    label: 'Friday',\n\t                    active: false\n\t                }, {\n\t                    id: 6,\n\t                    value: 'S',\n\t                    label: 'Saturday',\n\t                    active: false\n\t                }, {\n\t                    id: 7,\n\t                    value: 'S',\n\t                    label: 'Sunday',\n\t                    active: false\n\t                }];\n\n\t                //interval months\n\t                scope.months = [{\n\t                    id: 1,\n\t                    value: 'Jan',\n\t                    label: 'January',\n\t                    active: false\n\t                }, {\n\t                    id: 2,\n\t                    value: 'Feb',\n\t                    label: 'February',\n\t                    active: false\n\t                }, {\n\t                    id: 3,\n\t                    value: 'Mar',\n\t                    label: 'March',\n\t                    active: false\n\t                }, {\n\t                    id: 4,\n\t                    value: 'Apr',\n\t                    label: 'April',\n\t                    active: false\n\t                }, {\n\t                    id: 5,\n\t                    value: 'May',\n\t                    label: 'May',\n\t                    active: false\n\t                }, {\n\t                    id: 6,\n\t                    value: 'Jun',\n\t                    label: 'June',\n\t                    active: false\n\t                }, {\n\t                    id: 7,\n\t                    value: 'Jul',\n\t                    label: 'July',\n\t                    active: false\n\t                }, {\n\t                    id: 8,\n\t                    value: 'Aug',\n\t                    label: 'August',\n\t                    active: false\n\t                }, {\n\t                    id: 9,\n\t                    value: 'Sep',\n\t                    label: 'September',\n\t                    active: false\n\t                }, {\n\t                    id: 10,\n\t                    value: 'Oct',\n\t                    label: 'October',\n\t                    active: false\n\t                }, {\n\t                    id: 11,\n\t                    value: 'Nov',\n\t                    label: 'November',\n\t                    active: false\n\t                }, {\n\t                    id: 12,\n\t                    value: 'Dec',\n\t                    label: 'December',\n\t                    active: false\n\t                }];\n\n\t                //interval dates\n\t                scope.dates = [];\n\n\t                for (var i = 1; i < 32; i++) {\n\t                    scope.dates.push({\n\t                        id: i,\n\t                        value: i,\n\t                        label: i,\n\t                        active: false\n\t                    });\n\t                }\n\n\t                if (!scope.endOptions) {\n\t                    // if endOptions where not passed these are defaults\n\t                    scope.endOptions = [{\n\t                        id: 'after',\n\t                        value: 'After'\n\t                    }, {\n\t                        id: 'onDate',\n\t                        value: 'On date'\n\t                    }];\n\t                }\n\t                scope.scheduledTransfer.endOn = scope.endOptions[0].id;\n\n\t                scope.customOrder = false;\n\t                scope.dateWarning = false;\n\n\t                //calendar flags\n\t                scope.calendar = {\n\t                    startCalendarOpen: false,\n\t                    endCalendarOpen: false\n\t                };\n\n\t                scope.endDateOptions = {\n\t                    datepickerMode: 'year',\n\t                    'show-weeks': false\n\t                };\n\n\t                scope.startDateOptions = {\n\t                    'show-weeks': false\n\t                };\n\n\t                scope.timesEndDate = scope.scheduledTransfer.endDate;\n\n\t                scope.setEndDate();\n\t            };\n\n\t            //add intervals control to form to cater for validation\n\t            modelCtrl.$name = 'scheduledTransfer';\n\t            formCtrl.$addControl(modelCtrl);\n\n\t            modelCtrl.$formatters.push(function (value) {\n\t                if (value.intervals.length > 0) {\n\t                    var i, j;\n\n\t                    //check the frequency\n\t                    if (value.frequency === scope.frequenciesEnum.WEEKLY) {\n\t                        //if correct frequency\n\t                        for (i = 0; i < value.intervals.length; i++) {\n\t                            //remap active intervals\n\t                            for (j = 0; j < scope.days.length; j++) {\n\t                                if (value.intervals[i] === scope.days[j].id) {\n\t                                    scope.days[j].active = true;\n\t                                    break;\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (value.frequency === scope.frequenciesEnum.MONTHLY) {\n\t                        for (i = 0; i < value.intervals.length; i++) {\n\t                            for (j = 0; j < scope.dates.length; j++) {\n\t                                if (value.intervals[i] === scope.dates[j].id) {\n\t                                    scope.dates[j].active = true;\n\t                                    break;\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (value.frequency === scope.frequenciesEnum.YEARLY) {\n\t                        for (i = 0; i < value.intervals.length; i++) {\n\t                            for (j = 0; j < scope.months.length; j++) {\n\t                                if (value.intervals[i] === scope.months[j].id) {\n\t                                    scope.months[j].active = true;\n\t                                    break;\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\n\t                //set frequency\n\t                scope.scheduledTransfer.frequency = value.frequency === '' ? scope.frequencies[0].id : value.frequency;\n\n\t                //set custom order\n\t                if (isCustomOrder()) {\n\t                    scope.customOrder = true;\n\t                } else {\n\t                    scope.customOrder = false;\n\t                }\n\n\t                handleWarningDate();\n\t                scope.setTransferPeriodDates();\n\t            });\n\n\t            /**\n\t             * FREQUENCY FUNCTIONS\n\t             */\n\t            //reset the interval list and set whether the standing order is custom or not\n\t            scope.frequencyChanged = function () {\n\n\t                clearActiveIntervals();\n\n\t                scope.setTransferPeriodDates();\n\n\t                if (isCustomOrder()) {\n\t                    scope.customOrder = true;\n\t                    handleIntervalValidation();\n\t                    scope.scheduledTransfer.customOrder = true;\n\t                } else {\n\t                    scope.customOrder = false;\n\t                    modelCtrl.$setValidity('intervalsRequired', true);\n\t                    scope.scheduledTransfer.customOrder = false;\n\t                }\n\n\t                handleWarningDate();\n\t            };\n\n\t            /**\n\t             * INTERVAL FUNCTIONS\n\t             */\n\t            //add a selected interval to the interval list\n\t            scope.toggleInterval = function ($index) {\n\n\t                var list, search;\n\n\t                //set list to whichever frequency is currently selected\n\t                if (scope.scheduledTransfer.frequency === scope.frequenciesEnum.WEEKLY) {\n\t                    list = scope.days;\n\t                } else if (scope.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY) {\n\t                    list = scope.dates;\n\t                } else if (scope.scheduledTransfer.frequency === scope.frequenciesEnum.YEARLY) {\n\t                    list = scope.months;\n\t                }\n\n\t                search = list[$index];\n\n\t                if (search.active) {\n\t                    //remove from list\n\t                    var index = scope.scheduledTransfer.intervals.indexOf(search.id);\n\t                    scope.scheduledTransfer.intervals.splice(index, 1);\n\t                } else {\n\t                    //add to list\n\t                    scope.scheduledTransfer.intervals.push(search.id);\n\t                }\n\n\t                search.active = !search.active;\n\n\t                //set interval control validity\n\t                handleIntervalValidation();\n\t                handleWarningDate();\n\n\t                scope.setEndDate();\n\t            };\n\n\t            /**\n\t             * CALENDAR FUNCTIONS\n\t             */\n\t            scope.openStartCalendar = function ($event) {\n\t                //open calendar on click event or \"enter\" and \"space\" key press events\n\t                if ($event.type === 'click' || $event.which === 32 || $event.which === 13) {\n\t                    $event.preventDefault();\n\t                    $event.stopPropagation();\n\n\t                    scope.calendar.endCalendarOpen = false;\n\t                    //open start date calendar\n\t                    scope.calendar.startCalendarOpen = !scope.calendar.startCalendarOpen;\n\t                }\n\t            };\n\n\t            scope.openEndCalendar = function ($event) {\n\t                if ($event.type === 'click' || $event.which === 32 || $event.which === 13) {\n\t                    $event.preventDefault();\n\t                    $event.stopPropagation();\n\n\t                    scope.calendar.startCalendarOpen = false;\n\t                    //open end date calendar\n\t                    scope.calendar.endCalendarOpen = !scope.calendar.endCalendarOpen;\n\t                }\n\t            };\n\n\t            scope.setTransferPeriodDates = function () {\n\n\t                if (_typeof(scope.scheduledTransfer.startDate) !== 'object') {\n\t                    if (isCustomOrder()) {\n\t                        //start date todays date\n\t                        scope.scheduledTransfer.startDate = new Date(scope.todaysDate.getTime());\n\t                    } else {\n\t                        //calculate start date\n\t                        if (scope.scheduledTransfer.frequency === scope.frequenciesEnum.END_OF_THE_MONTH) {\n\t                            scope.scheduledTransfer.startDate = dateCalculator.getLastDayOfMonth();\n\t                        } else if (scope.scheduledTransfer.frequency === scope.frequenciesEnum.START_OF_THE_MONTH) {\n\t                            scope.scheduledTransfer.startDate = dateCalculator.getFirstDayOfMonth();\n\t                        } else if (scope.scheduledTransfer.frequency === scope.frequenciesEnum.LAST_FRIDAY_OF_THE_MONTH) {\n\t                            scope.scheduledTransfer.startDate = dateCalculator.getLastFridayOfMonth();\n\t                        }\n\t                    }\n\t                }\n\n\t                scope.setEndDate();\n\t            };\n\n\t            scope.setEndDate = function () {\n\n\t                var timeToAdd;\n\n\t                if (scope.scheduledTransfer.startDate) {\n\t                    var date = new Date(scope.scheduledTransfer.startDate.getTime());\n\n\t                    if (isCustomOrder()) {\n\t                        timeToAdd = scope.scheduledTransfer.timesToRepeat * scope.scheduledTransfer.every;\n\n\t                        //add specified number of weeks/months/years to date\n\t                        if (scope.scheduledTransfer.frequency === scope.frequenciesEnum.WEEKLY) {\n\t                            date = dateCalculator.addWeeksToDate(date, timeToAdd);\n\t                        } else if (scope.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY) {\n\t                            date = dateCalculator.addMonthsToDate(date, timeToAdd);\n\t                        } else if (scope.scheduledTransfer.frequency === scope.frequenciesEnum.YEARLY) {\n\t                            date = dateCalculator.addYearsToDate(date, timeToAdd);\n\t                        }\n\t                    } else {\n\t                        timeToAdd = scope.scheduledTransfer.timesToRepeat;\n\t                        timeToAdd = scope.scheduledTransfer.timesToRepeat;\n\n\t                        //calculate end date based on frequency\n\t                        if (scope.scheduledTransfer.frequency === scope.frequenciesEnum.END_OF_THE_MONTH) {\n\t                            date = dateCalculator.getLastDayOfMonthPlusTime(date, timeToAdd);\n\t                        } else if (scope.scheduledTransfer.frequency === scope.frequenciesEnum.START_OF_THE_MONTH) {\n\t                            date = dateCalculator.getFirstDayOfMonthPlusTime(date, timeToAdd);\n\t                        } else if (scope.scheduledTransfer.frequency === scope.frequenciesEnum.LAST_FRIDAY_OF_THE_MONTH) {\n\t                            date = dateCalculator.getLastFridayOfMonthPlusTime(date, timeToAdd);\n\t                        }\n\t                    }\n\n\t                    scope.scheduledTransfer.endDate = date;\n\t                    scope.minEndDate = dateCalculator.calculateMinimumEndDate(scope.scheduledTransfer.frequency, scope.scheduledTransfer.every, new Date(scope.scheduledTransfer.startDate.getTime()));\n\n\t                    scope.timesEndDate = new Date(scope.scheduledTransfer.endDate.getTime()).toString('d-MMM-yyyy');\n\t                }\n\t            };\n\n\t            /**\n\t             * WATCHES\n\t             */\n\t            scope.$watch('isScheduledTransfer', function (newValue) {\n\t                handleIntervalValidation();\n\t            });\n\n\t            //reset scope on successful form submission\n\t            scope.$on('reset', function () {\n\t                scope.scheduledTransfer.frequency = scope.frequencies[0].id;\n\t                scope.customOrder = false;\n\t                scope.scheduledTransfer.customOrder = false;\n\t            });\n\n\t            initialize();\n\t        }\n\n\t        return {\n\t            restrict: 'AE',\n\t            replace: true,\n\t            require: ['ngModel', '^form'],\n\t            template: $templateCache.get('scheduled-transfer.html'),\n\t            scope: {\n\t                scheduledTransfer: '=ngModel',\n\t                isScheduledTransfer: '=lpIsScheduledTransfer',\n\t                frequencies: '=?frequencies',\n\t                endOptions: '=?endOptions'\n\t            },\n\t            link: linkFn\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\n\t    'use strict';\n\n\t    var base = __webpack_require__(8);\n\t    var lpCoreUtils = base.inject('lpCoreUtils', __webpack_require__(9).name);\n\n\t    /**\n\t     * Scheduled Date Calculator Constructor\n\t     * @constructor\n\t     */\n\t    var ScheduledDateCalculator = module.exports = function ScheduledDateCalculator(config) {\n\t        var self = this;\n\n\t        self.frequencies = config.frequencies;\n\t    };\n\n\t    /**\n\t     * Add number of weeks to a specified date\n\t     * @param date\n\t     * @param noOfWeeks\n\t     * @returns {Date}\n\t     */\n\t    ScheduledDateCalculator.prototype.addWeeksToDate = function (date, noOfWeeks) {\n\t        return lpCoreUtils.date(date).add(noOfWeeks, 'weeks').toDate();\n\t    };\n\n\t    /**\n\t     * Add number of months to a specified date\n\t     * @param date\n\t     * @param noOfMonths\n\t     * @returns {Date}\n\t     */\n\t    ScheduledDateCalculator.prototype.addMonthsToDate = function (date, noOfMonths) {\n\t        return lpCoreUtils.date(date).add(noOfMonths, 'months').toDate();\n\t    };\n\n\t    /**\n\t     * Add number of years to a specified date\n\t     * @param date\n\t     * @param noOfYears\n\t     * @returns {Date}\n\t     */\n\t    ScheduledDateCalculator.prototype.addYearsToDate = function (date, noOfYears) {\n\t        return lpCoreUtils.date(date).add(noOfYears, 'years').toDate();\n\t    };\n\n\t    /**\n\t     * Returns a date set at the last day of the month\n\t     * @returns Date\n\t     */\n\t    ScheduledDateCalculator.prototype.getLastDayOfMonth = function () {\n\t        return lpCoreUtils.date().endOf('month').toDate();\n\t    };\n\n\t    /**\n\t     * Returns a date set to today, if it is the first, or the next first day of a month\n\t     * @returns {Date}\n\t     */\n\t    ScheduledDateCalculator.prototype.getFirstDayOfMonth = function () {\n\t        var date = lpCoreUtils.date();\n\n\t        //is is the first day of the month?\n\t        if (date.date() !== 1) {\n\t            date.add(1, 'month').startOf('month');\n\t        }\n\n\t        return date.toDate();\n\t    };\n\n\t    /**\n\t     * Returns a date set to the next last friday of the month (if the last friday of this month has passed, it will go to the next)\n\t     * @returns {Date}\n\t     */\n\t    ScheduledDateCalculator.prototype.getLastFridayOfMonth = function () {\n\t        var lastDay = lpCoreUtils.date().endOf('month');\n\n\t        if (lastDay.day() >= 5) {\n\t            lastDay.subtract(lastDay.day() - 5, 'days');\n\t        } else {\n\t            lastDay.subtract(lastDay.day() + 2, 'days');\n\t        }\n\n\t        return lastDay.toDate();\n\t    };\n\n\t    /**\n\t     * returns provided date with extra months as specified\n\t     * @param date\n\t     * @param monthsToAdd\n\t     * @returns {Date}\n\t     */\n\t    ScheduledDateCalculator.prototype.getLastDayOfMonthPlusTime = function (date, monthsToAdd) {\n\t        return lpCoreUtils.date(date).add(monthsToAdd - 1, 'month').endOf('month').toDate();\n\t    };\n\n\t    /**\n\t     * Get's the first day of the month\n\t     * @param date\n\t     * @param monthsToAdd\n\t     * @returns {Date}\n\t     */\n\t    ScheduledDateCalculator.prototype.getFirstDayOfMonthPlusTime = function (date, monthsToAdd) {\n\t        var dateCopy = lpCoreUtils.date(date).clone();\n\n\t        //if start date is first of month (default start date, zero based)\n\t        if (dateCopy.day() === 0) {\n\t            dateCopy.add(monthsToAdd - 1, 'months').startOf('month');\n\t            if (dateCopy.isBefore(date)) {\n\t                date = dateCopy.add(1, 'months');\n\t            } else {\n\t                date = dateCopy;\n\t            }\n\t        } else {\n\t            date = lpCoreUtils.date(date).add(monthsToAdd, 'months').startOf('month');\n\t        }\n\n\t        return date.toDate();\n\t    };\n\n\t    /**\n\t     * Calculates the next last friday of a month based on the specified number of Months to add\n\t     * @param date\n\t     * @param monthsToAdd\n\t     * @returns {Date}\n\t     */\n\t    ScheduledDateCalculator.prototype.getLastFridayOfMonthPlusTime = function (date, monthsToAdd) {\n\t        var dateCopy = lpCoreUtils.date(date).clone();\n\t        var lastWeekFriday = function lastWeekFriday(d) {\n\t            return d.subtract(1, 'week').endOf('week').subtract(1, 'days');\n\t        };\n\n\t        //this month?\n\t        if (dateCopy.endOf('month').day() !== 5) {\n\t            lastWeekFriday(dateCopy);\n\n\t            if (dateCopy.isBefore(date)) {\n\t                dateCopy.add(monthsToAdd, 'months');\n\t            } else {\n\t                dateCopy.add(monthsToAdd - 1, 'months');\n\t            }\n\n\t            if (dateCopy.endOf('month').day() !== 5) {\n\t                lastWeekFriday(dateCopy);\n\t            }\n\t        } else {\n\t            dateCopy.add(monthsToAdd - 1, 'months').endOf('month');\n\n\t            if (dateCopy.day() !== 5) {\n\t                lastWeekFriday(dateCopy);\n\t            }\n\t        }\n\n\t        return dateCopy.toDate();\n\t    };\n\n\t    /**\n\t     * Calculates the minimum end date\n\t     * @param frequency\n\t     * @param repeatEvery\n\t     * @param date\n\t     * @returns {Date}\n\t     */\n\t    ScheduledDateCalculator.prototype.calculateMinimumEndDate = function (frequency, repeatEvery, date) {\n\t        switch (frequency) {\n\t            case this.frequencies.WEEKLY:\n\t                date = lpCoreUtils.date(date).add(1 * repeatEvery, 'weeks').toDate();\n\t                break;\n\t            case this.frequencies.MONTHLY:\n\t                date = lpCoreUtils.date(date).add(1 * repeatEvery, 'months').toDate();\n\t                break;\n\t            case this.frequencies.YEARLY:\n\t                date = lpCoreUtils.date(date).add(1 * repeatEvery, 'years').toDate();\n\t                break;\n\t            case this.frequencies.LAST_FRIDAY_OF_THE_MONTH:\n\t                date = this.getLastFridayOfMonthPlusTime(date, 1);\n\t                break;\n\t            case this.frequencies.START_OF_THE_MONTH:\n\t                date = this.getFirstDayOfMonthPlusTime(date, 1);\n\t                break;\n\t            case this.frequencies.END_OF_THE_MONTH:\n\t                date = this.getLastDayOfMonthPlusTime(date, 1);\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\n\t        return date;\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n\t/*\n\t *  ----------------------------------------------------------------\n\t *  Copyright © Backbase Launchpad B.V.\n\t *  ----------------------------------------------------------------\n\t *  Filename : main.js\n\t *  Description: Main entry point lp-amount-input component\n\t *  ----------------------------------------------------------------\n\t */\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    module.name = 'lp-amount-input';\n\t    var base = __webpack_require__(8);\n\t    var core = __webpack_require__(9);\n\t    var ui = __webpack_require__(11);\n\n\t    var deps = [core.name, ui.name];\n\n\t    module.exports = base.createModule(module.name, deps).directive(__webpack_require__(15));\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)(module)))\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\n\t    'use strict';\n\n\t    var defaults = {\n\t        decimals: 2,\n\t        hideGroupSep: false,\n\t        allowNegative: false,\n\t        currencySymbol: '' //use locale settings by default\n\t    };\n\n\t    /**\n\t     * lp-amount-input custom element directive\n\t     * @ngInject\n\t     */\n\t    exports.lpAmountInput = function (lpUIUtils, $locale, $parse) {\n\n\t        var StringMask = lpUIUtils.StringMask;\n\n\t        /**\n\t         * Main directive link function\n\t         *\n\t         * @param  {object} scope   Angular scope object\n\t         * @param  {HTMLElement} elem    DOM element\n\t         * @param  {object} attrs   Elem attributes\n\t         * @param  {object} ctrl  ngModelController\n\t         * @return {undefined}\n\t         */\n\t        function linkFn(scope, elem, attrs, ctrl) {\n\t            if (attrs.lpAmountInput) {\n\t                // Convert string to object.\n\t                attrs.lpAmountInput = $parse(attrs.lpAmountInput)(scope);\n\t            }\n\n\t            var options = lpUIUtils.defaults(attrs.lpAmountInput || {}, defaults);\n\n\t            var moneyMask,\n\t                decimalDelimiter = $locale.NUMBER_FORMATS.DECIMAL_SEP,\n\t                thousandsDelimiter = $locale.NUMBER_FORMATS.GROUP_SEP,\n\t                currencySym = options.currencySymbol || $locale.NUMBER_FORMATS.CURRENCY_SYM;\n\n\t            function maskFactory(maskDecimals) {\n\t                var decimalsPattern = maskDecimals > 0 ? decimalDelimiter + new Array(maskDecimals + 1).join('0') : '';\n\t                var maskPattern = currencySym + ' #' + thousandsDelimiter + '##0' + decimalsPattern;\n\t                return new StringMask(maskPattern, { reverse: true });\n\t            }\n\n\t            if (options.hideGroupSep) {\n\t                thousandsDelimiter = '';\n\t            }\n\n\t            moneyMask = maskFactory(options.decimals);\n\n\t            function formatter(value) {\n\t                if (!value) {\n\t                    return '';\n\t                }\n\n\t                var prefix = options.allowNegative && value < 0 ? '-' : '';\n\t                var valueToFormat = lpUIUtils.prepareNumberToFormatter(value, options.decimals);\n\t                return prefix + moneyMask.apply(valueToFormat);\n\t            }\n\n\t            function parser(value) {\n\t                if (!value) {\n\t                    return '';\n\t                }\n\n\t                var actualNumber = value.replace(/[^\\d]+/g, ''),\n\t                    formatedValue;\n\n\t                actualNumber = actualNumber.replace(/^[0]+([1-9])/, '$1');\n\t                formatedValue = moneyMask.apply(actualNumber);\n\n\t                if (options.allowNegative) {\n\t                    var isNegative = value[0] === '-',\n\t                        needsToInvertSign = value.slice(-1) === '-';\n\n\t                    //only apply the minus sign if it is negative or(exclusive)\n\t                    //needs to be negative and the number is different from zero\n\t                    if (needsToInvertSign ^ isNegative && !!actualNumber) {\n\t                        actualNumber *= -1;\n\t                        formatedValue = '-' + formatedValue;\n\t                    }\n\t                }\n\n\t                if (value !== formatedValue) {\n\t                    ctrl.$setViewValue(formatedValue);\n\t                    ctrl.$render();\n\t                }\n\n\t                formatedValue = formatedValue ? parseInt(formatedValue.replace(/[^\\d\\-]+/g, ''), 10) / Math.pow(10, options.decimals) : null;\n\n\t                return formatedValue;\n\t            }\n\t            // observe attribute changes\n\t            attrs.$observe('lpAmountInput', function (value) {\n\t                value = $parse(value)(scope);\n\t                if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n\t                    if (value.currencySymbol !== '') {\n\t                        currencySym = value.currencySymbol;\n\t                    }\n\t                    moneyMask = maskFactory(options.decimals);\n\t                    parser(ctrl.$viewValue);\n\t                }\n\t            });\n\t            // Add formatters and parsers.\n\t            ctrl.$formatters.push(formatter);\n\t            ctrl.$parsers.push(parser);\n\t        }\n\n\t        return {\n\t            require: 'ngModel',\n\t            restrict: 'A',\n\t            link: linkFn\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n\t/**\n\t *  ----------------------------------------------------------------\n\t *  Copyright © Backbase Launchpad B.V.\n\t *  ----------------------------------------------------------------\n\t *  Filename : main.js\n\t *  Description: Main entry point otp-check component\n\t *  ----------------------------------------------------------------\n\t */\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    module.name = 'otp-check';\n\t    var base = __webpack_require__(8);\n\t    var deps = [__webpack_require__(17).name];\n\n\t    module.exports = base.createModule(module.name, deps).directive(__webpack_require__(18));\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)(module)))\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_17__;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\n\t    'use strict';\n\n\t    var layoutDesktop = __webpack_require__(19);\n\t    var fieldsList = __webpack_require__(20).fields;\n\n\t    /**\n\t     * otp-check custom element directive\n\t     * @ngInject\n\t     */\n\t    exports.otpCheck = function ($timeout, lpCoreBus, lpEnrollmentUtil, lpCoreUtils) {\n\n\t        /**\n\t         * Main directive link function\n\t         * @param  {object} scope   Angular scope object\n\t         * @param  {HTMLElement} elem    DOM element\n\t         * @param  {object} attrs   Elem attributes\n\t         * @param  {object} ngModel ngModelController\n\t         * @return {undefined}\n\t         */\n\t        function linkFn(scope, elem, attrs, ngModel) {\n\t            var namespace = scope.otpEventNamespace || '';\n\n\t            scope.otp = {}; // main state object\n\t            scope.otp.input = lpCoreUtils.clone(fieldsList.verifyOtp);\n\n\t            scope.otp.input.name = scope.otpInputName || scope.otp.input.name;\n\n\t            // Passing api function to verifier\n\t            scope.otp.input.api = function () {\n\t                return {\n\t                    verifyOtp: function verifyOtp(params) {\n\t                        return scope.otpApi(params);\n\t                    }\n\t                };\n\t            };\n\n\t            scope.mask = lpEnrollmentUtil.maskStringMaker;\n\n\t            // Step 1\n\t            scope.otp.showChannelSelector = true;\n\t            scope.otp.showOtpVerification = false;\n\n\t            // Select channel\n\t            scope.selectChannel = function (channel) {\n\t                scope.channelSelected = channel;\n\t            };\n\n\t            scope.cancel = function () {\n\t                // go to 'select channel' step\n\t                scope.back();\n\n\t                // clear otp input field\n\t                scope.otp.input.value = null;\n\n\t                scope.channelSelected = false;\n\t                scope.otpNext = false;\n\n\t                // reset otp field\n\t                lpCoreBus.publish('lp-labeled-input:reset:by:name', scope.otpInputName);\n\t            };\n\n\t            // Returning to step 1\n\t            scope.back = function () {\n\t                scope.otp.showChannelSelector = true;\n\t                scope.otp.showOtpVerification = false;\n\t            };\n\n\t            scope.select = function () {\n\t                scope.loading = true;\n\t                lpCoreBus.publish(namespace + '.lp-otp-check-select-channel', scope.channelSelected);\n\t            };\n\n\t            lpCoreBus.subscribe(namespace + '.lp-otp-check-channel-response-success', function () {\n\t                scope.loading = false;\n\t                scope.otp.showChannelSelector = false;\n\t                scope.otp.showOtpVerification = true;\n\t                scope.codeSent = 'Sent';\n\t                $timeout(function () {\n\t                    scope.codeSent = false;\n\t                }, 500);\n\t            });\n\n\t            lpCoreBus.subscribe(namespace + '.lp-otp-check-channel-response-error', function (err) {\n\t                scope.loading = false;\n\t                scope.serverError = err.statusText || 'Server error!';\n\t                $timeout(function () {\n\t                    scope.serverError = false;\n\t                }, 5000);\n\t            });\n\n\t            // Step 2\n\t            scope.serverResponseFails = false;\n\t            scope.serverValidationFails = false;\n\n\t            lpCoreBus.subscribe('lp-enrollment:validation:external', function (res) {\n\t                //exit if validated input is not in current scope\n\t                if (res.name !== scope.otpInputName) {\n\t                    return;\n\t                }\n\n\t                // let know about server request error\n\t                if (res.serverError) {\n\t                    scope.verifyLoading = false; // enable submit button\n\t                    scope.serverResponseFails = 'Server error for [' + res.name + ']';\n\t                } else {\n\t                    scope.serverResponseFails = false;\n\t                }\n\n\t                // let know about server validation error\n\t                if (res.validationError) {\n\t                    scope.verifyLoading = false; // enable submit button\n\t                    scope.serverValidationFails = res.validationError;\n\t                } else {\n\t                    scope.serverValidationFails = false;\n\t                }\n\n\t                // All is OK!\n\t                if (!scope.serverResponseFails && !scope.serverValidationFails) {\n\t                    $timeout(function () {\n\t                        // close view\n\t                        scope.cancel();\n\n\t                        // let know widget\n\t                        lpCoreBus.publish(namespace + '.lp-otp-check-success');\n\t                    }, 500);\n\t                }\n\t            });\n\n\t            scope.verify = function () {\n\t                scope.verifyLoading = true; // disable submit button\n\t                lpCoreBus.publish('lp-enrollment:verify:by', scope.otpInputName);\n\t            };\n\t        }\n\n\t        /**\n\t         * Compile function manipulate the DOM before the linking\n\t         * @param  {HTMLElement} elem  DOM element\n\t         * @param  {object} attrs Element attributes\n\t         * @return {function}       Linked function\n\t         */\n\t        function compileFn(elem, attrs) {\n\t            return linkFn;\n\t        }\n\n\t        return {\n\t            scope: {\n\t                otpNext: '=',\n\t                otpApi: '=',\n\t                otpInputName: '@',\n\t                otpEventNamespace: '@'\n\t            },\n\t            template: layoutDesktop,\n\t            compile: compileFn,\n\t            restrict: 'AE',\n\t            link: linkFn\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    /**\n\t     * Export Template\n\t     */\n\n\t    module.exports = '' + '<!-- DESKTOP -->' + '<div class=\"lp-otp-check otp-check is-desktop\">' + '   <div ng-show=\"otp.showChannelSelector\">' + '       <div class=\"otp-content\">' + '           <h3 lp-i18n=\"Verification required\"></h3>' + '           <div class=\"text-muted\" lp-i18n=\"Same sensitive payments require you to provide a verification code. This does not affect your registered devices.\"></div>' + '           <h5 ng-show=\"serverError\" class=\"text-red\" lp-i18n=\"{{ serverError }}\"></h5>' + '           <h5 ng-hide=\"serverError\" class=\"text-success\">&nbsp;</h5>' + '           <h5 lp-i18n=\"Where do you want to receive your verification code?\"></h5>' + '           <div class=\"channel-selector row\">' + '               <div class=\"cell col-xs-12 col-sm-12 col-md-12 col-lg-12\">' + '                   <div lp-custom-radio=\"\" class=\"custom-radio custom-radio-lg\" ng-model=\"channelSelected\" value=\"phone\" name=\"numbers\">' + '                       <div class=\"radio-label\">' + '                           <div class=\"radio-label-main\" lp-i18n=\"Use my mobile phone\"></div>' + '                           <div class=\"radio-label-small\" lp-i18n=\"{{ mask(\\'phone\\')(otpNext.phone.phoneNumber) }}\"></div>' + '                       </div>' + '                   </div>' + '                   <div lp-custom-radio=\"\" class=\"custom-radio custom-radio-lg\" ng-model=\"channelSelected\" value=\"email\" name=\"numbers\">' + '                       <div class=\"radio-label\">' + '                           <div class=\"radio-label-main\" lp-i18n=\"Use my email\"></div>' + '                           <div class=\"radio-label-small\" lp-i18n=\"{{ mask(\\'email\\')(otpNext.email.emailAddress) }}\"></div>' + '                       </div>' + '                   </div>' + '               </div>' + '           </div>' + '       </div>  ' + '       <div class=\"otp-nav text-right\">' + '           <button ng-click=\"cancel()\" ng-disabled=\"loading\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></button>' + '           <button ng-click=\"select()\" ng-disabled=\"!channelSelected || loading\" class=\"btn btn-primary\" lp-i18n=\"Send my code\"></button>' + '           <i ng-show=\"loading\" class=\"loading-button\"><span class=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\"></span></i>' + '       </div>' + '   </div>' + '   <!-- Step 2: verify code -->' + '   <div ng-show=\"otp.showOtpVerification\">' + '       <div class=\"otp-content\">' + '           <h4 lp-i18n=\"Enter authentication code:\"></h4>' + '           <div class=\"row\">' + '               <div class=\"col-xs-12 col-sm-8 col-md-6 col-lg-5\">' + '                   <div lp-labeled-input-field=\"lp-labeled-input-field\"' + '                       external-verification=\"{{ otp.input.externalVerification }}\"' + '                       input-type=\"{{ otp.input.type }}\"' + '                       api=\"otp.input.api()\"' + '                       description=\"templates/otp.html\"' + '                       button-inside=\"otp.input.buttonInside\"' + '                       input-value=\"otp.input.value\"' + '                       is-required=\"{{ otp.input.required }}\"' + '                       input-pattern=\"{{ otp.input.pattern }}\"' + '                       pattern-error-msg=\"{{ otp.input.errorMsg }}\"' + '                       field-name=\"{{ otp.input.name }}\"' + '                       placeholder-text=\"{{ otp.input.placeholder }}\"></div>' + '               </div>' + '           </div>' + '           <h5 ng-show=\"serverResponseFails\" class=\"text-red\" lp-i18n=\"Server response failed!\"></h5>' + '           <h5 ng-show=\"serverValidationFails\" class=\"text-red\" lp-i18n=\"{{serverValidationFails}}\"></h5>' + '           <br><button ng-click=\"select()\" ng-disabled=\"!channelSelected || loading\" class=\"btn btn-link text-right\" lp-i18n=\"Re-send code\"></button>' + '           <span ng-show=\"codeSent\" class=\"text-success\" lp-i18n=\"{{ codeSent }}\"></span>' + '           <i ng-show=\"loading\" class=\"loading-button\"><span class=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\"></span></i>' + '           <span ng-show=\"serverError\" class=\"text-red text-center\" lp-i18n=\"{{ serverError }}\"></span>' + '       </div>' + '       <div class=\"otp-nav text-right\">' + '           <button ng-click=\"back()\" ng-disabled=\"loading\" class=\"btn btn-link\" lp-i18n=\"Back\"></button>' + '           <button ng-click=\"verify()\" class=\"btn btn-primary verify-button\" ng-disabled=\"!otp.input.value || loading\" lp-i18n=\"Verify\"></button>' + '       </div>' + '   </div>' + '</div>';\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    // Configure input fields for different steps\n\n\t    exports.fields = {\n\t        verifyOtp: {\n\t            name: 'otpCode',\n\t            required: true,\n\t            externalVerification: 'verifyOtp',\n\t            buttonInside: true,\n\t            type: 'text',\n\t            pattern: '/^[0-9]{6}$/',\n\t            errorMsg: 'Wrong format: should be at least 6 digits',\n\t            placeholder: 'Enter your code',\n\t            value: null\n\t        }\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n\t/**\n\t * @deprecated will be removed in LP v0.13.x\n\t * Please use Scheduled Transfer component and\n\t * factories/scheduled-date-calculator instead\n\t */\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t\t'use strict';\n\n\t\tmodule.name = 'module-payments-deprecated';\n\n\t\tvar base = __webpack_require__(8);\n\n\t\tvar deps = [];\n\n\t\tmodule.exports = base.createModule(module.name, deps).factory(__webpack_require__(22)).directive(__webpack_require__(23));\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)(module)))\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t/* eslint-disable */\n\n\t/**\n\t * @deprecated will be removed in LP v0.13.x\n\t * Please use factories/scheduled-date-calculator instead\n\t */\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    exports.ScheduledDateCalculator = function (lpCoreUtils) {\n\n\t        /**\n\t         * Scheduled Date Calculator Constructor\n\t         * @constructor\n\t         */\n\t        var ScheduledDateCalculator = function ScheduledDateCalculator(config) {\n\t            var self = this;\n\n\t            self.frequencies = config.frequencies;\n\t        };\n\n\t        /**\n\t         * Add number of weeks to a specified date\n\t         * @param date\n\t         * @param noOfWeeks\n\t         * @returns {Date}\n\t         */\n\t        ScheduledDateCalculator.prototype.addWeeksToDate = function (date, noOfWeeks) {\n\t            return lpCoreUtils.date(date).add(noOfWeeks, 'weeks').toDate();\n\t        };\n\n\t        /**\n\t         * Add number of months to a specified date\n\t         * @param date\n\t         * @param noOfMonths\n\t         * @returns {Date}\n\t         */\n\t        ScheduledDateCalculator.prototype.addMonthsToDate = function (date, noOfMonths) {\n\t            return lpCoreUtils.date(date).add(noOfMonths, 'months').toDate();\n\t        };\n\n\t        /**\n\t         * Add number of years to a specified date\n\t         * @param date\n\t         * @param noOfYears\n\t         * @returns {Date}\n\t         */\n\t        ScheduledDateCalculator.prototype.addYearsToDate = function (date, noOfYears) {\n\t            return lpCoreUtils.date(date).add(noOfYears, 'years').toDate();\n\t        };\n\n\t        /**\n\t         * Returns a date set at the last day of the month\n\t         * @returns Date\n\t         */\n\t        ScheduledDateCalculator.prototype.getLastDayOfMonth = function () {\n\t            return lpCoreUtils.date().endOf('month').toDate();\n\t        };\n\n\t        /**\n\t         * Returns a date set to today, if it is the first, or the next first day of a month\n\t         * @returns {Date}\n\t         */\n\t        ScheduledDateCalculator.prototype.getFirstDayOfMonth = function () {\n\t            var date = lpCoreUtils.date();\n\n\t            //is is the first day of the month?\n\t            if (date.date() !== 1) {\n\t                date.add(1, 'month').startOf('month');\n\t            }\n\n\t            return date.toDate();\n\t        };\n\n\t        /**\n\t         * Returns a date set to the next last friday of the month (if the last friday of this month has passed, it will go to the next)\n\t         * @returns {Date}\n\t         */\n\t        ScheduledDateCalculator.prototype.getLastFridayOfMonth = function () {\n\t            var lastDay = lpCoreUtils.date().endOf('month');\n\n\t            if (lastDay.day() >= 5) {\n\t                lastDay.subtract(lastDay.day() - 5, 'days');\n\t            } else {\n\t                lastDay.subtract(lastDay.day() + 2, 'days');\n\t            }\n\n\t            return lastDay.toDate();\n\t        };\n\n\t        /**\n\t         * returns provided date with extra months as specified\n\t         * @param date\n\t         * @param monthsToAdd\n\t         * @returns {Date}\n\t         */\n\t        ScheduledDateCalculator.prototype.getLastDayOfMonthPlusTime = function (date, monthsToAdd) {\n\t            return lpCoreUtils.date(date).add(monthsToAdd - 1, 'month').endOf('month').toDate();\n\t        };\n\n\t        /**\n\t         * Get's the first day of the month\n\t         * @param date\n\t         * @param monthsToAdd\n\t         * @returns {Date}\n\t         */\n\t        ScheduledDateCalculator.prototype.getFirstDayOfMonthPlusTime = function (date, monthsToAdd) {\n\t            var dateCopy = lpCoreUtils.date(date).clone();\n\n\t            //if start date is first of month (default start date, zero based)\n\t            if (dateCopy.day() === 0) {\n\t                dateCopy.add(monthsToAdd - 1, 'months').startOf('month');\n\t                if (dateCopy.isBefore(date)) {\n\t                    date = dateCopy.add(1, 'months');\n\t                } else {\n\t                    date = dateCopy;\n\t                }\n\t            } else {\n\t                date = lpCoreUtils.date(date).add(monthsToAdd, 'months').startOf('month');\n\t            }\n\n\t            return date.toDate();\n\t        };\n\n\t        /**\n\t         * Calculates the next last friday of a month based on the specified number of Months to add\n\t         * @param date\n\t         * @param monthsToAdd\n\t         * @returns {Date}\n\t         */\n\t        ScheduledDateCalculator.prototype.getLastFridayOfMonthPlusTime = function (date, monthsToAdd) {\n\t            var dateCopy = lpCoreUtils.date(date).clone();\n\t            var lastWeekFriday = function lastWeekFriday(d) {\n\t                return d.subtract(1, 'week').endOf('week').subtract(1, 'days');\n\t            };\n\n\t            //this month?\n\t            if (dateCopy.endOf('month').day() !== 5) {\n\t                lastWeekFriday(dateCopy);\n\n\t                if (dateCopy.isBefore(date)) {\n\t                    dateCopy.add(monthsToAdd, 'months');\n\t                } else {\n\t                    dateCopy.add(monthsToAdd - 1, 'months');\n\t                }\n\n\t                if (dateCopy.endOf('month').day() !== 5) {\n\t                    lastWeekFriday(dateCopy);\n\t                }\n\t            } else {\n\t                dateCopy.add(monthsToAdd - 1, 'months').endOf('month');\n\n\t                if (dateCopy.day() !== 5) {\n\t                    lastWeekFriday(dateCopy);\n\t                }\n\t            }\n\n\t            date = dateCopy.toDate();\n\t            return date = dateCopy.toDate();\n\t        };\n\n\t        /**\n\t         * Calculates the minimum end date\n\t         * @param frequency\n\t         * @param repeatEvery\n\t         * @param date\n\t         * @returns {Date}\n\t         */\n\t        ScheduledDateCalculator.prototype.calculateMinimumEndDate = function (frequency, repeatEvery, date) {\n\t            switch (frequency) {\n\t                case this.frequencies.WEEKLY:\n\t                    date = lpCoreUtils.date(date).add(1 * repeatEvery, 'weeks').toDate();\n\t                    break;\n\t                case this.frequencies.MONTHLY:\n\t                    date = lpCoreUtils.date(date).add(1 * repeatEvery, 'months').toDate();\n\t                    break;\n\t                case this.frequencies.YEARLY:\n\t                    date = lpCoreUtils.date(date).add(1 * repeatEvery, 'years').toDate();\n\t                    break;\n\t                case this.frequencies.LAST_FRIDAY_OF_THE_MONTH:\n\t                    date = this.getLastFridayOfMonthPlusTime(date, 1);\n\t                    break;\n\t                case this.frequencies.START_OF_THE_MONTH:\n\t                    date = this.getFirstDayOfMonthPlusTime(date, 1);\n\t                    break;\n\t                case this.frequencies.END_OF_THE_MONTH:\n\t                    date = this.getLastDayOfMonthPlusTime(date, 1);\n\t                    break;\n\t                default:\n\t                    break;\n\t            }\n\n\t            return date;\n\t        };\n\n\t        return {\n\t            getInstance: function getInstance(config) {\n\t                return new ScheduledDateCalculator(config);\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n\t/* eslint-disable */\n\n\t/**\n\t * @deprecated will be removed in LP v0.13.x\n\t * Please use Scheduled Transfer component instead.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    /**\n\t     * TODO: Refactor this directive to not require a widget instance.\n\t     */\n\n\t    // @ngInject\n\n\t    exports.scheduledTransfer = function (ScheduledDateCalculator) {\n\t        var template = '';\n\t        template += '<div class=\"lp-scheduled-transfer\">';\n\t        template += '    <div class=\"lp-st-frequency lp-st-section clearfix\">';\n\t        template += '        <div class=\"pull-left lp-st-caption\">Frequency</div>';\n\t        template += '        <div class=\"pull-left lp-st-control\">';\n\t        template += '            <div class=\"lp-st-frequency-dropdown\" aria-label=\"frequency\" dropdown-select=\"dropdown-select\" ng-change=\"frequencyChanged()\" ng-model=\"paymentOrder.scheduledTransfer.frequency\" options=\"val.id as val.value group by val.group for val in frequencies\"></div>';\n\t        template += '        </div>';\n\t        template += '    </div>';\n\t        template += '    <div class=\"lp-st-every lp-st-section clearfix\">';\n\t        template += '        <div class=\"pull-left lp-st-caption\" ng-if=\"customOrder\">Every</div>';\n\t        template += '        <div class=\"pull-left lp-st-control clearfix\" ng-if=\"paymentOrder.scheduledTransfer.frequency === frequenciesEnum.WEEKLY\">';\n\t        template += '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"1\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"lp-st-every-input pull-left\" name=\"repeatEvery\" required=\"required\" tabindex=\"0\" aria-required=\"true\" aria-label=\"Repeat weekly transfer every\" maxlength=\"2\" ng-model=\"paymentOrder.scheduledTransfer.every\" ng-change=\"setEndDate()\" \\/><span>week(s) on:</span>';\n\t        template += '        </div>';\n\t        template += '        <div class=\"pull-left lp-st-control clearfix\" ng-if=\"paymentOrder.scheduledTransfer.frequency === frequenciesEnum.MONTHLY\">';\n\t        template += '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"1\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"lp-st-every-input pull-left\" name=\"repeatEvery\" required=\"required\" tabindex=\"0\" aria-required=\"true\" aria-label=\"Repeat monthly transfer every\" maxlength=\"2\" ng-model=\"paymentOrder.scheduledTransfer.every\" ng-change=\"setEndDate()\" \\/><span>month(s) on:</span>';\n\t        template += '        </div>';\n\t        template += '        <div class=\"pull-left lp-st-control clearfix\" ng-if=\"paymentOrder.scheduledTransfer.frequency === frequenciesEnum.YEARLY\">';\n\t        template += '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"1\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"lp-st-every-input pull-left\" name=\"repeatEvery\" required=\"required\" tabindex=\"0\" aria-required=\"true\"  aria-label=\"Repeat yearly transfer every\" maxlength=\"2\" ng-model=\"paymentOrder.scheduledTransfer.every\" ng-change=\"setEndDate()\" \\/><span>year(s):</span>';\n\t        template += '        </div>';\n\t        template += '    </div>';\n\t        template += '    <div class=\"lp-st-interval lp-st-section clearfix\" ng-if=\"customOrder\">';\n\t        template += '        <div class=\"lp-st-interval-menu weekly btn-group\" ng-if=\"paymentOrder.scheduledTransfer.frequency === frequenciesEnum.WEEKLY\">';\n\t        template += '            <button type=\"button\" interval-button=\"interval-button\" aria-label=\"{{day.label}}\" ng-class=\"{\\'active\\': day.active}\" class=\"btn btn-default\" tabindex=\"0\"  ng-click=\"toggleInterval($index)\" ng-repeat=\"day in days\" ng-model=\"day\">{{day.value}}</button>';\n\t        template += '        </div>';\n\t        template += '        <div class=\"lp-st-interval-menu monthly btn-group\" ng-if=\"paymentOrder.scheduledTransfer.frequency === frequenciesEnum.MONTHLY\">';\n\t        template += '            <button type=\"button\" interval-button=\"interval-button\" aria-label=\"{{date.label}}\" ng-class=\"{\\'active\\': date.active}\" class=\"btn btn-default\" tabindex=\"0\"  ng-click=\"toggleInterval($index)\" ng-repeat=\"date in dates\" ng-model=\"date\">{{date.value}}</button>';\n\t        template += '        </div>';\n\t        template += '        <div class=\"lp-st-interval-menu yearly btn-group\" ng-if=\"paymentOrder.scheduledTransfer.frequency === frequenciesEnum.YEARLY\">';\n\t        template += '            <button type=\"button\" interval-button=\"interval-button\" aria-label=\"{{month.label}}\" ng-class=\"{\\'active\\': month.active}\" class=\"btn btn-default\" tabindex=\"0\" ng-click=\"toggleInterval($index)\" ng-repeat=\"month in months\" ng-model=\"month\">{{month.value}}</button>';\n\t        template += '        </div>';\n\t        template += '    </div>';\n\t        template += '    <div class=\"lp-st-start-date lp-st-section clearfix\">';\n\t        template += '        <div class=\"pull-left lp-st-caption\">Start</div>';\n\t        template += '        <div class=\"pull-left lp-st-control calendar\">';\n\t        template += '            <input ng-click=\"openStartCalendar($event)\" aria-label=\"start date\" type=\"text\" ng-required=\"paymentOrder.isScheduledTransfer === true\" name=\"startDate\" ng-model=\"paymentOrder.scheduledTransfer.startDate\" datepicker-popup=\"d-MMM-yyyy\" readonly=\"readonly\" is-open=\"calendar.startCalendarOpen\" datepicker-options=\"startDateOptions\" min-date=\"todaysDate\" class=\"form-control\" lp-future-time=\"\" show-button-bar=\"false\" tabindex=\"0\" ng-change=\"setEndDate()\" ng-keypress=\"openStartCalendar($event)\" \\/>';\n\t        template += '            <span ng-click=\"openStartCalendar($event)\" class=\"lp-icon lp-icon-calendar calendar-icon\"></span>';\n\t        template += '        </div>';\n\t        template += '    </div>';\n\t        template += '    <div class=\"lp-st-end-on lp-st-section clearfix\">';\n\t        template += '        <div class=\"pull-left lp-st-caption\">End</div>';\n\t        template += '        <div class=\"pull-left lp-st-control\">';\n\t        template += '            <div class=\"lp-st-end-on-dropdown\" aria-label=\"end on\" dropdown-select=\"dropdown-select\" ng-change=\"endOnChanged()\" ng-model=\"paymentOrder.scheduledTransfer.endOn\" options=\"val.id as val.value for val in endOptions\"></div>';\n\t        template += '        </div>';\n\t        template += '    </div>';\n\t        template += '    <div class=\"lp-st-end-after lp-st-section clearfix\" ng-if=\"paymentOrder.scheduledTransfer.endOn === \\'after\\'\">';\n\t        template += '        <div class=\"pull-left lp-st-caption\">Repeat</div>';\n\t        template += '        <div class=\"pull-left lp-st-control\">';\n\t        template += '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"2\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"form-control\" aria-label=\"times to repeat\" name=\"timesToRepeat\" aria-required=\"true\" required=\"required\" tabindex=\"0\" ng-model=\"paymentOrder.scheduledTransfer.timesToRepeat\" ng-change=\"setEndDate()\"  \\/>';\n\t        template += '        </div>';\n\t        template += '';\n\t        template += '    </div>';\n\t        template += '    <p class=\"text-muted\" ng-if=\"paymentOrder.scheduledTransfer.endOn === \\'after\\' && timesEndDate.length > 0\" style=\"margin-left: 5px;\">Completion date: {{timesEndDate}}</p>';\n\t        template += '    <div class=\"lp-st-end-date lp-st-section clearfix\" ng-if=\"paymentOrder.scheduledTransfer.endOn === \\'onDate\\'\">';\n\t        template += '        <div class=\"pull-left lp-st-caption\">End date</div>';\n\t        template += '        <div class=\"pull-left lp-st-control calendar\">';\n\t        template += '            <input ng-click=\"openEndCalendar($event)\" aria-label=\"end date\" type=\"text\" ng-required=\"paymentOrder.isScheduledTransfer === true\" name=\"endDate\" ng-model=\"paymentOrder.scheduledTransfer.endDate\" readonly=\"readonly\" datepicker-popup=\"d-MMM-yyyy\" is-open=\"calendar.endCalendarOpen\" datepicker-options=\"endDateOptions\" min-date=\"minEndDate\" class=\"form-control\" lp-future-time=\"\" show-button-bar=\"false\" tabindex=\"0\" ng-keypress=\"openEndCalendar($event)\" \\/>';\n\t        template += '            <span ng-click=\"openEndCalendar($event)\" class=\"lp-icon lp-icon-calendar calendar-icon\"></span>';\n\t        template += '        </div>';\n\t        template += '    </div>';\n\t        template += '    <p ng-if=\"dateWarning\">Transfer will be put through on the last day of the month if the month is not long enough</p>';\n\t        template += '</div>';\n\t        template += '';\n\n\t        return {\n\t            restrict: \"AE\",\n\t            replace: true,\n\t            require: [\"ngModel\", \"^form\"],\n\t            template: template,\n\t            link: function link(scope, element, attrs, ctrls) {\n\n\t                var dateCalculator;\n\n\t                var initialize = function initialize() {\n\n\t                    scope.todaysDate = new Date();\n\t                    scope.minEndDate = new Date();\n\n\t                    scope.frequenciesEnum = {\n\t                        START_OF_THE_MONTH: \"START_OF_THE_MONTH\",\n\t                        END_OF_THE_MONTH: \"END_OF_THE_MONTH\",\n\t                        LAST_FRIDAY_OF_THE_MONTH: \"LAST_FRIDAY_OF_THE_MONTH\",\n\t                        WEEKLY: \"WEEKLY\",\n\t                        MONTHLY: \"MONTHLY\",\n\t                        YEARLY: \"YEARLY\"\n\t                    };\n\n\t                    dateCalculator = ScheduledDateCalculator.getInstance({\n\t                        frequencies: scope.frequenciesEnum\n\t                    });\n\n\t                    //MENU OPTIONS\n\t                    //groups prepended with letter to order list\n\t                    if (!scope.frequencies) {\n\t                        // if endOptions where not passed these are defaults\n\t                        scope.frequencies = [{\n\t                            id: scope.frequenciesEnum.START_OF_THE_MONTH,\n\t                            value: \"First of the month\",\n\t                            group: \"apreset\"\n\t                        }, {\n\t                            id: scope.frequenciesEnum.END_OF_THE_MONTH,\n\t                            value: \"End of the month\",\n\t                            group: \"apreset\"\n\t                        }, {\n\t                            id: scope.frequenciesEnum.LAST_FRIDAY_OF_THE_MONTH,\n\t                            value: \"Last Friday of the month\",\n\t                            group: \"apreset\"\n\t                        }, {\n\t                            id: scope.frequenciesEnum.WEEKLY,\n\t                            value: \"Weekly\",\n\t                            group: \"bcustom\"\n\t                        }, {\n\t                            id: scope.frequenciesEnum.MONTHLY,\n\t                            value: \"Monthly\",\n\t                            group: \"bcustom\"\n\t                        }, {\n\t                            id: scope.frequenciesEnum.YEARLY,\n\t                            value: \"Yearly\",\n\t                            group: \"bcustom\"\n\t                        }];\n\t                    }\n\t                    //interval days\n\t                    scope.days = [{\n\t                        id: 1,\n\t                        value: \"M\",\n\t                        label: \"Monday\",\n\t                        active: false\n\t                    }, {\n\t                        id: 2,\n\t                        value: \"T\",\n\t                        label: \"Tuesday\",\n\t                        active: false\n\t                    }, {\n\t                        id: 3,\n\t                        value: \"W\",\n\t                        label: \"Wednesday\",\n\t                        active: false\n\t                    }, {\n\t                        id: 4,\n\t                        value: \"T\",\n\t                        label: \"Thursday\",\n\t                        active: false\n\t                    }, {\n\t                        id: 5,\n\t                        value: \"F\",\n\t                        label: \"Friday\",\n\t                        active: false\n\t                    }, {\n\t                        id: 6,\n\t                        value: \"S\",\n\t                        label: \"Saturday\",\n\t                        active: false\n\t                    }, {\n\t                        id: 7,\n\t                        value: \"S\",\n\t                        label: \"Sunday\",\n\t                        active: false\n\t                    }];\n\n\t                    //interval months\n\t                    scope.months = [{\n\t                        id: 1,\n\t                        value: \"Jan\",\n\t                        label: \"January\",\n\t                        active: false\n\t                    }, {\n\t                        id: 2,\n\t                        value: \"Feb\",\n\t                        label: \"February\",\n\t                        active: false\n\t                    }, {\n\t                        id: 3,\n\t                        value: \"Mar\",\n\t                        label: \"March\",\n\t                        active: false\n\t                    }, {\n\t                        id: 4,\n\t                        value: \"Apr\",\n\t                        label: \"April\",\n\t                        active: false\n\t                    }, {\n\t                        id: 5,\n\t                        value: \"May\",\n\t                        label: \"May\",\n\t                        active: false\n\t                    }, {\n\t                        id: 6,\n\t                        value: \"Jun\",\n\t                        label: \"June\",\n\t                        active: false\n\t                    }, {\n\t                        id: 7,\n\t                        value: \"Jul\",\n\t                        label: \"July\",\n\t                        active: false\n\t                    }, {\n\t                        id: 8,\n\t                        value: \"Aug\",\n\t                        label: \"August\",\n\t                        active: false\n\t                    }, {\n\t                        id: 9,\n\t                        value: \"Sep\",\n\t                        label: \"September\",\n\t                        active: false\n\t                    }, {\n\t                        id: 10,\n\t                        value: \"Oct\",\n\t                        label: \"October\",\n\t                        active: false\n\t                    }, {\n\t                        id: 11,\n\t                        value: \"Nov\",\n\t                        label: \"November\",\n\t                        active: false\n\t                    }, {\n\t                        id: 12,\n\t                        value: \"Dec\",\n\t                        label: \"December\",\n\t                        active: false\n\t                    }];\n\n\t                    //interval dates\n\t                    scope.dates = [];\n\n\t                    for (var i = 1; i < 32; i++) {\n\t                        scope.dates.push({\n\t                            id: i,\n\t                            value: i,\n\t                            label: i,\n\t                            active: false\n\t                        });\n\t                    }\n\n\t                    if (!scope.endOptions) {\n\t                        // if endOptions where not passed these are defaults\n\t                        scope.endOptions = [{\n\t                            id: \"after\",\n\t                            value: \"After\"\n\t                        }, {\n\t                            id: \"onDate\",\n\t                            value: \"On date\"\n\t                        }];\n\t                    }\n\t                    scope.paymentOrder.scheduledTransfer.endOn = scope.endOptions[0].id;\n\n\t                    scope.customOrder = false;\n\t                    scope.dateWarning = false;\n\n\t                    //calendar flags\n\t                    scope.calendar = {\n\t                        startCalendarOpen: false,\n\t                        endCalendarOpen: false\n\t                    };\n\n\t                    scope.endDateOptions = {\n\t                        datepickerMode: 'year',\n\t                        'show-weeks': false\n\t                    };\n\n\t                    scope.startDateOptions = {\n\t                        'show-weeks': false\n\t                    };\n\n\t                    scope.timesEndDate = scope.paymentOrder.scheduledTransfer.endDate;\n\n\t                    scope.setEndDate();\n\t                };\n\n\t                var modelCtrl = ctrls[0];\n\t                var formCtrl = ctrls[1];\n\n\t                //add intervals control to form to cater for validation\n\t                modelCtrl.$name = 'scheduledTransfer';\n\t                formCtrl.$addControl(modelCtrl);\n\n\t                modelCtrl.$formatters.push(function (value) {\n\t                    //remap intervals\n\t                    if (value.intervals.length > 0) {\n\t                        var i, j;\n\n\t                        //check the frequency\n\t                        if (value.frequency === scope.frequenciesEnum.WEEKLY) {\n\t                            //if correct frequency\n\t                            for (i = 0; i < value.intervals.length; i++) {\n\t                                //remap active intervals\n\t                                for (j = 0; j < scope.days.length; j++) {\n\t                                    if (value.intervals[i] === scope.days[j].id) {\n\t                                        scope.days[j].active = true;\n\t                                        break;\n\t                                    }\n\t                                }\n\t                            }\n\t                        } else if (value.frequency === scope.frequenciesEnum.MONTHLY) {\n\t                            for (i = 0; i < value.intervals.length; i++) {\n\t                                for (j = 0; j < scope.dates.length; j++) {\n\t                                    if (value.intervals[i] === scope.dates[j].id) {\n\t                                        scope.dates[j].active = true;\n\t                                        break;\n\t                                    }\n\t                                }\n\t                            }\n\t                        } else if (value.frequency === scope.frequenciesEnum.YEARLY) {\n\t                            for (i = 0; i < value.intervals.length; i++) {\n\t                                for (j = 0; j < scope.months.length; j++) {\n\t                                    if (value.intervals[i] === scope.months[j].id) {\n\t                                        scope.months[j].active = true;\n\t                                        break;\n\t                                    }\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\n\t                    //set frequency\n\t                    scope.paymentOrder.scheduledTransfer.frequency = value.frequency === \"\" ? scope.frequencies[0].id : value.frequency;\n\n\t                    //set custom order\n\t                    if (isCustomOrder()) {\n\t                        scope.customOrder = true;\n\t                    } else {\n\t                        scope.customOrder = false;\n\t                    }\n\n\t                    handleWarningDate();\n\t                    scope.setTransferPeriodDates();\n\t                });\n\n\t                /**\n\t                 * FREQUENCY FUNCTIONS\n\t                 */\n\t                //reset the interval list and set whether the standing order is custom or not\n\t                scope.frequencyChanged = function () {\n\n\t                    clearActiveIntervals();\n\n\t                    scope.setTransferPeriodDates();\n\n\t                    if (isCustomOrder()) {\n\t                        scope.customOrder = true;\n\t                        handleIntervalValidation();\n\t                        scope.paymentOrder.scheduledTransfer.customOrder = true;\n\t                    } else {\n\t                        scope.customOrder = false;\n\t                        modelCtrl.$setValidity(\"intervalsRequired\", true);\n\t                        scope.paymentOrder.scheduledTransfer.customOrder = false;\n\t                    }\n\n\t                    handleWarningDate();\n\t                };\n\n\t                /**\n\t                 * INTERVAL FUNCTIONS\n\t                 */\n\t                //add a selected interval to the interval list\n\t                scope.toggleInterval = function ($index) {\n\n\t                    var list, search;\n\n\t                    //set list to whichever frequency is currenctly selected\n\t                    if (scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.WEEKLY) {\n\t                        list = scope.days;\n\t                    } else if (scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY) {\n\t                        list = scope.dates;\n\t                    } else if (scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.YEARLY) {\n\t                        list = scope.months;\n\t                    }\n\n\t                    search = list[$index];\n\n\t                    if (search.active) {\n\t                        //remove from list\n\t                        var index = scope.paymentOrder.scheduledTransfer.intervals.indexOf(search.id);\n\t                        scope.paymentOrder.scheduledTransfer.intervals.splice(index, 1);\n\t                    } else {\n\t                        //add to list\n\t                        scope.paymentOrder.scheduledTransfer.intervals.push(search.id);\n\t                    }\n\n\t                    search.active = !search.active;\n\n\t                    //set interval control validity\n\t                    handleIntervalValidation();\n\t                    handleWarningDate();\n\n\t                    scope.setEndDate();\n\t                };\n\n\t                var handleIntervalValidation = function handleIntervalValidation() {\n\n\t                    var validIntervals = true;\n\n\t                    validIntervals = scope.paymentOrder.scheduledTransfer.intervals.length > 0 ? true : false;\n\n\t                    //validate requirement from frequency\n\t                    validIntervals = scope.customOrder ? validIntervals : true;\n\n\t                    //validate whether the order is scheduled or not\n\t                    validIntervals = scope.paymentOrder.isScheduledTransfer ? validIntervals : true;\n\n\t                    modelCtrl.$setValidity(\"intervalsRequired\", validIntervals);\n\t                };\n\n\t                var clearActiveIntervals = function clearActiveIntervals() {\n\n\t                    scope.paymentOrder.scheduledTransfer.intervals = [];\n\n\t                    var i;\n\n\t                    for (i = 0; i < scope.days.length; i++) {\n\t                        scope.days[i].active = false;\n\t                    }\n\n\t                    for (i = 0; i < scope.dates.length; i++) {\n\t                        scope.dates[i].active = false;\n\t                    }\n\n\t                    for (i = 0; i < scope.months.length; i++) {\n\t                        scope.months[i].active = false;\n\t                    }\n\t                };\n\n\t                /**\n\t                 * CALENDAR FUNCTIONS\n\t                 */\n\t                scope.openStartCalendar = function ($event) {\n\t                    //open calendar on click event or \"enter\" and \"space\" key press events\n\t                    if ($event.type === 'click' || $event.which === 32 || $event.which === 13) {\n\t                        $event.preventDefault();\n\t                        $event.stopPropagation();\n\n\t                        scope.calendar.endCalendarOpen = false;\n\t                        //open start date calendar\n\t                        scope.calendar.startCalendarOpen = !scope.calendar.startCalendarOpen;\n\t                    }\n\t                };\n\n\t                scope.openEndCalendar = function ($event) {\n\t                    if ($event.type === 'click' || $event.which === 32 || $event.which === 13) {\n\t                        $event.preventDefault();\n\t                        $event.stopPropagation();\n\n\t                        scope.calendar.startCalendarOpen = false;\n\t                        //open end date calendar\n\t                        scope.calendar.endCalendarOpen = !scope.calendar.endCalendarOpen;\n\t                    }\n\t                };\n\n\t                scope.setTransferPeriodDates = function () {\n\n\t                    if (_typeof(scope.paymentOrder.scheduledTransfer.startDate) !== 'object') {\n\t                        if (isCustomOrder()) {\n\t                            //start date todays date\n\t                            scope.paymentOrder.scheduledTransfer.startDate = new Date(scope.todaysDate.getTime());\n\t                        } else {\n\t                            //calculate start date\n\t                            if (scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.END_OF_THE_MONTH) {\n\t                                scope.paymentOrder.scheduledTransfer.startDate = dateCalculator.getLastDayOfMonth();\n\t                            } else if (scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.START_OF_THE_MONTH) {\n\t                                scope.paymentOrder.scheduledTransfer.startDate = dateCalculator.getFirstDayOfMonth();\n\t                            } else if (scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.LAST_FRIDAY_OF_THE_MONTH) {\n\t                                scope.paymentOrder.scheduledTransfer.startDate = dateCalculator.getLastFridayOfMonth();\n\t                            }\n\t                        }\n\t                    }\n\n\t                    scope.setEndDate();\n\t                };\n\n\t                scope.setEndDate = function () {\n\n\t                    var timeToAdd;\n\n\t                    if (scope.paymentOrder.scheduledTransfer.startDate) {\n\t                        var date = new Date(scope.paymentOrder.scheduledTransfer.startDate.getTime());\n\n\t                        if (isCustomOrder()) {\n\t                            timeToAdd = scope.paymentOrder.scheduledTransfer.timesToRepeat * scope.paymentOrder.scheduledTransfer.every;\n\n\t                            //add specified number of weeks/months/years to date\n\t                            if (scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.WEEKLY) {\n\t                                date = dateCalculator.addWeeksToDate(date, timeToAdd);\n\t                            } else if (scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY) {\n\t                                date = dateCalculator.addMonthsToDate(date, timeToAdd);\n\t                            } else if (scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.YEARLY) {\n\t                                date = dateCalculator.addYearsToDate(date, timeToAdd);\n\t                            }\n\t                        } else {\n\t                            timeToAdd = scope.paymentOrder.scheduledTransfer.timesToRepeat;\n\t                            timeToAdd = scope.paymentOrder.scheduledTransfer.timesToRepeat;\n\n\t                            //calculate end date based on frequency\n\t                            if (scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.END_OF_THE_MONTH) {\n\t                                date = dateCalculator.getLastDayOfMonthPlusTime(date, timeToAdd);\n\t                            } else if (scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.START_OF_THE_MONTH) {\n\t                                date = dateCalculator.getFirstDayOfMonthPlusTime(date, timeToAdd);\n\t                            } else if (scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.LAST_FRIDAY_OF_THE_MONTH) {\n\t                                date = dateCalculator.getLastFridayOfMonthPlusTime(date, timeToAdd);\n\t                            }\n\t                        }\n\n\t                        scope.paymentOrder.scheduledTransfer.endDate = date;\n\t                        scope.minEndDate = dateCalculator.calculateMinimumEndDate(scope.paymentOrder.scheduledTransfer.frequency, scope.paymentOrder.scheduledTransfer.every, new Date(scope.paymentOrder.scheduledTransfer.startDate.getTime()));\n\n\t                        scope.timesEndDate = new Date(scope.paymentOrder.scheduledTransfer.endDate.getTime()).toString(\"d-MMM-yyyy\");\n\t                    }\n\t                };\n\n\t                var handleWarningDate = function handleWarningDate() {\n\n\t                    var found = false;\n\n\t                    if (scope.paymentOrder.scheduledTransfer.intervals.length > 0 && scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY) {\n\t                        for (var i = 28; i < 31; i++) {\n\t                            if (scope.dates[i].active) {\n\t                                found = true;\n\t                            }\n\t                        }\n\t                    }\n\n\t                    scope.dateWarning = found;\n\t                };\n\n\t                /**\n\t                 * WATCHES\n\t                 */\n\t                scope.$watch(\"paymentOrder.isScheduledTransfer\", function (newValue) {\n\t                    handleIntervalValidation();\n\t                });\n\n\t                //reset scope on succesful form submission\n\t                scope.$on(\"reset\", function () {\n\t                    scope.paymentOrder.scheduledTransfer.frequency = scope.frequencies[0].id;\n\t                    scope.customOrder = false;\n\t                    scope.paymentOrder.scheduledTransfer.customOrder = false;\n\t                });\n\n\t                /**\n\t                 * GENERAL\n\t                 */\n\t                var isCustomOrder = function isCustomOrder() {\n\t                    return scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.WEEKLY || scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY || scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.YEARLY;\n\t                };\n\n\t                initialize();\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t\t'use strict';\n\n\t\tmodule.name = 'module-payments-migration';\n\n\t\tvar base = __webpack_require__(8);\n\n\t\tvar deps = [];\n\n\t\tmodule.exports = base.createModule(module.name, deps).directive(__webpack_require__(25)).directive(__webpack_require__(26)).directive(__webpack_require__(27)).directive(__webpack_require__(28)).directive(__webpack_require__(29)).filter(__webpack_require__(30)).factory(__webpack_require__(31)).directive(__webpack_require__(32)).directive(__webpack_require__(33)).directive(__webpack_require__(34)).directive(__webpack_require__(35)).directive(__webpack_require__(36)).directive(__webpack_require__(37)).directive(__webpack_require__(38)).directive(__webpack_require__(39)).directive(__webpack_require__(40));\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)(module)))\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    exports.addressTransfer = function ($templateCache, transferTypes) {\n\n\t        $templateCache.put(\"$addressTransferTemplate.html\", '<div class=\"lp-address-transfer\">' + '<div class=\"col-xs-12\">' + '<input type=\"input\" class=\"form-control\" ng-model=\"address.addressOne\" placeholder=\"Address Line 1\" aria-label=\"Address Line One\" />' + '<input type=\"input\" class=\"form-control\" ng-model=\"address.addressTwo\" placeholder=\"Address Line 2\" aria-label=\"Address Line Two\"  />' + '</div>' + '<div class=\"col-xs-12\">' + '<input type=\"input\" class=\"form-control\" ng-model=\"address.city\" placeholder=\"City\" aria-label=\"City\" />' + '</div>' + '<div class=\"col-xs-12\">' + '<div class=\"col-xs-5\">' + '<input type=\"input\" class=\"form-control\" ng-model=\"address.state\" placeholder=\"State\" aria-label=\"State\" />' + '</div>' + '<div ng-class=\"{\\'col-xs-offset-1\\': true, \\'col-xs-6\\': true, \\'has-feedback\\': address.zip.length > 0, \\'has-error\\': address.zip.length > 0 && !validZip, \\'has-success\\': address.zip.length > 0 && validZip}\">' + '<input type=\"input\" class=\"form-control\" ng-model=\"address.zip\" placeholder=\"Zip\" aria-label=\"Zip\" />' + '<span ng-if=\"validZip && address.zip.length > 0\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' + '<span ng-if=\"!validZip && address.zip.length > 0\" ng-click=\"clear()\" class=\"glyphicon glyphicon-remove form-control-feedback\"></span>' + '</div>' + '</div>' + '<div class=\"warning\">' + '<span>Selecting this means a cheque will be printed and posted on your behalf. Can take 7-14 days.</span>' + '</div>' + '</div>');\n\t        //display table row clearfix\n\n\t        return {\n\t            restrict: 'EA',\n\t            replace: true,\n\t            require: [\"ngModel\", \"^form\"],\n\t            scope: {\n\t                counterpartyAddress: '=ngModel',\n\t                transferType: '=lpTransferType'\n\t            },\n\t            template: $templateCache.get(\"$addressTransferTemplate.html\"),\n\t            link: function link(scope, element, attrs, ctrls) {\n\n\t                //Initial set up\n\t                /**\n\t                 * intialisation function\n\t                 * @constructor\n\t                 */\n\t                var initialize = function initialize() {\n\n\t                    scope.address = {\n\t                        addressOne: \"\",\n\t                        addressTwo: \"\",\n\t                        city: \"\",\n\t                        state: \"\",\n\t                        zip: \"\"\n\t                    };\n\n\t                    setDefaultValidation(scope.transferType);\n\t                };\n\n\t                //controllers\n\t                var modelCtrl = ctrls[0],\n\t                    formCtrl = ctrls[1],\n\t                    associatedTransferType = transferTypes.p2pAddress;\n\n\t                modelCtrl.$name = attrs.name;\n\t                formCtrl.$addControl(modelCtrl);\n\n\t                modelCtrl.$formatters.push(function (value) {\n\n\t                    validateAddress(value);\n\t                    return value;\n\t                });\n\n\t                var validateAddress = function validateAddress(address) {\n\n\t                    var lineOne = true,\n\t                        city = true,\n\t                        state = true,\n\t                        zip = true,\n\t                        zipValid = true;\n\t                    if (address) {\n\t                        //split address into multiple lines again\n\t                        var tempArray = address.split(\", \");\n\n\t                        scope.address.addressOne = tempArray[0];\n\t                        scope.address.addressTwo = tempArray[1];\n\t                        scope.address.city = tempArray[2];\n\t                        scope.address.state = tempArray[3];\n\t                        scope.address.zip = tempArray[4];\n\n\t                        //first line\n\t                        if (tempArray[0].length === 0) {\n\t                            lineOne = false;\n\t                        }\n\n\t                        //city line\n\t                        if (tempArray[2].length === 0) {\n\t                            city = false;\n\t                        }\n\n\t                        //state line\n\t                        if (tempArray[3].length === 0) {\n\t                            state = false;\n\t                        }\n\n\t                        //zip line\n\t                        if (tempArray[4].length === 0) {\n\t                            zip = false;\n\t                        } else {\n\t                            zipValid = validateZip(tempArray[4]);\n\t                        }\n\t                    }\n\n\t                    modelCtrl.$setValidity(\"addressLineOne\", lineOne);\n\t                    modelCtrl.$setValidity(\"addressCity\", city);\n\t                    modelCtrl.$setValidity(\"addressState\", state);\n\t                    modelCtrl.$setValidity(\"addressZip\", zip);\n\t                    modelCtrl.$setValidity(\"addressValidZip\", zipValid);\n\t                };\n\n\t                var validateZip = function validateZip(zip) {\n\n\t                    var re = /^\\d{5}(-\\d{4})?$/;\n\t                    var valid = re.test(zip);\n\t                    scope.validZip = valid;\n\t                    return valid;\n\t                };\n\n\t                scope.$watch(\"address\", function (newValue, oldValue) {\n\t                    if (newValue === oldValue) {\n\t                        return;\n\t                    }\n\n\t                    scope.counterpartyAddress = newValue.addressOne + \", \" + newValue.addressTwo + \", \" + newValue.city + \", \" + newValue.state + \", \" + newValue.zip;\n\t                }, true);\n\n\t                scope.$watch(\"transferType\", function (newValue, oldValue) {\n\n\t                    if (newValue === oldValue) {\n\t                        return;\n\t                    }\n\n\t                    setDefaultValidation(newValue);\n\t                });\n\n\t                var setDefaultValidation = function setDefaultValidation(value) {\n\t                    if (value === associatedTransferType) {\n\t                        validateAddress(scope.counterpartyAddress || \"\");\n\t                    } else {\n\t                        modelCtrl.$setValidity(\"addressLineOne\", true);\n\t                        modelCtrl.$setValidity(\"addressCity\", true);\n\t                        modelCtrl.$setValidity(\"addressState\", true);\n\t                        modelCtrl.$setValidity(\"addressZip\", true);\n\t                        modelCtrl.$setValidity(\"addressValidZip\", true);\n\t                    }\n\t                };\n\n\t                initialize();\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    var $ = window.jQuery;\n\t    var base = __webpack_require__(8);\n\t    var angular = base.ng;\n\t    var lpUIUtils = base.inject('lpUIUtils', __webpack_require__(11).name);\n\n\t    // @ngInject\n\t    exports.counterPartyFilter = function ($templateCache, transferTypes, $document, lpUserDetails, lpCoreError, lpCoreUtils) {\n\n\t        $templateCache.put('$counterPartyFilter.html', '<div class=\"lp-counter-party-filter\">' + '<div class=\"input-group has-clear\">' + '<input class=\"name-field form-control\" type=\"text\" ng-model=\"counterpartyName\" ng-click=\"showContactList()\" ng-keydown=\"showContactList($event)\" aria-label=\"Counterparty Name\" />' + '<span class=\"counterparty-to text-muted\">To:</span>' + '<span class=\"input-clear\" ng-click=\"clearCounterParty()\" ng-show=\"counterpartyName.length\"><i class=\"glyphicon glyphicon-remove cursor-pointer\"></i></span>' + '<span class=\"input-group-btn\">' + '<button type=\"button\" role=\"button\" aria-label=\"Auto Suggest\" tabindex=\"0\" class=\"btn btn-default dropdown-toggle\" ng-click=\"toggleShowContacts()\">' + '<i class=\"lp-icon lp-icon-addressbook\"></i>' + '</button>' + '</span>' + '</div>' + '<div class=\"dropdown\">' + '<ul ng-show=\"showContacts && (counterpartyList | filter:counterpartyName).length > 0\" class=\"col-xs-12 dropdown-menu filter-list\" style=\"display: block;\">' + '<li class=\"contact\" ng-repeat=\"contact in counterpartyList | filter: counterpartyName | limitTo: 25 track by $index\" >' + '<div class=\"border\" ng-class=\"{\\'border-my-accounts\\': contact.ownAccounts, \\'border-other\\': !contact.ownAccounts}\"></div>' + '<div class=\"filter-contact clearfix\" ng-class=\"{\\'single-account-selection\\': contact.accounts.length === 1}\" ng-click=\"prepareSelection(contact)\" ng-keydown=\"handleContactAccountToggleKeyDown(contact, $event)\" dynamic-focus=\"contact\">' + '<div class=\"pull-left photo-container\">' + '<img class=\"contact-photo media-object\" ng-src=\"{{getProfileImageByName(contact.photoUrl,contact.name)}}\" />' + '</div>' + '<div class=\"contact-info pull-left contact-details\">' + '<span class=\"contact-name\">{{contact.name}}</span>' + '<p class=\"account-info\" ng-if=\"contact.accounts.length > 1\">{{contact.accounts.length}} account(s)</p>' + '<p class=\"account-info\" ng-if=\"contact.accounts.length === 1\">{{contact.accounts[0].account}}</p>' + '</div>' + '<div ng-if=\"contact.accounts.length > 1\" class=\"pull-left contact-account-list\">' + '<p tabindex=\"0\" class=\"toggle-accounts\" ng-show=\"!contact.open\" ng-click=\"toggleContactAccounts(contact)\" ng-keydown=\"handleContactAccountToggleKeyDown(contact, $event)\"  aria-label=\"View accounts for {{contact.name}}\">View all accounts <span class=\"caret\"></span></p>' + '<p tabindex=\"0\" class=\"toggle-accounts\" ng-show=\"contact.open\" ng-click=\"toggleContactAccounts(contact)\" ng-keydown=\"handleContactAccountToggleKeyDown(contact, $event)\" aria-label=\"Close accounts for {{contact.name}}\">Close all accounts <span class=\"caret\"></span></p>' + '<div class=\"contact-accounts\" ng-class=\"{\\'contact-accounts-open\\': contact.open}\">' + '<div tabindex=\"0\" ng-show=\"contact.open\" ng-repeat=\"account in contact.accounts track by $index\" class=\"contact-single-account\" ng-click=\"prepareSelection(contact, account)\" ng-keydown=\"handleSingleAccountKeyDown(contact, account, $event)\" dynamic-aria-label=\"dynamic-aria-label\" aria-contact=\"contact\" aria-account=\"account\">' + '<div class=\"col-xs-10 col-xs-offset-2\">' + '<p ng-if=\"account.name\">{{account.name}}</p>' + '<p>{{account.account}}</p>' + '</div>' + '</div>' + '</div>' + '</div>' + '</div>' + '</li>' + '</ul>' + '</div>' + '</div>');\n\n\t        return {\n\t            restrict: 'A',\n\t            scope: {\n\t                \"counterpartyName\": \"=ngModel\",\n\t                \"contacts\": \"=lpContacts\",\n\t                \"accounts\": \"=lpAccounts\",\n\t                \"profile\": \"=lpProfile\",\n\t                \"onSelect\": \"=\"\n\t            },\n\t            require: [\"ngModel\", \"^form\"],\n\t            template: $templateCache.get(\"$counterPartyFilter.html\"),\n\t            link: function link(scope, element, attrs, ctrls) {\n\n\t                var modelCtrl = ctrls[0];\n\t                var formCtrl = ctrls[1];\n\n\t                modelCtrl.$name = attrs.name;\n\t                formCtrl.$addControl(modelCtrl);\n\n\t                var input = angular.element(element.find(\"input\"));\n\t                var elementNode = element.get(0);\n\n\t                var keyCodes = {\n\t                    up: 38,\n\t                    down: 40,\n\t                    enter: 13\n\t                };\n\n\t                var contactAccountFields = {\n\t                    email: transferTypes.p2pEmail,\n\t                    account: transferTypes.bank\n\t                };\n\n\t                var initialize = function initialize() {\n\n\t                    scope.counterpartyList = [];\n\t                    scope.showContacts = false;\n\n\t                    scope.deregisterProfileWatch = scope.$watch(\"profile\", function (newProfileData) {\n\t                        console.log(newProfileData);\n\t                        if (!newProfileData) return;\n\t                        newProfileData.fullname = [newProfileData.firstName, newProfileData.lastName].join(' ');\n\n\t                        newProfileData.activities.lastLoggedIn = {\n\t                            key: 'Last Logged In',\n\t                            value: newProfileData.activities.lastLoggedIn\n\t                        };\n\n\t                        // capitalize first letter of the keys\n\t                        lpCoreUtils.map(newProfileData.details, function (v) {\n\t                            v.key = lpCoreUtils.startCase(v.key);\n\t                        });\n\n\t                        scope.profile = newProfileData;\n\n\t                        scope.deregisterContactsWatch = scope.$watch(\"contacts\", function (newContactsData) {\n\t                            if (newContactsData.length > 0) {\n\t                                preprocessContacts(scope.contacts);\n\t                                scope.deregisterContactsWatch();\n\t                            }\n\t                        });\n\n\t                        scope.deregisterAccountsWatch = scope.$watch(\"accounts\", function (newAccountsData) {\n\t                            if (newAccountsData.length > 0) {\n\t                                preprocessAccounts(scope.accounts);\n\t                                scope.deregisterAccountsWatch();\n\t                            }\n\t                        });\n\t                    });\n\n\t                    scope.accountsConfigured = false;\n\t                    scope.contactsConfigured = false;\n\t                };\n\n\t                /**\n\t                 * Validation hooks\n\t                 */\n\t                modelCtrl.$formatters.push(function (value) {\n\n\t                    if (value.length > 0) {\n\t                        modelCtrl.$setValidity(\"required\", true);\n\t                    } else {\n\t                        modelCtrl.$setValidity(\"required\", false);\n\t                    }\n\n\t                    return value;\n\t                });\n\n\t                modelCtrl.$parsers.push(function (value) {\n\n\t                    if (value.length > 0) {\n\t                        modelCtrl.$setValidity(\"required\", true);\n\t                    } else {\n\t                        modelCtrl.$setValidity(\"required\", false);\n\t                    }\n\n\t                    return value;\n\t                });\n\n\t                /**\n\t                 * Preprocess contacts list and add to counterpartyList\n\t                 * @param contacts\n\t                 */\n\t                var preprocessContacts = function preprocessContacts(contacts) {\n\n\t                    var contact;\n\n\t                    for (var i = 0; i < contacts.length; i++) {\n\t                        contact = contacts[i];\n\t                        contact.open = false;\n\t                        contact.accounts = [];\n\n\t                        for (var key in contact) {\n\t                            if (contact.hasOwnProperty(key)) {\n\t                                if (contactAccountFields[key] && contact[key]) {\n\t                                    contact.accounts.push({\n\t                                        \"type\": contactAccountFields[key],\n\t                                        \"account\": contact[key]\n\t                                    });\n\t                                }\n\t                            }\n\t                        }\n\n\t                        scope.counterpartyList.push(contact);\n\t                    }\n\t                };\n\n\t                /**\n\t                 * Preprocess accounts array and add extra properties\n\t                 * @param accounts\n\t                 */\n\t                var preprocessAccounts = function preprocessAccounts(accounts) {\n\n\t                    var myAccounts = {};\n\n\t                    myAccounts.name = scope.profile.fullname;\n\t                    myAccounts.open = false; //closed by default\n\t                    myAccounts.ownAccounts = true;\n\t                    myAccounts.accounts = [];\n\n\t                    for (var i = 0; i < accounts.length; i++) {\n\t                        myAccounts.accounts.push({\n\t                            type: transferTypes.bank,\n\t                            account: accounts[i].identifier,\n\t                            name: accounts[i].alias\n\t                        });\n\t                    }\n\n\t                    scope.counterpartyList.unshift(myAccounts);\n\t                };\n\n\t                var bindHideContacts = function bindHideContacts() {\n\n\t                    $document.bind(\"click\", function (e) {\n\n\t                        if (!elementNode.contains(e.target)) {\n\t                            scope.$apply(function () {\n\t                                scope.showContacts = false;\n\t                            });\n\t                            unbindHideContacts();\n\t                        }\n\t                    });\n\t                };\n\n\t                var unbindHideContacts = function unbindHideContacts() {\n\t                    $document.unbind(\"click\");\n\t                };\n\n\t                var findFirstContact = function findFirstContact() {\n\t                    return $(element.find(\".contact\")[0]);\n\t                };\n\n\t                /**\n\t                 * Focuses on the selected contacts account toggle\n\t                 * @param target\n\t                 */\n\t                var focusContactsAccountsButton = function focusContactsAccountsButton(target) {\n\n\t                    //focus on close button\n\t                    var toFocus;\n\t                    target = angular.element(event.target);\n\n\t                    if (target.next().hasClass(\"toggle-accounts\")) {\n\t                        toFocus = target.next();\n\t                    } else if (target.prev().hasClass(\"toggle-accounts\")) {\n\t                        toFocus = target.prev();\n\t                    }\n\n\t                    if (toFocus) {\n\t                        setTimeout(function () {\n\t                            toFocus.focus();\n\t                        }, 0);\n\t                    }\n\t                };\n\n\t                /**\n\t                 * Find the toggle buttons in a contact container\n\t                 * @param contactContainer\n\t                 * @returns {*}\n\t                 */\n\t                var findAccountToggles = function findAccountToggles(contactContainer) {\n\n\t                    return contactContainer.find(\".toggle-accounts\");\n\t                };\n\n\t                /**\n\t                 * focus on the active toggle when selection an an contact account toggle\n\t                 * @param buttons\n\t                 */\n\t                var focusOnActiveToggle = function focusOnActiveToggle(buttons) {\n\n\t                    var toFocus;\n\n\t                    if ($(buttons[0]).css(\"display\") === \"block\") {\n\t                        toFocus = buttons[0];\n\t                    } else {\n\t                        toFocus = buttons[1];\n\t                    }\n\n\t                    if (toFocus) {\n\t                        setTimeout(function () {\n\t                            toFocus.focus();\n\t                        }, 0);\n\t                    }\n\t                };\n\n\t                /**\n\t                 * returns the surrounding .contact element of an account or account toggle\n\t                 * @param target\n\t                 * @returns {*}\n\t                 */\n\t                var getContactParentContainer = function getContactParentContainer(target) {\n\t                    return target.parents(\".contact\");\n\t                };\n\n\t                /**\n\t                 * Show/Hide functions\n\t                 */\n\t                scope.toggleShowContacts = function () {\n\n\t                    scope.showContacts = !scope.showContacts;\n\n\t                    if (scope.showContacts) {\n\t                        bindHideContacts();\n\t                    } else {\n\t                        unbindHideContacts();\n\t                    }\n\t                };\n\n\t                /**\n\t                 * Clear CounterParty filter field\n\t                 */\n\t                scope.clearCounterParty = function () {\n\t                    scope.counterpartyName = '';\n\n\t                    scope.showContacts = true;\n\t                    bindHideContacts();\n\t                    scope.onSelect();\n\n\t                    element.find(input)[0].focus();\n\t                };\n\n\t                scope.$on(\"reset\", function () {\n\t                    scope.showContacts = false;\n\t                });\n\n\t                scope.showContactList = function (event) {\n\n\t                    //unbind before rebinding again\n\t                    unbindHideContacts();\n\n\t                    //if no event passed, or space or down arrow\n\t                    if (!event || event.which === keyCodes.enter || event.which === keyCodes.down || event.which === keyCodes.up) {\n\n\t                        if (event) {\n\t                            event.preventDefault();\n\t                            event.stopPropagation();\n\t                        }\n\n\t                        bindHideContacts();\n\n\t                        if (!scope.showContacts) {\n\t                            //open list of contacts\n\t                            scope.showContacts = true;\n\t                        } else if (event && event.which === keyCodes.down) {\n\t                            //select first contact\n\t                            var contact = findFirstContact();\n\t                            var buttons = findAccountToggles(contact);\n\t                            if (buttons.length > 0) {\n\t                                focusOnActiveToggle(buttons);\n\t                            } else {\n\t                                contact.find(\".filter-contact\").focus();\n\t                            }\n\t                        } else if (event && (event.which === keyCodes.up || event.which === keyCodes.enter)) {\n\t                            //close contacts\n\t                            scope.showContacts = false;\n\t                            unbindHideContacts();\n\t                        }\n\t                    }\n\t                };\n\n\t                /**\n\t                 * Hide/close a contacts list of accounts\n\t                 * @param contact\n\t                 * @param event\n\t                 */\n\t                scope.toggleContactAccounts = function (contact) {\n\n\t                    //loop through accounts\n\t                    for (var i = 0; i < scope.counterpartyList.length; i++) {\n\t                        //toggle this contact's accounts open or closed\n\t                        if (scope.counterpartyList[i] === contact) {\n\t                            scope.counterpartyList[i].open = !scope.counterpartyList[i].open;\n\t                        } else {\n\t                            //hide all else\n\t                            scope.counterpartyList[i].open = false;\n\t                        }\n\t                    }\n\t                };\n\n\t                /**\n\t                 * Handle key press on account toggles\n\t                 * @param contact\n\t                 * @param event\n\t                 */\n\t                scope.handleContactAccountToggleKeyDown = function (contact, event) {\n\n\t                    event.preventDefault();\n\t                    event.stopPropagation();\n\n\t                    if (event.which === keyCodes.enter) {\n\t                        //selection\n\t                        if (contact.accounts.length === 1) {\n\t                            scope.prepareSelection(contact);\n\t                        } else {\n\t                            scope.toggleContactAccounts(contact);\n\t                            focusContactsAccountsButton(event.target);\n\t                        }\n\t                    } else if (event.which === keyCodes.down || event.which === keyCodes.up) {\n\t                        //navigation\n\t                        scope.keyToNextAccountToggle(event);\n\t                    }\n\t                };\n\n\t                /**\n\t                 * handle keypress on individual account selection\n\t                 * @param contact\n\t                 * @param account\n\t                 * @param event\n\t                 */\n\t                scope.handleSingleAccountKeyDown = function (contact, account, event) {\n\n\t                    event.preventDefault();\n\t                    event.stopPropagation();\n\n\t                    if (event.which === keyCodes.enter) {\n\t                        //selection\n\t                        scope.prepareSelection(contact, account);\n\t                    } else if (event.which === keyCodes.down || event.which === keyCodes.up) {\n\t                        //navigation\n\t                        scope.keyToNextAccount(event);\n\t                    }\n\t                };\n\n\t                /**\n\t                 * Focus on the next Account toggle based on keypress\n\t                 * @param event\n\t                 */\n\t                scope.keyToNextAccountToggle = function (event) {\n\n\t                    var target = $(event.target);\n\t                    var contactContainer = getContactParentContainer(target),\n\t                        buttons;\n\n\t                    if (event.which === keyCodes.down) {\n\t                        //are accounts open?\n\t                        if (target.next(\"div\").length > 0) {\n\t                            contactContainer.find(\".contact-single-account\")[0].focus();\n\t                        } else {\n\t                            //go to next account dropdown\n\t                            var nextContact = contactContainer.next(\".contact\");\n\t                            buttons = findAccountToggles(nextContact);\n\n\t                            if (buttons.length > 0) {\n\t                                focusOnActiveToggle(buttons);\n\t                            } else {\n\t                                //only one account!\n\t                                nextContact.find(\".filter-contact\").focus();\n\t                            }\n\t                        }\n\t                    } else if (event.which === keyCodes.up) {\n\n\t                        var prevContact = contactContainer.prev(\".contact\");\n\t                        buttons = findAccountToggles(prevContact);\n\n\t                        if (buttons.length > 0) {\n\t                            focusOnActiveToggle(buttons);\n\t                        } else if (prevContact.find(\".filter-contact\").length > 0) {\n\t                            //only one account!\n\t                            prevContact.find(\".filter-contact\").focus();\n\t                        } else {\n\t                            //no more accounts, focus on input\n\t                            input.focus();\n\t                        }\n\t                    }\n\t                };\n\n\t                /**\n\t                 * focus on next single account from keypress\n\t                 * @param event\n\t                 */\n\t                scope.keyToNextAccount = function (event) {\n\n\t                    var target = $(event.target),\n\t                        toFocus,\n\t                        contactContainer,\n\t                        buttons;\n\n\t                    if (event.which === keyCodes.down) {\n\t                        if (target.next(\".contact-single-account\").length === 1) {\n\t                            //next account\n\t                            toFocus = target.next(\".contact-single-account\");\n\t                        }\n\t                    } else if (event.which === keyCodes.up) {\n\t                        if (target.prev(\".contact-single-account\").length === 1) {\n\t                            //previous account\n\t                            toFocus = target.prev(\".contact-single-account\");\n\t                        } else {\n\t                            contactContainer = getContactParentContainer(target);\n\t                            buttons = findAccountToggles(contactContainer);\n\t                            if (buttons.length > 0) {\n\t                                //no more accounts, go to account toggle\n\t                                focusOnActiveToggle(buttons);\n\t                            }\n\t                        }\n\t                    }\n\t                    if (toFocus) {\n\t                        setTimeout(function () {\n\t                            toFocus.trigger(\"focus\");\n\t                        }, 0);\n\t                    }\n\t                };\n\n\t                /**\n\t                 * Prepare a selection for assignment to payment order\n\t                 * @param contact\n\t                 * @param account\n\t                 * @param event the event passed from the user interaction\n\t                 */\n\t                scope.prepareSelection = function (contact, account) {\n\n\t                    if (!account) {\n\t                        if (contact.accounts.length > 1) {\n\t                            return;\n\t                        } else {\n\t                            account = contact.accounts[0];\n\t                        }\n\t                    }\n\n\t                    scope.showContacts = false;\n\t                    unbindHideContacts();\n\t                    modelCtrl.$setViewValue(contact.name);\n\t                    scope.onSelect(account);\n\n\t                    setTimeout(function () {\n\t                        input.focus();\n\t                    }, 0);\n\t                };\n\n\t                /**\n\t                 * Decode URL of profile photo for contact\n\t                 * @param photoUrl\n\t                 * @returns {string}\n\t                 */\n\t                scope.getProfileImageByName = function (photoUrl, name) {\n\t                    if (photoUrl) {\n\t                        return lpUIUtils.decodePhotoUrl(photoUrl);\n\t                    } else if (name) {\n\t                        return lpUIUtils.getDefaultProfileImage(name, 100, 100);\n\t                    } else {\n\t                        lpCoreError.throwException('Expected a name but got ' + name);\n\t                        return '';\n\t                    }\n\t                };\n\n\t                initialize();\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    exports.dynamicAriaLabel = function () {\n\t        return {\n\t            restrict: \"A\",\n\t            scope: {\n\t                \"contact\": \"=ariaContact\",\n\t                \"account\": \"=ariaAccount\"\n\t            },\n\t            link: function link(scope, element) {\n\n\t                var ariaLabel = \"\";\n\n\t                ariaLabel += scope.contact.name + \" \";\n\n\t                if (scope.account.name) {\n\t                    ariaLabel += scope.account.name + \" \";\n\t                } else {\n\t                    var type = scope.account.type.toLowerCase();\n\t                    type = type.replace(\"_\", \" \");\n\t                    ariaLabel += type + \" \";\n\t                }\n\n\t                ariaLabel += scope.account.account;\n\n\t                element.attr(\"aria-label\", ariaLabel);\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    exports.dynamicFocus = function () {\n\t        return {\n\t            restrict: \"A\",\n\t            scope: {\n\t                \"contact\": \"=dynamicFocus\"\n\t            },\n\t            link: function link(scope, element) {\n\n\t                if (scope.contact.accounts.length === 1) {\n\t                    element.attr(\"tabindex\", \"0\");\n\t                    element.attr(\"aria-label\", scope.contact.name + \" \" + scope.contact.accounts[0].type.toLowerCase() + \" \" + scope.contact.accounts[0].account);\n\t                }\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t\t'use strict';\n\n\t\tvar base = __webpack_require__(8);\n\t\tvar angular = base.ng;\n\t\tvar lpCoreUtils = base.inject('lpCoreUtils', __webpack_require__(9).name);\n\n\t\t// @ngInject\n\t\texports.emailTransfer = function ($templateCache, transferTypes) {\n\n\t\t\t$templateCache.put(\"$emailTransferTemplate.html\", '<div class=\"lp-email-transfer\">' + '<div ng-class=\"{\\'email-input\\': true, \\'has-feedback\\': email.length > 0, \\'has-success\\': email.length > 0 && validEmail, \\'has-error\\': email.length > 0 && !validEmail}\">' + '<input type=\"input\" ng-model=\"email\" ng-keyup=\"handleAutoSuggest($event)\" placeholder=\"Email address\" class=\"form-control\" aria-label=\"Email Address\" />' + '<span ng-if=\"validEmail && email.length > 0\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' + '<span ng-if=\"!validEmail && email.length > 0\" ng-click=\"clear()\" style=\"cursor: pointer;\" class=\"glyphicon glyphicon-remove form-control-feedback\"></span>' + '</div>' + '<span ng-if=\"autoSuggestActive\">Did you mean <span ng-click=\"doAutoSuggest()\" class=\"auto-correct-suggestion\">{{autoSuggestion}}</span>?<br /></span>' + '<span class=\"text-muted\" style=\"font-size: 13px;\">' + 'Transfers up to $10.00 will be free of charge. For transfers above $10.00 a fee of $0.25 per transaction will be charged and debited from your account' + '</span>' + '</div>');\n\n\t\t\treturn {\n\t\t\t\trestrict: 'EA',\n\t\t\t\treplace: true,\n\t\t\t\trequire: [\"ngModel\", \"^form\"],\n\t\t\t\tscope: {\n\t\t\t\t\t\"email\": \"=ngModel\",\n\t\t\t\t\t\"transferType\": \"=lpTransferType\"\n\t\t\t\t},\n\t\t\t\ttemplate: $templateCache.get(\"$emailTransferTemplate.html\"),\n\t\t\t\tlink: function link(scope, element, attrs, ctrls) {\n\n\t\t\t\t\tvar $inputElement;\n\n\t\t\t\t\t//Initial set up\n\t\t\t\t\t/**\n\t     * intialisation function\n\t     * @constructor\n\t     */\n\t\t\t\t\tvar initialize = function initialize() {\n\n\t\t\t\t\t\tscope.validEmail = false;\n\n\t\t\t\t\t\tscope.autoSuggestActive = false;\n\t\t\t\t\t\tscope.autoSuggestion = \"\";\n\n\t\t\t\t\t\t$inputElement = angular.element(element.find(\"input\")[0]);\n\n\t\t\t\t\t\t//initialize suggestions and map only once\n\t\t\t\t\t\tvar suggestions = {\n\t\t\t\t\t\t\tgmail: \"gmail\",\n\t\t\t\t\t\t\tyahoo: \"yahoo\",\n\t\t\t\t\t\t\tbackbase: \"backbase\"\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tscope.suggestionsMap = {\n\t\t\t\t\t\t\t\"gmaik\": suggestions.gmail,\n\t\t\t\t\t\t\t\"gmain\": suggestions.gmail,\n\t\t\t\t\t\t\t\"gmal\": suggestions.gmail,\n\t\t\t\t\t\t\t\"gmakl\": suggestions.gmail,\n\t\t\t\t\t\t\t\"mgail\": suggestions.gmail,\n\t\t\t\t\t\t\t\"yaho\": suggestions.yahoo,\n\t\t\t\t\t\t\t\"yahooo\": suggestions.yahoo,\n\t\t\t\t\t\t\t\"yagoo\": suggestions.yahoo,\n\t\t\t\t\t\t\t\"bakbase\": suggestions.backbase,\n\t\t\t\t\t\t\t\"backbas\": suggestions.backbase,\n\t\t\t\t\t\t\t\"baclbase\": suggestions.backbase\n\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t\t//controllers\n\t\t\t\t\tvar modelCtrl = ctrls[0],\n\t\t\t\t\t    formCtrl = ctrls[1],\n\t\t\t\t\t    associatedTransferType = transferTypes.p2pEmail;\n\n\t\t\t\t\tmodelCtrl.$name = attrs.name;\n\t\t\t\t\tformCtrl.$addControl(modelCtrl);\n\n\t\t\t\t\tmodelCtrl.$formatters.push(function (value) {\n\n\t\t\t\t\t\tif (value !== undefined || value !== null) {\n\t\t\t\t\t\t\t//validate email\n\t\t\t\t\t\t\tscope.validEmail = validateEmail(value ? value.toLowerCase() : \"\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (value && value.indexOf(\"@\") === -1) {\n\t\t\t\t\t\t\t//no @ symbol, deactive suggestions\n\t\t\t\t\t\t\tscope.autoSuggestActive = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t});\n\n\t\t\t\t\t//scope functions\n\t\t\t\t\tscope.clear = function () {\n\t\t\t\t\t\tscope.email = \"\";\n\t\t\t\t\t};\n\n\t\t\t\t\tscope.handleAutoSuggest = function (event) {\n\t\t\t\t\t\t//if the key was a period or a backspace\n\t\t\t\t\t\tvar temp, domain;\n\t\t\t\t\t\tif (event.which === 190) {\n\t\t\t\t\t\t\tif (scope.email.indexOf(\"@\") > -1) {\n\t\t\t\t\t\t\t\ttemp = scope.email.split(\"@\");\n\n\t\t\t\t\t\t\t\t//second half of email\n\t\t\t\t\t\t\t\tif (temp[1] && temp[1] !== \"\") {\n\n\t\t\t\t\t\t\t\t\tdomain = getDomainFromEmail(temp[1]);\n\n\t\t\t\t\t\t\t\t\tif (scope.suggestionsMap[domain] !== undefined) {\n\t\t\t\t\t\t\t\t\t\t//if it is a valid mapped suggestion\n\t\t\t\t\t\t\t\t\t\tscope.autoSuggestion = scope.suggestionsMap[domain];\n\t\t\t\t\t\t\t\t\t\tscope.autoSuggestActive = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (event.originalEvent.toString() === \"[object KeyboardEvent]\" && event.which === 8) {\n\t\t\t\t\t\t\t//will keep autosuggest active until no valid suggestion available\n\t\t\t\t\t\t\tif (scope.email.indexOf(\"@\") > -1) {\n\t\t\t\t\t\t\t\ttemp = scope.email.split(\"@\");\n\n\t\t\t\t\t\t\t\tif (temp[1] && temp[1] !== \"\") {\n\n\t\t\t\t\t\t\t\t\tdomain = getDomainFromEmail(temp[1]);\n\n\t\t\t\t\t\t\t\t\tif (scope.suggestionsMap[domain] === undefined) {\n\n\t\t\t\t\t\t\t\t\t\tscope.autoSuggestion = \"\";\n\t\t\t\t\t\t\t\t\t\tscope.autoSuggestActive = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t};\n\n\t\t\t\t\tscope.doAutoSuggest = function () {\n\n\t\t\t\t\t\tvar temp = scope.email.split(\"@\");\n\n\t\t\t\t\t\tif (temp[1]) {\n\t\t\t\t\t\t\tvar domain = getDomainFromEmail(temp[1]);\n\n\t\t\t\t\t\t\t//replace corrected word\n\t\t\t\t\t\t\ttemp[1] = temp[1].replace(domain, scope.autoSuggestion);\n\n\t\t\t\t\t\t\t//rejoin full email together\n\t\t\t\t\t\t\tscope.email = temp.join(\"@\");\n\t\t\t\t\t\t\tscope.autoSuggestActive = false; //deactivate auto suggest\n\t\t\t\t\t\t\tscope.autoSuggestion = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t//other functions\n\t\t\t\t\tvar validateEmail = function validateEmail(email) {\n\t\t\t\t\t\t//validate required\n\t\t\t\t\t\tif (email.length === 0 && scope.transferType === associatedTransferType) {\n\t\t\t\t\t\t\tmodelCtrl.$setValidity(\"emailRequired\", false);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} else if (scope.transferType === associatedTransferType) {\n\t\t\t\t\t\t\tmodelCtrl.$setValidity(\"emailRequired\", true);\n\n\t\t\t\t\t\t\t//validate email format\n\t\t\t\t\t\t\tvar result = lpCoreUtils.isValidEmail(email);\n\t\t\t\t\t\t\tmodelCtrl.$setValidity(\"validEmailRequired\", result);\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t//get the domain from the split email\n\t\t\t\t\tvar getDomainFromEmail = function getDomainFromEmail(emailDomainAndTLD) {\n\n\t\t\t\t\t\tvar indexOfPeriod = emailDomainAndTLD.indexOf(\".\");\n\t\t\t\t\t\tvar domain;\n\n\t\t\t\t\t\tif (indexOfPeriod > -1) {\n\t\t\t\t\t\t\tdomain = emailDomainAndTLD.substring(0, indexOfPeriod);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdomain = emailDomainAndTLD;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn domain;\n\t\t\t\t\t};\n\n\t\t\t\t\t//watch the transfer type to activate or de-activate validation\n\t\t\t\t\tscope.$watch(\"transferType\", function (newValue, oldValue) {\n\n\t\t\t\t\t\tif (newValue !== associatedTransferType) {\n\t\t\t\t\t\t\tmodelCtrl.$setValidity(\"emailRequired\", true);\n\t\t\t\t\t\t\tmodelCtrl.$setValidity(\"validEmailRequired\", true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tscope.validEmail = validateEmail(scope.email);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tinitialize();\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    /**\n\t     * Angular filter to put visual indicator between every set of 4 characters\n\t     */\n\n\t    exports.addSeperator = function () {\n\n\t        var visualIndicator = \" \";\n\n\t        //add spaces function\n\t        var addVisualIndicator = function addVisualIndicator(input) {\n\t            if (input.length === 4) {\n\t                input += visualIndicator;\n\t            }\n\n\t            return input;\n\t        };\n\n\t        return function (input) {\n\t            if (input) {\n\n\t                //remove all spaces from input\n\t                input = input.split(visualIndicator).join(\"\");\n\t                input = input.toUpperCase();\n\n\t                //split every 4 characters and remainder\n\t                var tempArray = input.match(/.{1,4}/g);\n\t                var newInput = \"\";\n\n\t                for (var i = 0; i < tempArray.length; i++) {\n\t                    if (i !== tempArray.length - 1) {\n\t                        tempArray[i] = addVisualIndicator(tempArray[i]);\n\t                    }\n\n\t                    //append new value to newInput\n\t                    newInput += tempArray[i];\n\t                }\n\n\t                return newInput;\n\t            }\n\t        };\n\t    };\n\n\t    /**\n\t     * Angular filter to put visual indicator between every set of 4 characters\n\t     */\n\t    exports.addSeperator = function () {\n\n\t        var visualIndicator = \" \";\n\n\t        //add spaces function\n\t        var addVisualIndicator = function addVisualIndicator(input) {\n\t            if (input.length === 4) {\n\t                input += visualIndicator;\n\t            }\n\n\t            return input;\n\t        };\n\n\t        return function (input) {\n\t            if (input) {\n\n\t                //remove all spaces from input\n\t                input = input.split(visualIndicator).join(\"\");\n\t                input = input.toUpperCase();\n\n\t                //split every 4 characters and remainder\n\t                var tempArray = input.match(/.{1,4}/g);\n\t                var newInput = \"\";\n\n\t                for (var i = 0; i < tempArray.length; i++) {\n\t                    if (i !== tempArray.length - 1) {\n\t                        tempArray[i] = addVisualIndicator(tempArray[i]);\n\t                    }\n\n\t                    //append new value to newInput\n\t                    newInput += tempArray[i];\n\t                }\n\n\t                return newInput;\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    var base = __webpack_require__(8);\n\t    var angular = base.ng;\n\t    var lpCoreUtils = base.inject('lpCoreUtils', __webpack_require__(9).name);\n\n\t    // @ngInject\n\t    exports.IbanModel = function (httpService) {\n\n\t        /**\n\t         * IbanModel constructor\n\t         */\n\t        var IbanModel = function IbanModel(config) {\n\n\t            this.enableCountrySearch = config.enableCountrySearch;\n\n\t            this.countryListService = httpService.getInstance({\n\t                endpoint: config.countryListEndpoint\n\t            });\n\n\t            this.value = '';\n\t            this.valid = false;\n\t            this.countryList = [];\n\t            this.selectedCountry = {};\n\t        };\n\n\t        /**\n\t         * Loads the list of countries to use for the dropdown from a REST API\n\t         * Default URL: /services/rest/iban\n\t         */\n\t        IbanModel.prototype.loadCountryList = function () {\n\t            var self = this;\n\n\t            var xhr = self.countryListService.read();\n\t            xhr.then(function (response) {\n\t                self.countryList = response.data;\n\t            }, function () {\n\t                self.error = \"countryListServiceError\";\n\t            });\n\n\t            return xhr;\n\t        };\n\n\t        /**\n\t         * Function that returns the country code from the IBAN\n\t         * returns null if the country isn't in the countryList array\n\t         */\n\t        IbanModel.prototype.getCountryCode = function (value) {\n\t            var self = this,\n\t                countryCode = null,\n\t                iban = value || self.value;\n\n\t            if (iban.match(/^[A-Za-z]{2}/g)) {\n\t                var code = iban.substr(0, 2);\n\t                angular.forEach(self.countryList, function (value) {\n\t                    if (value.country_code === code.toUpperCase()) {\n\t                        countryCode = code;\n\t                        self.selectedCountry = value;\n\t                        return;\n\t                    }\n\t                });\n\t            }\n\n\t            return countryCode;\n\t        };\n\n\t        /**\n\t         * Update the IBAN string to have capitalized letters and remove any dashes, dots or spaces\n\t         * @param  {string} iban The IBAN string\n\t         */\n\t        IbanModel.prototype.normalizeIban = function (iban) {\n\t            if (iban) {\n\t                // change to uppercase\n\t                iban = iban.toUpperCase();\n\t                // strip out unneeded characters\n\t                iban = iban.replace(/[\\-\\. ]/g, '');\n\t            }\n\n\t            return iban || '';\n\t        };\n\n\t        /**\n\t         * Function that validates the IBAN value\n\t         * Order of checks executed:\n\t         *     1. checks for correct length\n\t         *     2. checks if it matches the regular expression\n\t         *     3. checks with the validateIbanChecksum function\n\t         */\n\t        IbanModel.prototype.validate = function () {\n\n\t            // Check if the IBAN has the correct length\n\t            if (this.value.length !== parseInt(this.selectedCountry.iban_length, 10)) {\n\t                this.valid = false;\n\t                return false;\n\t            }\n\n\t            // Check if the IBAN matches the regular expression\n\t            var regex = new RegExp(this.selectedCountry.iban_regex);\n\t            if (!regex.test(this.value)) {\n\t                this.valid = false;\n\t                return false;\n\t            }\n\n\t            if (!lpCoreUtils.isValidISO7064Checksum(this.value)) {\n\t                this.valid = false;\n\t                return false;\n\t            }\n\n\t            this.valid = true;\n\t            return true;\n\t        };\n\n\t        return {\n\t            getInstance: function getInstance(config) {\n\t                return new IbanModel(config);\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    var ctrlFn = function ctrlFn($scope) {\n\t        var initialize = function initialize() {\n\t            $scope.wholeAmount = \"\";\n\t            $scope.decimalAmount = \"\";\n\t            $scope.amountInDomesticCurrency = \"0.00\";\n\t            $scope.fieldLength = 6;\n\t        };\n\n\t        initialize();\n\t    };\n\n\t    // @ngInject\n\t    exports.lpCurrencyAmountInput = function ($templateCache) {\n\t        $templateCache.put(\"$currencyAmountTemplate.html\", '<div class=\"lp-currency-amount-input\">' + '<div class=\"clearfix\">' + '<div class=\"select-area pull-left\">' + '<div class=\"currency-select\" ng-hide=\"lpDisableCurrencySelection\" dropdown-select=\"dropdown-select\" empty-placeholder-text=\"EUR\" ng-model=\"lpCurrencyList.selected\" options=\"val as val.currency_code group by val.group for val in lpCurrencyList.orderedCurrencies\" ng-hide=\"lpCurrencyList.error\" aria-required=\"true\" aria-label=\"currency\"></div>' +\n\t        // Below line should be uncommented once we have a default currency service running\n\t        //'<div class=\"default-currency\" ng-show=\"lpDisableCurrencySelection\">{{lpCurrencyList.defaultCurrency.currency_code}}</div>'+\n\t        '</div>' + '<div class=\"amount-area pull-left\" ng-class=\"{\\'input-group\\': lpAmountLabel}\">' + '<span class=\"input-group-addon lp-amount-label\" ng-if=\"lpAmountLabel\">{{lpAmountLabel}}</span>' + '<input name=\"wholeAmountInput\" type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"fieldLength\" min=\"0\" step=\"1\" class=\"form-control whole-amount-input pull-left\" ng-model=\"wholeAmount\" placeholder=\"{{lpAmountPlaceholder || \\'Amount\\'}}\" aria-required=\"true\" aria-label=\"amount\" />' + '<div  class=\"pull-left decimal\"><span class=\"decimal-point\">.</span></div>' + '<input type=\"text\" pattern=\"[0-9]\" lp-number-input=\"lp-number-input\" lp-max-length=\"2\" min=\"0\" step=\"1\" class=\"form-control pull-left decimal-amount-input\" ng-model=\"decimalAmount\" placeholder=\"00\"  aria-required=\"true\" aria-label=\"decimal amount\" />' + '</div>' + '</div>' + '<div class=\"info\">' + '<div ng-hide=\"lpDisableCurrencySelection || lpCurrencyList.error || lpCurrencyList.selected === lpCurrencyList.defaultCurrency\" class=\"info-message\"><span class=\"text-muted\">This transfer is {{amountInDomesticCurrency}} in {{lpCurrencyList.defaultCurrency.currency_code}}<i class=\"lp-icon lp-icon-xxl lp-icon-info-sign open-popup\" ng-click=\"toggleExchangeRateModal()\"></i></span></div>' + '</div>' + '</div>');\n\n\t        return {\n\t            restrict: \"EA\",\n\t            scope: {\n\t                \"amount\": \"=ngModel\",\n\t                \"lpCurrencyList\": \"=\",\n\t                \"lpPaymentOrder\": \"=\",\n\t                \"lpDisableCurrencySelection\": \"=\",\n\t                \"lpAmountLabel\": \"@\",\n\t                \"lpAmountPlaceholder\": \"@\",\n\t                \"toggleExchangeRateModal\": \"=modal\"\n\t            },\n\t            require: \"ngModel\",\n\t            replace: true,\n\t            controller: ctrlFn,\n\t            template: $templateCache.get(\"$currencyAmountTemplate.html\"),\n\t            link: function link(scope, element, attrs, ctrl) {\n\n\t                var $decimalInput = element.find(\".decimal-amount-input\");\n\n\t                //cater for changes in model from outside of directive\n\t                ctrl.$formatters.push(function (value) {\n\t                    if (!value) {\n\t                        return value;\n\t                    }\n\n\t                    var valueToCheck = formatAmount();\n\n\t                    if (value !== \"0.00\" && value !== '' && value !== valueToCheck) {\n\t                        var tempAmountArray = value.split(\".\");\n\t                        scope.wholeAmount = parseInt(tempAmountArray[0], 10);\n\n\t                        if (tempAmountArray[1] !== \"00\") {\n\t                            scope.decimalAmount = tempAmountArray[1];\n\t                        }\n\t                    }\n\t                    return value;\n\t                });\n\n\t                //Updates the current amount entered in domestic currency\n\t                var updateAmountInDomesticCurrency = function updateAmountInDomesticCurrency() {\n\t                    var amount = scope.amount;\n\n\t                    amount = amount / scope.lpCurrencyList.selected.exchange_rate;\n\t                    amount = fixFloatDecimal(amount);\n\n\t                    scope.amountInDomesticCurrency = amount;\n\t                };\n\n\t                //Parses values in text fields and sets the paymentOrder.instructedAmount\n\t                var updatePaymentOrderModelAmount = function updatePaymentOrderModelAmount() {\n\n\t                    var amount = formatAmount();\n\n\t                    var instructedAmount = parseInt(scope.wholeAmount, 10);\n\n\t                    if (scope.fieldLength && instructedAmount.toString().length > scope.fieldLength) {\n\t                        ctrl.$setValidity(\"lpCurrencyMaxLength\", false);\n\t                    } else {\n\t                        ctrl.$setValidity(\"lpCurrencyMaxLength\", true);\n\t                    }\n\n\t                    if (amount === \"0.00\") {\n\t                        ctrl.$setValidity(\"lpAmountRequired\", false);\n\t                    } else if (amount.length > 0) {\n\t                        ctrl.$setValidity(\"lpAmountRequired\", true);\n\t                    }\n\n\t                    scope.amount = amount;\n\n\t                    //if the currencyService loaded succesfully\n\t                    if (scope.lpCurrencyList && scope.lpCurrencyList.orderedCurrencies.length > 0) {\n\t                        updateAmountInDomesticCurrency();\n\t                    }\n\t                };\n\n\t                var formatAmount = function formatAmount() {\n\n\t                    var decimal = scope.decimalAmount;\n\t                    var instructedAmount = parseInt(scope.wholeAmount, 10);\n\t                    var leadingZero = /^0[0-9].*$/;\n\t                    instructedAmount = isNaN(instructedAmount) ? 0 : instructedAmount;\n\n\t                    //assign the correct decimal value to a decimal lower than 10\n\t                    if (decimal < 10 && !leadingZero.test(decimal)) {\n\t                        decimal = \"0\" + decimal;\n\t                    }\n\n\t                    decimal = parseFloat(\"0.\" + decimal);\n\n\t                    var amount = decimal === 0 ? instructedAmount : instructedAmount + decimal;\n\t                    amount = fixFloatDecimal(amount);\n\t                    return amount;\n\t                };\n\n\t                var fixFloatDecimal = function fixFloatDecimal(value) {\n\n\t                    return value.toFixed(2);\n\t                };\n\n\t                //Sets the instructedCurrency\n\t                var setCurrency = function setCurrency() {\n\t                    scope.lpPaymentOrder.instructedCurrency = scope.lpCurrencyList.selected.currency_code;\n\t                    handleFieldLengthUpdate();\n\t                };\n\n\t                //updates amount field length, instructedAmount and amountInDomestic based on exchange rate of selected currency\n\t                var handleFieldLengthUpdate = function handleFieldLengthUpdate() {\n\n\t                    var oldFieldLength = scope.fieldLength;\n\t                    scope.fieldLength = scope.lpCurrencyList.selected.exchange_rate > 2.0 ? 8 : 6;\n\n\t                    //if the field length has shrunk, make sure the instructedAmount and amountInDomestic updates\n\t                    if (oldFieldLength > scope.fieldLength && scope.wholeAmount.toString().length > 6) {\n\t                        scope.wholeAmount = parseInt(scope.wholeAmount.toString().substring(0, 6), 10);\n\t                        updatePaymentOrderModelAmount();\n\t                    } else if (scope.wholeAmount !== \"\" || scope.decimalAmount !== \"\") {\n\t                        //if not blank, just update amountInDomestic\n\t                        updateAmountInDomesticCurrency();\n\t                    }\n\t                };\n\n\t                //Apply updated instructedAmount to lpPaymentOrder\n\t                scope.$watchCollection('[wholeAmount, decimalAmount]', function (newValue) {\n\t                    if (newValue[0]) {\n\t                        //if the change contains a decimal, focus on decimal input\n\t                        if (newValue[0].toString().indexOf(\".\") > -1) {\n\t                            scope.wholeAmount = parseInt(scope.wholeAmount.toString().replace(\".\", \"\"), 10);\n\t                            $decimalInput.focus();\n\t                        }\n\t                    }\n\n\t                    updatePaymentOrderModelAmount();\n\t                });\n\n\t                //update currency\n\t                scope.$watch(\"lpCurrencyList.selected\", function () {\n\t                    //prevent unneccessary setting of Currency\n\t                    if (scope.lpCurrencyList && scope.lpCurrencyList.selected && scope.lpCurrencyList.orderedCurrencies.length > 1) {\n\t                        setCurrency();\n\t                    }\n\t                });\n\n\t                //listen for succesful form submission and reset values to default\n\t                scope.$on(\"reset\", function () {\n\t                    scope.wholeAmount = \"\";\n\t                    scope.decimalAmount = \"\";\n\t                    scope.amountInDomesticCurrency = \"0.00\";\n\t                    scope.fieldLength = 6;\n\t                });\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    exports.lpFormatPaymentReference = function ($filter) {\n\t        return {\n\t            restrict: 'A',\n\t            require: 'ngModel',\n\t            link: function link(scope, element, attrs, ctrl) {\n\n\t                var addSeperatorAndRF = function addSeperatorAndRF(input) {\n\t                    //automatically add RF to start of reference if not present\n\t                    if (input && input.length > 2) {\n\t                        var sub = input.substring(0, 2);\n\n\t                        if (sub !== \"RF\") {\n\t                            input = \"RF\" + input;\n\t                        }\n\t                    }\n\n\t                    //filter input with spaces\n\t                    var filtered = $filter('addSeperator')(input);\n\n\t                    if (filtered !== input) {\n\n\t                        ctrl.$setViewValue(filtered);\n\t                        ctrl.$render();\n\t                    }\n\n\t                    return filtered;\n\t                };\n\n\t                ctrl.$parsers.push(addSeperatorAndRF);\n\t            }\n\t        };\n\t    };\n\n\t    // @ngInject\n\t    var ctrlFn = function ctrlFn($scope) {\n\n\t        var initialize = function initialize() {\n\t            $scope.paymentReference = \"\";\n\t            $scope.paymentDescription = \"\";\n\n\t            $scope.showInfoMessage = false;\n\n\t            $scope.paymentRefDisabled = false;\n\t            $scope.paymentDescDisabled = false;\n\t        };\n\n\t        initialize();\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    /**\n\t     * Angular directive to hook filter into ng-model\n\t     */\n\n\t    // @ngInject\n\n\t    exports.lpFormatUsAccount = function ($filter) {\n\t        return {\n\t            restrict: 'A',\n\t            require: 'ngModel',\n\t            link: function link(scope, element, attrs, ctrl) {\n\n\t                var addSeperator = function addSeperator(input) {\n\n\t                    //filter input with spaces\n\t                    var filtered = $filter('addSeperator')(input);\n\n\t                    if (filtered !== input) {\n\n\t                        ctrl.$setViewValue(filtered);\n\t                        ctrl.$render();\n\t                    }\n\n\t                    return filtered;\n\t                };\n\n\t                ctrl.$parsers.push(addSeperator);\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    var $ = window.jQuery;\n\t    var base = __webpack_require__(8);\n\t    var angular = base.ng;\n\t    var lpUIUtils = base.inject('lpUIUtils', __webpack_require__(11).name);\n\n\t    /**\n\t     * TODO: Refactor this directive to not require a widget instance.\n\t     */\n\n\t    // @ngInject\n\t    exports.lpIbanInput = function ($templateCache, $timeout, IbanModel, widget) {\n\n\t        $templateCache.put('$ibanCountryOptionTemplate.html', '<span aria-label=\"{{option.country_name}}\">{{option.country_code}}<span class=\"country-name\"> - {{option.country_name}}</span></span>');\n\n\t        return {\n\t            restrict: 'EA',\n\t            replace: true,\n\t            require: ['ngModel', '^form'],\n\t            scope: {\n\t                ibanModel: '=lpCountryList',\n\t                transferType: '=lpTransferType'\n\t            },\n\t            template: '<div>' + '<div class=\"lp-iban\">' + '<div class=\"lp-iban-country-dropdown\">' + '<div dropdown-select=\"dropdown-select\" empty-placeholder-text=\"NL\" name=\"ibaneDropdownField\" ng-model=\"iban.selectedCountry\" options=\"country.country_code as country for country in ibanModel.countryList\" ' + 'filter=\"ibanModel.enableCountrySearch\" filter-placeholder-text=\"Search country\" ng-change=\"change()\" ' + 'option-template-url=\"$ibanCountryOptionTemplate.html\" aria-label=\"iban country code\">' + '</div>' + '</div>' + '<div class=\"lp-iban-input\" ng-class=\"{\\'has-success\\': ibanModel.valid && iban.value.length, \\'has-error\\': !ibanModel.valid && iban.value.length,  \\'has-feedback\\': iban.value.length}\">' + '<input name=\"ibanInputField\" ng-required=\"transferType === \\'BANK\\'\" type=\"input\" class=\"form-control\" lp-input-overflow=\"lp-input-overflow\" ng-model=\"iban.value\"  aria-required=\"true\" ' + 'ng-keydown=\"getSelection($event)\" ng-keypress=\"getSelection($event)\" ' + 'ng-mousedown=\"getSelection($event)\" ng-mouseup=\"getSelection($event)\" ' + 'ng-change=\"change()\" tabindex=\"0\" ' + 'placeholder=\"Enter IBAN or Account Number\" aria-label=\"Enter IBAN or Account Number\">' + '<span ng-if=\"ibanModel.valid && iban.value.length\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' + '<span ng-if=\"!ibanModel.valid && iban.value.length\" ng-click=\"clear()\" class=\"glyphicon glyphicon-remove form-control-feedback\"></span>' + '</div>' + '</div>' + '<span class=\"text-muted\">{{testiban}}</span>' + '</div>',\n\t            link: function link(scope, element, attrs, ctrls) {\n\n\t                var ngModelCtrl = ctrls[0],\n\t                    formCtrl = ctrls[1],\n\t                    input = element.find('input')[0],\n\t                    textSelection = [],\n\t                    isBackspace = false,\n\t                    lengthDiff = 0,\n\t                    $element = $(element[0]),\n\t                    associatedTransferType = \"BANK\";\n\n\t                // make the country code search to be focused when using keyboard\n\t                $element.find('div[name=\"ibaneDropdownField\"]').on('keypress', function (e) {\n\t                    // open dropdown after pressing Enter key\n\t                    if (e.which === 13) {\n\t                        $timeout(function () {\n\t                            $element.find('input[type=\"search\"]').focus();\n\t                        });\n\t                    }\n\t                });\n\n\t                scope.iban = {};\n\n\t                // add control using the name attribute to the form controller to track validity\n\t                ngModelCtrl.$name = attrs.name;\n\t                formCtrl.$addControl(ngModelCtrl);\n\n\t                scope.$watch('ibanModel.countryList', function (newValue) {\n\t                    scope.change(true);\n\t                    if (scope.ibanModel.countryList.length && !scope.iban.selectedCountry) {\n\t                        scope.iban.selectedCountry = scope.ibanModel.countryList[0].country_code;\n\t                    }\n\t                });\n\n\t                ngModelCtrl.$formatters.push(function (value) {\n\n\t                    scope.ibanModel.value = value;\n\t                    scope.iban.value = addDashes(value);\n\n\t                    var country = scope.ibanModel.getCountryCode();\n\t                    scope.ibanModel.validate();\n\t                    if (country) {\n\t                        scope.change(true);\n\t                    }\n\n\t                    var isValid = country ? scope.ibanModel.valid : false;\n\n\t                    ngModelCtrl.$setValidity('validIban', isValid);\n\n\t                    return value;\n\t                });\n\n\t                // set validity of the model value\n\t                ngModelCtrl.$parsers.push(function (value) {\n\t                    var isValid = scope.ibanModel.getCountryCode() ? scope.ibanModel.validate() : false;\n\n\t                    doValidation(value);\n\n\t                    return isValid ? value : undefined;\n\t                });\n\n\t                // Create a hidden span to calculate the cursor position in pixels\n\t                var $partialText = $(document.createElement('span'));\n\t                $partialText.addClass('lp-input-cursor-position-offset');\n\t                $partialText.css('font-size', element.css('font-size'));\n\t                $(input).after($partialText);\n\n\t                //Do validation on IBAN\n\t                var doValidation = function doValidation(newValue) {\n\t                    if (newValue !== associatedTransferType) {\n\t                        ngModelCtrl.$setValidity(\"validIban\", true);\n\t                        ngModelCtrl.$setValidity(\"required\", true);\n\t                        ngModelCtrl.$setValidity(\"parse\", true);\n\t                    } else {\n\t                        var isValid = scope.ibanModel.getCountryCode() ? scope.ibanModel.validate() : false;\n\t                        ngModelCtrl.$setValidity('validIban', isValid);\n\t                    }\n\t                };\n\n\t                // Split up the IBAN into groups of 4 characters separated by dashes\n\t                var addDashes = function addDashes(iban) {\n\t                    var ibanArray = [];\n\n\t                    ibanArray.push(iban.substr(0, 2));\n\t                    iban = iban.substr(2);\n\t                    while (iban.length > 0) {\n\t                        ibanArray.push(iban.substr(0, 4));\n\t                        iban = iban.substr(4);\n\t                    }\n\n\t                    return ibanArray.join('-');\n\t                };\n\n\t                /**\n\t                 * Set the correct cursor position after adding the separator\n\t                 */\n\t                scope.setCursorPosition = function () {\n\n\t                    var cursorPosition = lpUIUtils.getNewCaretPosition(input, textSelection, lengthDiff, isBackspace);\n\t                    isBackspace = false;\n\n\t                    // add the separators to the cursor position\n\t                    if (cursorPosition > 2) {\n\t                        cursorPosition++;\n\t                        if (cursorPosition > 6) {\n\t                            var temp = (cursorPosition - 3) / 4;\n\t                            if (parseInt(temp, 10) === temp) {\n\t                                cursorPosition--;\n\t                            }\n\t                            cursorPosition += parseInt(temp, 10);\n\t                        }\n\t                    }\n\n\t                    $timeout(function () {\n\t                        lpUIUtils.setCaretPositionOfInput(input, cursorPosition, scope.paymentReference, $partialText);\n\t                    }, 20, false);\n\t                };\n\n\t                /**\n\t                 * Function that stores the selection start and end values\n\t                 * @param  {event} event Either the Keyboard or the Mouse Event\n\t                 */\n\t                scope.getSelection = function (event) {\n\n\t                    var noDashSelection = function noDashSelection(select) {\n\t                        var selectionDiff = 0,\n\t                            temp = select;\n\n\t                        if (temp > 2) {\n\t                            temp -= 3;\n\t                            selectionDiff++;\n\t                        }\n\t                        selectionDiff += parseInt(temp / 5, 10);\n\n\t                        return select - selectionDiff;\n\t                    };\n\n\t                    // get the selection start and end values\n\t                    textSelection = lpUIUtils.getSelectionPositionOfInput(input, noDashSelection);\n\n\t                    if (event.originalEvent.toString() === '[object KeyboardEvent]') {\n\t                        // handle backspace\n\t                        if (event.originalEvent.which === 8 && input.value.length) {\n\t                            isBackspace = true;\n\t                        }\n\t                    }\n\t                };\n\n\t                scope.clear = function () {\n\t                    scope.iban.value = '';\n\t                    input.focus();\n\t                };\n\n\t                scope.change = function (dontFocus) {\n\n\t                    if (scope.ibanModel.value !== scope.ibanModel.normalizeIban(scope.iban.selectedCountry + scope.iban.value)) {\n\t                        var newValue = scope.ibanModel.normalizeIban(scope.iban.value);\n\t                        if (!scope.ibanModel.getCountryCode(newValue)) {\n\t                            newValue = scope.iban.selectedCountry + newValue;\n\t                        }\n\n\t                        // save the difference of length between the new and old values for later use\n\t                        lengthDiff = newValue.length - scope.ibanModel.value.length;\n\n\t                        // set the new value\n\t                        scope.ibanModel.value = newValue;\n\t                        ngModelCtrl.$setViewValue(newValue);\n\t                    }\n\n\t                    // if the first 2 characters of the input field are a valid IBAN country code\n\t                    // update both fields\n\t                    var countryCode = scope.ibanModel.getCountryCode();\n\t                    if (countryCode) {\n\t                        if (countryCode !== scope.iban.selectedCountry) {\n\t                            scope.iban.selectedCountry = countryCode;\n\t                            // add visual feedback for the country code change\n\t                            $(element.find('button')[0]).addClass('lp-country-dropdown-update');\n\t                            $timeout(function () {\n\t                                $(element.find('button')[0]).removeClass('lp-country-dropdown-update');\n\t                            }, 200, false);\n\t                        }\n\t                        // remove the country code from the input field value\n\t                        scope.iban.value = scope.ibanModel.value.substr(2);\n\t                    }\n\n\t                    // add the separator to the input field value\n\t                    scope.iban.value = addDashes(scope.ibanModel.normalizeIban(scope.iban.value));\n\t                    if (!dontFocus) {\n\t                        // move the cursor to the right position\n\t                        scope.setCursorPosition();\n\t                    }\n\n\t                    /*scope.testiban2 = scope.iban.selectedCountry + '' + scope.iban.value;\n\t                    scope.testiban = '';\n\t                    while (scope.testiban2.length > 4) {\n\t                        scope.testiban += scope.testiban2.substr(0, 4) + '-';\n\t                        scope.testiban2 = scope.testiban2.substr(4);\n\t                    }\n\t                    scope.testiban += scope.testiban2 ? scope.testiban2 : '';*/\n\t                };\n\n\t                //Turn validation on/off based on which tranfer type is selected\n\t                scope.$watch(\"transferType\", function (newValue, oldValue) {\n\t                    doValidation(newValue);\n\t                });\n\n\t                doValidation(scope.transferType);\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    exports.lpInputCurrency = function (currencyMaxLength) {\n\t        return {\n\t            restrict: 'A',\n\t            require: 'ngModel',\n\t            link: function link($scope, $element, $attrs, ctrl) {\n\t                var regex = /^\\d+((\\.|\\,)\\d+)?$/;\n\n\t                var setValidity = function setValidity(isValidFormat, isNonZero, isMaxLength) {\n\t                    ctrl.$setValidity('lpCurrencyFormat', isValidFormat);\n\n\t                    if (!isValidFormat) {\n\t                        // If format is not valid then more rules don't mean anything\n\t                        isNonZero = true;\n\t                        isMaxLength = true;\n\t                    }\n\n\t                    ctrl.$setValidity('lpCurrencyNonZero', isNonZero);\n\t                    ctrl.$setValidity('lpCurrencyMaxLength', isMaxLength);\n\t                };\n\n\t                ctrl.$parsers.unshift(function (value) {\n\t                    if (value) {\n\t                        value = value.replace(\",\", \".\");\n\t                        setValidity(regex.test(value), parseFloat(value) !== 0, value.length < currencyMaxLength);\n\t                    } else {\n\t                        // Don't make any currency validation for empty value\n\t                        setValidity(true, true, true);\n\t                    }\n\t                    return value;\n\t                });\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    var base = __webpack_require__(8);\n\t    var lpUIUtils = base.inject('lpUIUtils', __webpack_require__(11).name);\n\t    var lpCoreUtils = base.inject('lpCoreUtils', __webpack_require__(9).name);\n\n\t    // @ngInject\n\t    exports.lpPaymentRefDescription = function ($templateCache, $timeout, $filter) {\n\t        $templateCache.put(\"$paymentRefDescription.html\", '<div class=\"lp-payment-ref-description\">' + '<div ng-hide=\"hidePaymentReference\" class=\"lp-payment-reference\" ng-class=\"{\\'has-success\\': isValid && paymentReference.length > 0, \\'has-error\\': !isValid && paymentReference.length > 0,  \\'has-feedback\\': paymentReference.length}\">' + '<input  class=\"form-control\" aria-label=\"payment reference\" lp-payment-reference-field\" type=\"text\" placeholder=\"Payment reference (optional)\" maxlength=\"31\" ng-model=\"paymentReference\" ng-disabled=\"paymentRefDisabled\" ' + 'lp-input-overflow=\"lp-input-overflow\" ' + 'ng-keydown=\"getSelection($event)\" ng-keypress=\"getSelection($event)\" ' + 'ng-mousedown=\"getSelection($event)\" ng-mouseup=\"getSelection($event)\" ' + 'lp-format-payment-reference=\"lp-format-payment-reference\" />' + '<span ng-if=\"isValid && paymentReference.length\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' + '<span ng-click=\"clearRef()\" ng-if=\"!isValid && paymentReference.length\" class=\"glyphicon glyphicon-remove form-control-feedback\"></span>' + '<div class=\"lp-input-dividers clearfix\">' + '<div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div>' + '</div>' + '</div>' + '<div class=\"lp-payment-description\">' + '<textarea aria-label=\"payment description\" class=\"form-control lp-payment-description-area\" placeholder=\"Description (optional) Maximum number of characters is 140\" maxlength=\"140\" ng-model=\"paymentDescription\" ng-disabled=\"paymentDescDisabled\"></textarea>' + '</div>' + '<div ng-if=\"!hidePaymentReference\" class=\"hover-catcher\" ng-class=\"{refDisabled: paymentRefDisabled, descDisabled: paymentDescDisabled}\" tooltip-placement=\"top\" tooltip=\"You can only provide a Payment Reference or a Payment Description, not both.\"></div>' + '</div>');\n\n\t        return {\n\t            restrict: \"AE\",\n\t            replace: true,\n\t            require: [\"ngModel\", \"^form\"],\n\t            scope: {\n\t                \"paymentOrder\": \"=ngModel\",\n\t                \"hidePaymentReference\": \"=\"\n\t            },\n\t            template: $templateCache.get(\"$paymentRefDescription.html\"),\n\t            link: function link(scope, element, attrs, ctrls) {\n\n\t                var ngModelCtrl = ctrls[0],\n\t                    formCtrl = ctrls[1];\n\t                var $paymentReference = element.find(\"input\");\n\t                var $hoverCatcher = element.find(\".hover-catcher\");\n\t                var $paymentDescription = element.find(\"textarea\");\n\t                var input = $paymentReference[0],\n\t                    textSelection = [],\n\t                    isBackspace = false,\n\t                    lengthDiff = 0;\n\n\t                // add control using the name attribute to the form controller to track validity\n\t                ngModelCtrl.$name = attrs.name;\n\t                // formCtrl.$addControl(ngModelCtrl);\n\n\t                var $partialText = $(document.createElement('span'));\n\t                $partialText.addClass('lp-input-cursor-position-offset');\n\t                $partialText.css('font-size', element.css('font-size'));\n\t                $(input).after($partialText);\n\n\t                //populate with preloaded data\n\t                if (scope.paymentOrder.paymentReference !== \"\") {\n\t                    scope.paymentReference = $filter(\"addSeperator\")(scope.paymentOrder.paymentReference);\n\t                    scope.paymentDescDisabled = true;\n\t                } else if (scope.paymentOrder.paymentDescription !== \"\") {\n\t                    scope.paymentDescription = scope.paymentOrder.paymentDescription;\n\t                    scope.paymentRefDisabled = true;\n\t                }\n\n\t                //treat deactivation if payment ref is hidden\n\t                if (scope.hidePaymentReference) {\n\t                    scope.paymentDescDisabled = false;\n\t                }\n\n\t                //normalizes payment ref input\n\t                var normalize = function normalize(input) {\n\t                    return input.split(\" \").join(\"\");\n\t                };\n\n\t                //validates the payment ref based on length and ISO 7064\n\t                var validatePaymentRef = function validatePaymentRef(input) {\n\n\t                    var valid = true;\n\n\t                    //validates length\n\t                    if (input.length > 25) {\n\t                        valid = false;\n\t                    }\n\n\t                    if (!input.match(/^RF\\d{2}/)) {\n\t                        valid = false;\n\t                    }\n\n\t                    //validates input based on checksum\n\t                    if (!lpCoreUtils.isValidISO7064Checksum(input)) {\n\t                        valid = false;\n\t                    }\n\n\t                    return valid;\n\t                };\n\n\t                scope.toggleInfoMessage = function () {\n\t                    scope.showInfoMessage = !scope.showInfoMessage;\n\t                };\n\n\t                /**\n\t                 * Set the correct cursor position after adding the separator\n\t                 */\n\t                scope.setCursorPosition = function () {\n\n\t                    var cursorPosition = lpUIUtils.getNewCaretPosition(input, textSelection, lengthDiff, isBackspace);\n\n\t                    isBackspace = false;\n\n\t                    // add the separators to the cursor position\n\t                    if (cursorPosition > 4) {\n\t                        var temp = cursorPosition / 4;\n\t                        if (parseInt(temp, 10) === temp) {\n\t                            cursorPosition--;\n\t                        }\n\t                        cursorPosition += parseInt(temp, 10);\n\t                    }\n\n\t                    $timeout(function () {\n\t                        lpUIUtils.setCaretPositionOfInput(input, cursorPosition, scope.paymentReference, $partialText);\n\t                    }, 20, false);\n\t                };\n\n\t                /**\n\t                 * Function that stores the selection start and end values\n\t                 * @param  {event} event Either the Keyboard or the Mouse Event\n\t                 */\n\t                scope.getSelection = function (event) {\n\n\t                    var noSeparatorSelection = function noSeparatorSelection(select) {\n\t                        var selectionDiff = 0;\n\n\t                        selectionDiff += parseInt(select / 5, 10);\n\n\t                        return select - selectionDiff;\n\t                    };\n\n\t                    textSelection = lpUIUtils.getSelectionPositionOfInput(input, noSeparatorSelection);\n\n\t                    if (event.originalEvent.toString() === '[object KeyboardEvent]') {\n\t                        // handle backspace\n\t                        if (event.originalEvent.which === 8 && input.value.length) {\n\t                            isBackspace = true;\n\t                        }\n\t                    }\n\t                };\n\n\t                scope.clearRef = function () {\n\t                    scope.paymentReference = \"\";\n\t                    input.focus();\n\t                };\n\n\t                scope.$watch('paymentReference', function (newValue, oldValue) {\n\n\t                    if (oldValue === newValue) {\n\t                        return;\n\t                    }\n\n\t                    if (!oldValue) {\n\t                        oldValue = '';\n\t                    }\n\n\t                    //if this field is empty, reactivate other field\n\t                    if (!newValue) {\n\t                        ngModelCtrl.$modelValue.paymentReference = \"\";\n\t                        scope.paymentDescDisabled = false;\n\t                        formCtrl.$removeControl(ngModelCtrl);\n\t                    } else if (newValue.length > 0) {\n\n\t                        if (!formCtrl[ngModelCtrl.$name]) {\n\t                            formCtrl.$addControl(ngModelCtrl);\n\t                        }\n\n\t                        //validation performed here\n\t                        var normalizedPaymentRef = normalize(newValue);\n\t                        scope.isValid = validatePaymentRef(normalizedPaymentRef);\n\t                        ngModelCtrl.$setValidity('validRef', scope.isValid);\n\n\t                        if (oldValue) {\n\t                            lengthDiff = normalizedPaymentRef.length - normalize(oldValue).length;\n\t                        } else {\n\t                            lengthDiff = normalizedPaymentRef.length;\n\t                        }\n\n\t                        scope.paymentDescDisabled = true;\n\t                        ngModelCtrl.$modelValue.paymentReference = normalizedPaymentRef;\n\n\t                        // scope.setCursorPosition();\n\t                    }\n\t                    scope.setCursorPosition();\n\t                }, true);\n\n\t                scope.$watch('paymentDescription', function (newValue, oldValue) {\n\n\t                    if (oldValue === newValue) {\n\t                        return;\n\t                    }\n\n\t                    //if this field is empty, reactivate other field\n\t                    if (!newValue) {\n\t                        scope.paymentRefDisabled = false;\n\t                        ngModelCtrl.$modelValue.paymentDescription = \"\";\n\t                    } else if (newValue.length > 0) {\n\t                        scope.paymentRefDisabled = true;\n\t                        ngModelCtrl.$modelValue.paymentDescription = newValue;\n\t                    }\n\t                }, true);\n\n\t                scope.$on(\"reset\", function () {\n\n\t                    scope.paymentReference = \"\";\n\t                    scope.paymentDescription = \"\";\n\n\t                    scope.showInfoMessage = false;\n\n\t                    scope.paymentRefDisabled = false;\n\t                    scope.paymentDescDisabled = false;\n\t                });\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    exports.nonZero = function () {\n\t        return {\n\t            restrict: \"A\",\n\t            require: \"ngModel\",\n\t            link: function link(scope, element, attrs, ngModelCtrl) {\n\t                ngModelCtrl.$parsers.unshift(function (value) {\n\t                    ngModelCtrl.$setValidity(\"nonZero\", parseInt(value, 10) !== 0);\n\t                    return value;\n\t                });\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t\t'use strict';\n\n\t\tvar base = __webpack_require__(8);\n\t\tvar lpCoreUtils = base.inject('lpCoreUtils', __webpack_require__(9).name);\n\n\t\t// @ngInject\n\t\texports.p2pEnrollment = function ($templateCache, transferTypes) {\n\n\t\t\t$templateCache.put(\"$emailTemplate.html\", '<div class=\"lp-p2p-enrollment\">' + '<p class=\"warning\">We also need a few details from you to make the transfer</p>' + '<div lp-accounts-select=\"lp-accounts-select\" designated-class=\"lp-normal-account-select-size\" ng-model=\"p2pRegistration.p2pAccount\" lp-accounts=\"accounts\" name=\"p2pAccountSelect\" ng-change=\"onP2PAccountChange()\"></div>' + '<ul tabset=\"tabset\" class=\"nav-tabs\">' + '<li tab=\"tab\">' + '<span tab-heading=\"tab-heading\" class=\"tab-heading\">Email</span>' + '<div ng-class=\"{\\'email-input-form\\': true, \\'has-feedback\\': enrollment.email.length > 0, \\'has-success\\': enrollment.email.length > 0 && validEmail, \\'has-error\\': enrollment.email.length > 0 && !validEmail}\">' + '<input type=\"input\" class=\"form-control\" ng-model=\"enrollment.email\" placeholder=\"Confirm your email\" ng-change=\"onEmailChange()\" aria-label=\"Email Address\"/>' + '<span ng-if=\"validEmail && enrollment.email.length > 0\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' + '<span ng-if=\"!validEmail && enrollment.email.length > 0\" ng-click=\"clearEmail()\" style=\"cursor: pointer;\" class=\"glyphicon glyphicon-remove form-control-feedback\"></span>' + '</div>' + '</li>' + '</ul>' + '<div class=\"ts-and-cs\">' + '<div lp-custom-checkbox=\"\" ng-model=\"p2pRegistration.userAgrees\" ng-change=\"onAgreementChange()\" aria-label=\"{{\\'Do you agree with terms and conditions?\\' | translate}}\">' + '<span style=\"display:inline-block\" lp-i18n=\"By registering this mobile number or email address, I agree that I am the email or mobile account holder, and I consent to receive email and automated text message about transfers at this time. Fees from carrier may apply\"></span>' + '</div>' + '</div>' + '</div>');\n\n\t\t\treturn {\n\t\t\t\trestrict: 'EA',\n\t\t\t\treplace: true,\n\t\t\t\trequire: [\"ngModel\", \"^form\"],\n\t\t\t\tscope: {\n\t\t\t\t\t'accounts': '=lpAccounts',\n\t\t\t\t\t'enrollment': '=ngModel',\n\t\t\t\t\t'transferType': '=lpTransferType'\n\t\t\t\t},\n\t\t\t\ttemplate: $templateCache.get(\"$emailTemplate.html\"),\n\t\t\t\tlink: function link(scope, element, attrs, ctrls) {\n\n\t\t\t\t\t//Initial set up\n\t\t\t\t\tvar modelCtrl = ctrls[0],\n\t\t\t\t\t    formCtrl = ctrls[1];\n\t\t\t\t\tmodelCtrl.$name = attrs.name;\n\t\t\t\t\tformCtrl.$addControl(modelCtrl);\n\n\t\t\t\t\tvar associatedTransferTypes = [transferTypes.p2pEmail, transferTypes.p2pMobile, transferTypes.p2pAddress];\n\t\t\t\t\t/**\n\t     * intialisation function\n\t     * @constructor\n\t     */\n\t\t\t\t\tvar initialize = function initialize() {\n\n\t\t\t\t\t\tscope.p2pRegistration = {\n\t\t\t\t\t\t\tp2pAccount: {},\n\t\t\t\t\t\t\tuserAgrees: false\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsetDefaultValidation(scope.transferType);\n\t\t\t\t\t};\n\n\t\t\t\t\t//scope functions\n\t\t\t\t\tscope.clearEmail = function () {\n\t\t\t\t\t\tscope.enrollment.email = \"\";\n\t\t\t\t\t};\n\n\t\t\t\t\tscope.onP2PAccountChange = function () {\n\t\t\t\t\t\tscope.enrollment.receivingAccountNumber = scope.p2pRegistration.p2pAccount.identifier;\n\t\t\t\t\t\tmodelCtrl.$setValidity(\"p2pAccountRequired\", true);\n\t\t\t\t\t};\n\n\t\t\t\t\tscope.onEmailChange = function () {\n\t\t\t\t\t\tvalidateEmail();\n\t\t\t\t\t};\n\n\t\t\t\t\tscope.onAgreementChange = function () {\n\t\t\t\t\t\tmodelCtrl.$setValidity(\"termsAndConditions\", scope.p2pRegistration.userAgrees);\n\t\t\t\t\t};\n\n\t\t\t\t\t//other functions\n\t\t\t\t\t/*scope.$watch(\"accounts\", function(newValue, oldValue) {\n\t    \t//set the default selection and default enrollment account\n\t    \tif(newValue) {\n\t    \t\tif(scope.enrollment) {\n\t    \t\t\tscope.enrollment.receivingAccountNumber = newValue[0].identifier;\n\t    \t\t}\n\t    \t\tscope.p2pRegistration.p2pAccount = newValue[0];\n\t    \t}\n\t    });*/\n\n\t\t\t\t\tscope.$watch(\"transferType\", function (newValue, oldValue) {\n\n\t\t\t\t\t\tif (newValue === oldValue) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsetDefaultValidation(newValue);\n\t\t\t\t\t});\n\n\t\t\t\t\tvar validateEmail = function validateEmail() {\n\n\t\t\t\t\t\tvar result;\n\t\t\t\t\t\tif (scope.enrollment) {\n\t\t\t\t\t\t\tresult = lpCoreUtils.isValidEmail(scope.enrollment.email);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = lpCoreUtils.isValidEmail(\"\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmodelCtrl.$setValidity(\"validEmailRequired\", result);\n\n\t\t\t\t\t\tscope.validEmail = result;\n\t\t\t\t\t};\n\n\t\t\t\t\tvar setDefaultValidation = function setDefaultValidation(value) {\n\t\t\t\t\t\t//do we need to validate? Check new transfer type against associated transfer types\n\t\t\t\t\t\tvar found = false;\n\t\t\t\t\t\tfor (var i = 0; i < associatedTransferTypes.length; i++) {\n\t\t\t\t\t\t\tif (value === associatedTransferTypes[i]) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (found) {\n\t\t\t\t\t\t\t//yes, we need to validate\n\t\t\t\t\t\t\tmodelCtrl.$setValidity(\"termsAndConditions\", scope.p2pRegistration.userAgrees);\n\t\t\t\t\t\t\tvalidateEmail();\n\t\t\t\t\t\t\tmodelCtrl.$setValidity(\"p2pAccountRequired\", false);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//no, we don't\n\t\t\t\t\t\t\tmodelCtrl.$setValidity(\"termsAndConditions\", true);\n\t\t\t\t\t\t\tmodelCtrl.$setValidity(\"validEmailRequired\", true);\n\t\t\t\t\t\t\tmodelCtrl.$setValidity(\"p2pAccountRequired\", true);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tinitialize();\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    var $ = window.jQuery;\n\t    var base = __webpack_require__(8);\n\t    var lpUIUtils = base.inject('lpUIUtils', __webpack_require__(11).name);\n\n\t    // @ngInject\n\t    exports.usAccountInput = function ($templateCache, $timeout, $filter, transferTypes) {\n\n\t        $templateCache.put('$usTransferCountryDropdownOption.html', '<span aria-label=\"{{option.country_name}}\">{{option.country_code}}<span class=\"country-name\"> - {{option.country_name}}</span></span>');\n\n\t        $templateCache.put(\"$usAccountInputTemplate.html\", '<div class=\"lp-us-account-input\">' + '<div ng-class=\"{\\'has-success\\': isRoutingNoValid && routingNumber.length > 0, \\'has-error\\': !isRoutingNoValid && routingNumber.length, \\'has-feedback\\': routingNumber.length}\">' + '<input type=\"input\" class=\"form-control routing-number\" ng-model=\"routingNumber\" lp-number-input=\"lp-number-input\" min=\"0\" maxlength=\"9\" placeholder=\"{{\\'Routing Number\\'|translate}}\" aria-required=\"true\" aria-label=\"{{\\'Routing Number\\'|translate}}\" />' + '<span ng-if=\"isRoutingNoValid && routingNumber.length\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' + '<span ng-click=\"resetRoutingNumber()\" ng-if=\"!isRoutingNoValid && routingNumber.length\" class=\"glyphicon glyphicon-remove form-control-feedback clickable-icon\"></span>' + '</div>' + '<div class=\"lp-acc-plus-country\">' + '<div class=\"country-select\" ng-if=\"showCountryDropdown\">' + '<div dropdown-select=\"dropdown-select\" class=\"country-select\" empty-placeholder-text=\"US\" ng-model=\"selectedCountry\" options=\"country.country_code as country for country in lpCountryList.countries\" option-template-url=\"$usTransferCountryDropdownOption.html\"></div>' + '</div>' + '<div ng-class=\"{\\'has-success\\': isAccNoConfirmed && accountNumber.length > 0, \\'has-warning\\': !isAccNoConfirmed && accountNumber.length, \\'has-feedback\\': accountNumber.length, \\'account-number\\': true}\">' + '<input type=\"input\" class=\"form-control\" ng-model=\"accountNumber\" lp-number-input=\"lp-number-input\" maxlength=\"19\" min=\"0\" placeholder=\"{{\\'Account Number\\'|translate}}\" aria-required=\"true\" aria-label=\"{{\\'Account Number\\'|translate}}\"' + 'ng-keydown=\"getSelection($event)\" ng-keypress=\"getSelection($event)\" ' + 'ng-mousedown=\"getSelection($event)\" ng-mouseup=\"getSelection($event)\"' + 'lp-input-overflow=\"lp-input-overflow\" lp-format-us-account=\"lp-format-us-account\"/>' + '<span ng-if=\"isAccNoConfirmed && accountNumber.length\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' + '<span ng-click=\"confirmAccountNumber()\" ng-keydown=\"confirmKeydown($event)\" tabindex=\"{{!isAccNoConfirmed && accountNumber.length ? 0 : -1}}\" ng-if=\"!isAccNoConfirmed && accountNumber.length\" class=\"glyphicon glyphicon-warning-sign form-control-feedback clickable-icon\" aria-label=\"Confirm Account Number\" role=\"button\"></span>' + '<div class=\"lp-input-dividers clearfix\" style=\"top: 28px;\">' + '<div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div>' + '</div>' + '</div>' + '</div>' + '<span class=\"lp-routing-info text-muted\">' + '<span lp-i18n=\"Where to find your account number & routing number\"></span>' + '<i class=\"lp-icon lp-icon-xxl lp-icon-info-sign open-popup\" ng-click=\"modal()\"></i>' + '</span>' + '</div>');\n\n\t        return {\n\t            restrict: 'EA',\n\t            replace: true,\n\t            require: [\"ngModel\", \"^form\"],\n\t            scope: {\n\t                \"account\": \"=ngModel\",\n\t                \"lpCountryList\": \"=\",\n\t                \"modal\": \"=\",\n\t                \"transferType\": \"=lpTransferType\"\n\t            },\n\t            template: $templateCache.get(\"$usAccountInputTemplate.html\"),\n\t            link: function link(scope, element, attrs, ctrls) {\n\n\t                //Initial set up\n\t                /**\n\t                 * intialisation function\n\t                 * @constructor\n\t                 */\n\t                var initialize = function initialize() {\n\n\t                    //validation flags\n\t                    scope.isAccNoConfirmed = false;\n\t                    scope.isRoutingNoValid = false;\n\n\t                    //if a country list has been provided, show dropdown\n\t                    scope.showCountryDropdown = scope.lpCountryList ? true : false;\n\n\t                    if (scope.showCountryDropdown && scope.lpCountryList.default_country) {\n\t                        scope.selectedCountry = scope.lpCountryList.default_country.country_code;\n\t                    }\n\n\t                    setDefaultValidation(scope.transferType || \"\");\n\t                };\n\n\t                //controllers\n\t                var modelCtrl = ctrls[0],\n\t                    formCtrl = ctrls[1];\n\n\t                modelCtrl.$name = attrs.name;\n\t                formCtrl.$addControl(modelCtrl);\n\n\t                modelCtrl.$setValidity(\"accountNumberRequired\", false);\n\t                modelCtrl.$setValidity(\"routingNumberRequired\", false);\n\n\t                var accountInput = element.find(\"input\")[1],\n\t                    textSelection = [],\n\t                    isBackspace = false,\n\t                    lengthDiff = 0,\n\t                    associatedTransferType = transferTypes.bank;\n\n\t                //extra element needed to track caret across input\n\t                var $partialText = $(document.createElement('span'));\n\t                $partialText.addClass('lp-input-cursor-position-offset');\n\t                $partialText.css('font-size', element.css('font-size'));\n\t                $(accountInput).after($partialText);\n\n\t                //cater for changes in model from outside directive\n\t                modelCtrl.$formatters.push(function (value) {\n\n\t                    //default values for acc no and rout no\n\t                    if (value) {\n\t                        //if the first two characters are letters\n\t                        if (isNaN(parseInt(value.substring(0, 2), 10))) {\n\t                            scope.accountNumber = \"\";\n\t                            scope.routingNumber = \"\";\n\t                        } else {\n\t                            var tempArray = value.split(\" \");\n\t                            scope.routingNumber = tempArray[0];\n\t                            scope.accountNumber = $filter('addSeperator')(tempArray[1]);\n\t                            validateRoutingNumber(scope.routingNumber);\n\t                            setAccountValidity(scope.accountNumber);\n\t                        }\n\t                    } else {\n\t                        scope.accountNumber = \"\";\n\t                        scope.routingNumber = \"\";\n\t                    }\n\n\t                    return value;\n\t                });\n\n\t                modelCtrl.$parsers.push(function (value) {\n\n\t                    var tempArray = value.split(\" \");\n\n\t                    validateRoutingNumber(tempArray[0]);\n\t                    setAccountValidity(tempArray[1]);\n\n\t                    return value;\n\t                });\n\n\t                //general scope functions\n\t                /**\n\t                 * Confirm the account number as correct\n\t                 */\n\t                scope.confirmAccountNumber = function () {\n\t                    scope.isAccNoConfirmed = true;\n\t                    modelCtrl.$setValidity(\"accountNumberConfirmed\", true);\n\t                };\n\n\t                /**\n\t                 * Calls the confirmAccountNumber function when ENTER is pressed in the confirm icon\n\t                 * and places keyboard focus the next field.\n\t                 */\n\t                scope.confirmKeydown = function (event) {\n\t                    if (event.which === 13) {\n\t                        event.stopPropagation();\n\t                        event.preventDefault();\n\n\t                        scope.confirmAccountNumber();\n\t                        element.find('.routing-number').focus();\n\t                    }\n\t                };\n\n\t                /**\n\t                 * reset the routing number\n\t                 */\n\t                scope.resetRoutingNumber = function () {\n\t                    scope.routingNumber = \"\";\n\t                };\n\n\t                //Caret position functions\n\t                /**\n\t                 * Function that stores the selection start and end values\n\t                 * @param  {event} event Either the Keyboard or the Mouse Event\n\t                 */\n\t                scope.getSelection = function (event) {\n\n\t                    var noSeparatorSelection = function noSeparatorSelection(select) {\n\t                        var selectionDiff = 0;\n\n\t                        selectionDiff += parseInt(select / 5, 10);\n\n\t                        return select - selectionDiff;\n\t                    };\n\n\t                    textSelection = lpUIUtils.getSelectionPositionOfInput(accountInput, noSeparatorSelection);\n\n\t                    if (event.originalEvent.toString() === '[object KeyboardEvent]') {\n\t                        // handle backspace\n\t                        if (event.originalEvent.which === 8 && accountInput.value.length) {\n\t                            isBackspace = true;\n\t                        }\n\t                    }\n\t                };\n\n\t                /**\n\t                 * Set the correct cursor position after adding the separator\n\t                 */\n\t                scope.setCursorPosition = function () {\n\n\t                    var cursorPosition = lpUIUtils.getNewCaretPosition(accountInput, textSelection, lengthDiff, isBackspace);\n\n\t                    isBackspace = false;\n\n\t                    // add the separators to the cursor position\n\t                    if (cursorPosition > 4) {\n\t                        var temp = cursorPosition / 4;\n\t                        if (parseInt(temp, 10) === temp) {\n\t                            cursorPosition--;\n\t                        }\n\t                        cursorPosition += parseInt(temp, 10);\n\t                    }\n\n\t                    $timeout(function () {\n\t                        lpUIUtils.setCaretPositionOfInput(accountInput, cursorPosition, scope.paymentReference, $partialText);\n\t                    }, 20, false);\n\t                };\n\n\t                //Watches\n\t                /**\n\t                 * handle change in account number\n\t                 */\n\t                scope.$watch(\"accountNumber\", function (newValue, oldValue) {\n\n\t                    if (newValue === oldValue) {\n\t                        return;\n\t                    }\n\n\t                    //require user to reconfirm account number when changed\n\t                    scope.isAccNoConfirmed = false;\n\n\t                    setModelValue();\n\n\t                    scope.setCursorPosition();\n\t                });\n\n\t                /**\n\t                 * handle change in routing number\n\t                 */\n\t                scope.$watch(\"routingNumber\", function (newValue, oldValue) {\n\n\t                    if (newValue === oldValue) {\n\t                        return;\n\t                    }\n\n\t                    setModelValue();\n\t                });\n\n\t                scope.$watch(\"transferType\", function (newValue, oldValue) {\n\n\t                    if (newValue === oldValue) {\n\t                        return;\n\t                    }\n\n\t                    setDefaultValidation(newValue);\n\t                });\n\n\t                /**\n\t                 * listen for the reset message form the parent scope\n\t                 */\n\t                scope.$on(\"reset\", function () {\n\n\t                    scope.routingNumber = \"\";\n\t                    scope.accountNumber = \"\";\n\t                });\n\n\t                //general functions\n\t                /**\n\t                 * Validates American routing number using below algorithm (where d is the routing number and is 0 based)\n\t                 * 3(d0 + d3 + d6) + 7(d1 + d4 + d7) + (d2 + d5 + d8) / 10 = 0\n\t                 * @param routingNumber the routing number to validate against\n\t                 */\n\t                var validateRoutingNumber = function validateRoutingNumber(routingNumber) {\n\n\t                    if (routingNumber.length < 9) {\n\t                        scope.isRoutingNoValid = false;\n\t                        setRoutingValidity(routingNumber);\n\t                        return;\n\t                    }\n\n\t                    var result;\n\n\t                    //9 0s passes validation, fix\n\t                    if (routingNumber === \"000000000\") {\n\t                        result = false;\n\t                    } else {\n\t                        var digitOne = parseInt(routingNumber[0], 10) + parseInt(routingNumber[3], 10) + parseInt(routingNumber[6], 10),\n\t                            digitTwo = parseInt(routingNumber[1], 10) + parseInt(routingNumber[4], 10) + parseInt(routingNumber[7], 10),\n\t                            digitThree = parseInt(routingNumber[2], 10) + parseInt(routingNumber[5], 10) + parseInt(routingNumber[8], 10);\n\n\t                        var checkNumber = 3 * digitOne + 7 * digitTwo + digitThree;\n\n\t                        //find the modulus of 10\n\t                        result = checkNumber % 10;\n\n\t                        result = result === 0 ? true : false;\n\t                    }\n\n\t                    scope.isRoutingNoValid = result;\n\n\t                    setRoutingValidity(routingNumber);\n\t                };\n\n\t                var setRoutingValidity = function setRoutingValidity(value) {\n\n\t                    var routingProvided = value.length > 0 ? true : false;\n\t                    var invalidRoutingNumber = routingProvided && !scope.isRoutingNoValid ? false : true;\n\n\t                    modelCtrl.$setValidity(\"routingNumberRequired\", routingProvided);\n\t                    modelCtrl.$setValidity(\"invalidRoutingNumber\", invalidRoutingNumber);\n\t                };\n\n\t                var setAccountValidity = function setAccountValidity(value) {\n\n\t                    //set validation needed based on new value\n\t                    var accountRequired = value && value.length > 0 ? true : false;\n\t                    var confirmRequired = value && value.length > 0 && !scope.isAccNoConfirmed ? false : true;\n\n\t                    modelCtrl.$setValidity(\"accountNumberRequired\", accountRequired);\n\t                    modelCtrl.$setValidity(\"accountNumberConfirmed\", confirmRequired);\n\t                };\n\n\t                //remove the spaces and any extra special characters\n\t                var normalize = function normalize(value) {\n\n\t                    if (value) {\n\t                        value = value.replace(/ /g, '');\n\t                    }\n\n\t                    return value || \"\";\n\t                };\n\n\t                //set the model value\n\t                var setModelValue = function setModelValue() {\n\n\t                    var modelValue = normalize(scope.routingNumber) + \" \" + normalize(scope.accountNumber);\n\t                    modelCtrl.$setViewValue(modelValue);\n\t                };\n\n\t                var setDefaultValidation = function setDefaultValidation(value) {\n\n\t                    if (value !== associatedTransferType) {\n\t                        modelCtrl.$setValidity(\"accountNumberRequired\", true);\n\t                        modelCtrl.$setValidity(\"accountNumberConfirmed\", true);\n\t                        modelCtrl.$setValidity(\"routingNumberRequired\", true);\n\t                        modelCtrl.$setValidity(\"invalidRoutingNumber\", true);\n\t                    } else {\n\t                        validateRoutingNumber(scope.routingNumber || \"\");\n\t                        setAccountValidity(scope.accountNumber || \"\");\n\t                    }\n\t                };\n\n\t                initialize();\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t\t\t\t\t\t\t\t'use strict';\n\n\t\t\t\t\t\t\t\texports.transferTypes = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbank: 'INTERNAL',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tp2pEmail: 'P2P_EMAIL',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tp2pAddress: 'P2P_ADDRESS',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tp2pMobile: 'P2P_MOBILE'\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\texports.pendingPaymentOrdersTimeout = 10 * 1000;\n\t\t\t\t\t\t\t\texports.customerId = '3';\n\t\t\t\t\t\t\t\texports.currencyMaxLength = 15;\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    exports.lpPayments = function () {\n\n\t        // @ngInject\n\t        this.$get = function ($q, $resource, lpCoreUtils) {\n\n\t            var config = {\n\t                paymentsEndpoint: '/mock/v1/payments'\n\t            };\n\n\t            function API() {\n\n\t                var Rest = $resource(config.paymentsEndpoint, {}, {\n\t                    getUnsubmitted: {\n\t                        method: 'GET',\n\t                        url: config.paymentsEndpoint + '/:ids/unsubmitted',\n\t                        isArray: true\n\t                    },\n\t                    create: {\n\t                        method: 'PUT'\n\t                    },\n\t                    del: {\n\t                        method: 'DELETE',\n\t                        url: config.paymentsEndpoint + '/:paymentId'\n\t                    },\n\t                    submit: {\n\t                        method: 'POST',\n\t                        url: config.paymentsEndpoint + '/:paymentId/submit'\n\t                    }\n\t                });\n\n\t                /**\n\t                 * Creates or updates payment order\n\t                 *\n\t                 * @param order\n\t                 * @returns {promise}\n\t                 */\n\t                Rest.prototype.createOrder = function (order) {\n\t                    var deferred = $q.defer();\n\n\t                    Rest.create({ paymentId: order.id }, order, function (response) {\n\t                        deferred.resolve(response);\n\t                    }, function (error) {\n\t                        deferred.reject(error);\n\t                    });\n\n\t                    return deferred.promise;\n\t                };\n\n\t                /**\n\t                 * Send payment orders to execution\n\t                 *\n\t                 * @param param\n\t                 * @param authorization\n\t                 * @returns {promise}\n\t                 */\n\t                Rest.prototype.send = function (param, authorization) {\n\t                    var deferred = $q.defer();\n\n\t                    Rest.submit(param, authorization || {}, function (response) {\n\t                        deferred.resolve(response);\n\t                    }, function (error) {\n\t                        deferred.reject(error);\n\t                    });\n\n\t                    return deferred.promise;\n\t                };\n\n\t                /**\n\t                 * Remove pending order.\n\t                 *\n\t                 * @param uuid\n\t                 * @returns {promise}\n\t                 */\n\t                Rest.prototype.remove = function (orderId) {\n\t                    var deferred = $q.defer();\n\n\t                    Rest.del({ paymentId: orderId }, {}, function (response) {\n\t                        deferred.resolve(response);\n\t                    }, function (error) {\n\t                        deferred.reject(error);\n\t                    });\n\n\t                    return deferred.promise;\n\t                };\n\n\t                Rest.prototype.createModel = function () {\n\t                    return new Rest({\n\t                        id: lpCoreUtils.generateUUID() // to be refactored\n\t                    });\n\t                };\n\n\t                Rest.prototype.load = function (accounts) {\n\n\t                    // This is to not use default paging from payments Rest\n\t                    var params = {\n\t                        f: 0, // paging: from\n\t                        l: 100, // paging: size\n\t                        ids: accounts.join()\n\t                    };\n\n\t                    return Rest.getUnsubmitted(params).$promise.then(function (resp) {\n\t                        this.pendingOrdersGroups = this.preprocessPendingOrdersGroups(resp);\n\t                        return this.pendingOrdersGroups;\n\t                    }.bind(this));\n\t                };\n\n\t                Rest.prototype.preprocessPendingOrdersGroups = function (data) {\n\t                    var paymentOrderGroups = [];\n\t                    var paymentOrder;\n\n\t                    var checkGroupExistance = function checkGroupExistance(accountId) {\n\t                        var result = false;\n\t                        for (var i = 0; i < paymentOrderGroups.length; i++) {\n\t                            if (paymentOrderGroups[i]['@id'] === accountId) {\n\t                                result = true;\n\t                            }\n\t                        }\n\t                        return result;\n\t                    };\n\n\t                    var createGroup = function createGroup(id) {\n\t                        paymentOrderGroups.push({\n\t                            '@id': id,\n\t                            'paymentOrders': []\n\t                        });\n\t                    };\n\n\t                    var addPaymentOrderToGroup = function addPaymentOrderToGroup(paymentOrderDetail) {\n\t                        if (!checkGroupExistance(paymentOrderDetail.accountId)) {\n\t                            createGroup(paymentOrderDetail.accountId);\n\t                        }\n\n\t                        for (var i = 0; i < paymentOrderGroups.length; i++) {\n\t                            if (paymentOrderGroups[i]['@id'] === paymentOrderDetail.accountId) {\n\t                                paymentOrderGroups[i].paymentOrders.push(paymentOrderDetail);\n\t                            }\n\t                        }\n\t                    };\n\n\t                    for (var y = 0; y < data.length; y++) {\n\t                        paymentOrder = data[y];\n\n\t                        if (paymentOrder.counterpartyIban && paymentOrder.counterpartyIban.length > 0) {\n\t                            paymentOrder.accountDetails = paymentOrder.counterpartyIban;\n\t                        } else if (paymentOrder.counterpartyAccount && paymentOrder.counterpartyAccount.length > 0) {\n\t                            paymentOrder.accountDetails = paymentOrder.counterpartyAccount;\n\t                        } else if (paymentOrder.counterpartyEmail && paymentOrder.counterpartyEmail.length > 0) {\n\t                            paymentOrder.accountDetails = paymentOrder.counterpartyEmail;\n\t                        }\n\n\t                        addPaymentOrderToGroup(paymentOrder);\n\t                    }\n\n\t                    return paymentOrderGroups;\n\t                };\n\n\t                /**\n\t                 * Making form object to edit order in \"New Transfer\" widget\n\t                 *\n\t                 * @param order\n\t                 */\n\t                Rest.prototype.makeFormObject = function (order) {\n\t                    var form = {\n\t                        update: true, // here we notify it is UPDATE\n\t                        uuid: order.id,\n\t                        accountId: order.accountId,\n\t                        isScheduledTransfer: order.scheduledTransfer.every ? true : false,\n\t                        scheduleDate: order.onDate ? new Date(order.onDate) : new Date(),\n\t                        scheduledTransfer: {\n\t                            frequency: order.scheduledTransfer.frequency,\n\t                            every: order.scheduledTransfer.every,\n\t                            intervals: order.scheduledTransfer.intervals ? [order.schedule.intervals] : [],\n\t                            timesToRepeat: order.scheduledTransfer.timesToRepeat || 1, // not in API\n\t                            customOrder: order.scheduledTransfer.customOrder || true, // not in API\n\t                            startDate: order.scheduledTransfer.startDate ? new Date(order.scheduledTransfer.startDate) : new Date()\n\t                        },\n\t                        selectedCounter: {\n\t                            name: order.counterpartyName,\n\t                            account: order.counterpartyIban || order.counterpartyEmail\n\t                        },\n\t                        instructedCurrency: order.instructedCurrency,\n\t                        counterpartyName: order.counterpartyName,\n\t                        counterpartyAccount: order.counterpartyAccount,\n\t                        counterpartyIban: order.counterpartyIban || '',\n\t                        counterpartyEmail: order.counterpartyEmail,\n\t                        instructedAmount: order.instructedAmount.toFixed(2),\n\t                        paymentReference: order.paymentReference || '', // not in API\n\t                        paymentDescription: order.paymentDescription || '', // not in API\n\t                        counterpartyAddress: order.counterpartyAddress || '', // not in API\n\t                        isOpenDate: order.isOpenDate || false, // not in API\n\t                        urgentTransfer: order.urgentTransfer || false, // not in API\n\t                        type: order.type\n\t                    };\n\n\t                    return form;\n\t                };\n\n\t                return new Rest();\n\t            }\n\t            return {\n\t                setConfig: function setConfig(options) {\n\t                    config = lpCoreUtils(options).chain().mapValues(lpCoreUtils.resolvePortalPlaceholders).defaults(config).value();\n\t                    return this;\n\t                },\n\n\t                getConfig: function getConfig(prop) {\n\t                    if (prop && lpCoreUtils.isString(prop)) {\n\t                        return config[prop];\n\t                    } else {\n\t                        return config;\n\t                    }\n\t                },\n\n\t                api: API\n\t            };\n\t        };\n\t    };\n\n\t    // keep alias\n\t    // #TODO deprecate PaymentOrderModel\n\t    exports.PaymentOrderModel = exports.lpPayments;\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    /**\n\t     * Services\n\t     * @param  {DI services}\n\t     * @return {object}\n\t     * @ngInject\n\t     */\n\n\t    function Services(PaymentOrders) {\n\n\t        // registered services\n\t        var services = {\n\t            'payment-orders': PaymentOrders\n\t        };\n\n\t        return {\n\t            api: function api(name) {\n\t                if (typeof services[name] === 'undefined') {\n\t                    throw new Error('Unknown service ' + name + ' !!!');\n\t                }\n\t                return services[name];\n\t            }\n\t        };\n\t    }\n\n\t    /**\n\t     * lpAccountTransfers provider\n\t     * @return {object} angular provider\n\t     * @ngInject\n\t     */\n\t    exports.lpAccountTransfers = function () {\n\t        this.$get = Services;\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    var utils = __webpack_require__(8).utils;\n\t    var api = {};\n\t    // default configuration\n\t    var defaults = {\n\t        url: '/mock/v2/payment-orders'\n\t    };\n\n\t    /*----------------------------------------------------------------*/\n\t    /* Public API\n\t    /*----------------------------------------------------------------*/\n\t    /**\n\t     * @ngInject\n\t     * @constructor\n\t     */\n\t    function PaymentOrders($http, lpCoreError) {\n\t        this.xhr = $http;\n\t        this.config = {};\n\t    }\n\n\t    api.createModel = function () {\n\t        return {};\n\t    };\n\t    /**\n\t     * Creates or updates payment order\n\t     *\n\t     * @param order\n\t     * @returns {promise}\n\t     */\n\t    api.createOrder = function (order) {\n\t        return this.xhr({\n\t            method: 'POST',\n\t            url: this.config.url,\n\t            data: order\n\t        });\n\t    };\n\n\t    /**\n\t     * Send payment orders to execution\n\t     *\n\t     * @param param\n\t     * @param authorization\n\t     * @returns {promise}\n\t     */\n\t    api.send = function (param, authorization) {\n\t        var url = this.config.url + '/' + param + '/submit';\n\n\t        return this.xhr({\n\t            method: 'POST',\n\t            url: url,\n\t            data: authorization || {}\n\t        });\n\t    };\n\n\t    /**\n\t     * Remove pending order.\n\t     *\n\t     * @param uuid\n\t     * @returns {promise}\n\t     */\n\t    api.remove = function (orderId) {\n\t        var url = this.config.url + '/' + orderId;\n\n\t        return this.xhr({\n\t            method: 'DELETE',\n\t            url: url\n\t        });\n\t    };\n\n\t    /**\n\t     * Notify server about selected OTP channel\n\t     *\n\t     * @param {String} url\n\t     * @returns {promise}\n\t     */\n\t    api.selectOtpChannel = function (url) {\n\t        if (!url) {\n\t            throw Error('No URL for channel selectOtpChannel specified!');\n\t        }\n\n\t        return this.xhr({\n\t            method: 'POST',\n\t            url: url\n\t        });\n\t    };\n\n\t    /**\n\t     * Do OTP verification\n\t     *\n\t     * @param {String} url\n\t     * @param {Object} params\n\t     * @returns {Promise}\n\t     */\n\t    api.verifyOtp = function (url, params) {\n\t        if (!url) {\n\t            throw Error('No URL for verifyOtp specified!');\n\t        }\n\n\t        if (!params || !params.otpCode) {\n\t            throw Error('No OTP code for verifyOtp specified!');\n\t        }\n\n\t        return this.xhr({\n\t            method: 'POST',\n\t            url: url,\n\t            data: params\n\t        }).then(function (response) {\n\t            response.valid = true;\n\t            return response;\n\t        }, function (err) {\n\t            return err;\n\t        });\n\t    };\n\n\t    // -----------------------\n\t    // Add to lpCoreApiService\n\t    api.setConfig = function (options) {\n\t        this.config = utils.chain(options).mapValues(utils.resolvePortalPlaceholders).defaults(defaults).value();\n\t        return this;\n\t    };\n\t    api.getConfig = function (prop, defVal) {\n\t        if (prop && utils.isString(prop)) {\n\t            return this.config[prop] || defVal;\n\t        } else {\n\t            return this.config;\n\t        }\n\t    };\n\t    // ----------------------\n\n\t    /**\n\t     * mixin public api methods\n\t     */\n\t    utils.assign(PaymentOrders.prototype, api);\n\n\t    /**\n\t     * Exports\n\t     */\n\t    exports.PaymentOrders = PaymentOrders;\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** scripts/main.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 20294490e218162ab824\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/css-loader/index.js!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/less-loader/index.js!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/postcss-loader/index.js!./base.less\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/css-loader/index.js!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/less-loader/index.js!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/postcss-loader/index.js!./base.less\", function() {\n\t\t\tvar newContent = require(\"!!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/css-loader/index.js!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/less-loader/index.js!./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/postcss-loader/index.js!./base.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./styles/base.less\n ** module id = 2\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../../../../.nvm/versions/node/v4.1.2/lib/node_modules/bb-lp-cli/node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".lp-labeled-input{border-radius:3px}.lp-otp-check .otp-content{padding:1em}.lp-otp-check .otp-nav{position:absolute;width:100%;left:0;bottom:0;padding:1em}.lp-otp-check .channel-selector{margin:3em 0}.lp-otp-check .channel-selector .cell{margin-bottom:1em}.lp-otp-check .channel-selector .custom-radio{margin-bottom:2em}.lp-otp-check .channel-selector .custom-radio .radio-label{display:inline-block;position:relative;padding-left:.7em;transform:translateY(-20%)}.lp-otp-check .channel-selector .custom-radio .radio-label .radio-label-main{color:#000}.lp-otp-check .channel-selector .custom-radio span{vertical-align:middle}.lp-otp-check.is-desktop .close-button{margin:5px;cursor:pointer}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /Users/ilya/.nvm/versions/node/v4.1.2/lib/~/bb-lp-cli/~/css-loader!/Users/ilya/.nvm/versions/node/v4.1.2/lib/~/bb-lp-cli/~/less-loader!/Users/ilya/.nvm/versions/node/v4.1.2/lib/~/bb-lp-cli/~/postcss-loader!./styles/base.less\n ** module id = 3\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /Users/ilya/.nvm/versions/node/v4.1.2/lib/~/bb-lp-cli/~/css-loader/lib/css-base.js\n ** module id = 4\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0;\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction createStyleElement() {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tvar head = getHeadElement();\r\n\tstyleElement.type = \"text/css\";\r\n\thead.appendChild(styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement() {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tvar head = getHeadElement();\r\n\tlinkElement.rel = \"stylesheet\";\r\n\thead.appendChild(linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement());\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement();\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement();\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /Users/ilya/.nvm/versions/node/v4.1.2/lib/~/bb-lp-cli/~/style-loader/addStyles.js\n ** module id = 5\n ** module chunks = 0\n **/","define( function (require, exports, module) {\n\t'use strict';\n\n\tmodule.name = 'module-payments';\n\n\tvar base = require('base');\n\n\tvar deps = [\n\t\trequire('core').name,\n\t\trequire('./components/scheduled-transfer/scripts/main').name,\n\t\trequire('./components/lp-amount-input/scripts/main').name,\n\t\trequire('./components/otp-check/scripts/main').name,\n\t\trequire('./deprecated/scripts/main').name,\n\t\trequire('./migration/main').name,\n\t\trequire('module-enrollment').name // NOTE: remove this dep in case of moving otp-check component away\n\t];\n\n\tmodule.exports = base.createModule(module.name, deps)\n\t\t.constant( require('./constants') )\n\t\t.provider( require('./payments') )\n\t\t.provider( require('./providers') )\n\t\t.service( require('./services/payment-orders') );\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/main.js\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 7\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"base\"\n ** module id = 8\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"core\"\n ** module id = 9\n ** module chunks = 0\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    module.name = 'scheduled-transfer';\n\n    var base = require('base');\n    var core = require('core');\n    var ui = require('ui');\n\n\n    var deps = [\n        core.name,\n        ui.name\n    ];\n\n    module.exports = base.createModule(module.name, deps)\n        .directive(require('./lp-scheduled-transfer'));\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/components/scheduled-transfer/scripts/main.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ui\"\n ** module id = 11\n ** module chunks = 0\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    var ScheduledDateCalculator = require('../../../factories/scheduled-date-calculator');\n\n    // @ngInject\n    exports.lpScheduledTransfer = function($templateCache) {\n\n        $templateCache.put('scheduled-transfer.html',\n            '<div class=\"lp-scheduled-transfer\">' +\n            '    <div class=\"lp-st-frequency lp-st-section clearfix\">' +\n            '        <div class=\"pull-left lp-st-caption\">Frequency</div>' +\n            '        <div class=\"pull-left lp-st-control\">' +\n            '            <div class=\"lp-st-frequency-dropdown\" aria-label=\"frequency\" dropdown-select=\"dropdown-select\" ng-change=\"frequencyChanged()\" ng-model=\"scheduledTransfer.frequency\" options=\"val.id as val.value group by val.group for val in frequencies\"></div>' +\n            '        </div>' +\n            '    </div>' +\n            '    <div class=\"lp-st-every lp-st-section clearfix\">' +\n            '        <div class=\"pull-left lp-st-caption\" ng-if=\"customOrder\">Every</div>' +\n            '        <div class=\"pull-left lp-st-control clearfix\" ng-if=\"scheduledTransfer.frequency === frequenciesEnum.WEEKLY\">' +\n            '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"1\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"lp-st-every-input pull-left\" name=\"repeatEvery\" required=\"required\" tabindex=\"0\" aria-required=\"true\" aria-label=\"Repeat weekly transfer every\" maxlength=\"2\" ng-model=\"scheduledTransfer.every\" ng-change=\"setEndDate()\" \\/><span>week(s) on:</span>' +\n            '        </div>' +\n            '        <div class=\"pull-left lp-st-control clearfix\" ng-if=\"scheduledTransfer.frequency === frequenciesEnum.MONTHLY\">' +\n            '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"1\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"lp-st-every-input pull-left\" name=\"repeatEvery\" required=\"required\" tabindex=\"0\" aria-required=\"true\" aria-label=\"Repeat monthly transfer every\" maxlength=\"2\" ng-model=\"scheduledTransfer.every\" ng-change=\"setEndDate()\" \\/><span>month(s) on:</span>' +\n            '        </div>' +\n            '        <div class=\"pull-left lp-st-control clearfix\" ng-if=\"scheduledTransfer.frequency === frequenciesEnum.YEARLY\">' +\n            '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"1\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"lp-st-every-input pull-left\" name=\"repeatEvery\" required=\"required\" tabindex=\"0\" aria-required=\"true\"  aria-label=\"Repeat yearly transfer every\" maxlength=\"2\" ng-model=\"scheduledTransfer.every\" ng-change=\"setEndDate()\" \\/><span>year(s):</span>' +\n            '        </div>' +\n            '    </div>' +\n            '    <div class=\"lp-st-interval lp-st-section clearfix\" ng-if=\"customOrder\">' +\n            '        <div class=\"lp-st-interval-menu weekly btn-group\" ng-if=\"scheduledTransfer.frequency === frequenciesEnum.WEEKLY\">' +\n            '            <button type=\"button\" interval-button=\"interval-button\" aria-label=\"{{day.label}}\" ng-class=\"{\\'active\\': day.active}\" class=\"btn btn-default\" tabindex=\"0\"  ng-click=\"toggleInterval($index)\" ng-repeat=\"day in days\" ng-model=\"day\">{{day.value}}</button>' +\n            '        </div>' +\n            '        <div class=\"lp-st-interval-menu monthly btn-group\" ng-if=\"scheduledTransfer.frequency === frequenciesEnum.MONTHLY\">' +\n            '            <button type=\"button\" interval-button=\"interval-button\" aria-label=\"{{date.label}}\" ng-class=\"{\\'active\\': date.active}\" class=\"btn btn-default\" tabindex=\"0\"  ng-click=\"toggleInterval($index)\" ng-repeat=\"date in dates\" ng-model=\"date\">{{date.value}}</button>' +\n            '        </div>' +\n            '        <div class=\"lp-st-interval-menu yearly btn-group\" ng-if=\"scheduledTransfer.frequency === frequenciesEnum.YEARLY\">' +\n            '            <button type=\"button\" interval-button=\"interval-button\" aria-label=\"{{month.label}}\" ng-class=\"{\\'active\\': month.active}\" class=\"btn btn-default\" tabindex=\"0\" ng-click=\"toggleInterval($index)\" ng-repeat=\"month in months\" ng-model=\"month\">{{month.value}}</button>' +\n            '        </div>' +\n            '    </div>' +\n            '    <div class=\"lp-st-start-date lp-st-section clearfix\">' +\n            '        <div class=\"pull-left lp-st-caption\">Start</div>' +\n            '        <div class=\"pull-left lp-st-control calendar\">' +\n            '            <input ng-click=\"openStartCalendar($event)\" aria-label=\"start date\" type=\"text\" ng-required=\"isScheduledTransfer === true\" name=\"startDate\" ng-model=\"scheduledTransfer.startDate\" datepicker-popup=\"d-MMM-yyyy\" readonly=\"readonly\" is-open=\"calendar.startCalendarOpen\" datepicker-options=\"startDateOptions\" min-date=\"todaysDate\" class=\"form-control\" lp-future-time=\"\" show-button-bar=\"false\" tabindex=\"0\" ng-change=\"setEndDate()\" ng-keypress=\"openStartCalendar($event)\" \\/>' +\n            '            <span ng-click=\"openStartCalendar($event)\" class=\"lp-icon lp-icon-calendar calendar-icon\"></span>' +\n            '        </div>' +\n            '    </div>' +\n            '    <div class=\"lp-st-end-on lp-st-section clearfix\">' +\n            '        <div class=\"pull-left lp-st-caption\">End</div>' +\n            '        <div class=\"pull-left lp-st-control\">' +\n            '            <div class=\"lp-st-end-on-dropdown\" aria-label=\"end on\" dropdown-select=\"dropdown-select\" ng-change=\"endOnChanged()\" ng-model=\"scheduledTransfer.endOn\" options=\"val.id as val.value for val in endOptions\"></div>' +\n            '        </div>' +\n            '    </div>' +\n            '    <div class=\"lp-st-end-after lp-st-section clearfix\" ng-if=\"scheduledTransfer.endOn === \\'after\\'\">' +\n            '        <div class=\"pull-left lp-st-caption\">Repeat</div>' +\n            '        <div class=\"pull-left lp-st-control\">' +\n            '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"2\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"form-control\" aria-label=\"times to repeat\" name=\"timesToRepeat\" aria-required=\"true\" required=\"required\" tabindex=\"0\" ng-model=\"scheduledTransfer.timesToRepeat\" ng-change=\"setEndDate()\"  \\/>' +\n            '        </div>' +\n            '    </div>' +\n            '    <p class=\"text-muted\" ng-if=\"scheduledTransfer.endOn === \\'after\\' && timesEndDate.length > 0\" style=\"margin-left: 5px + \">Completion date: {{timesEndDate}}</p>' +\n            '    <div class=\"lp-st-end-date lp-st-section clearfix\" ng-if=\"scheduledTransfer.endOn === \\'onDate\\'\">' +\n            '        <div class=\"pull-left lp-st-caption\">End date</div>' +\n            '        <div class=\"pull-left lp-st-control calendar\">' +\n            '            <input ng-click=\"openEndCalendar($event)\" aria-label=\"end date\" type=\"text\" ng-required=\"isScheduledTransfer === true\" name=\"endDate\" ng-model=\"scheduledTransfer.endDate\" readonly=\"readonly\" datepicker-popup=\"d-MMM-yyyy\" is-open=\"calendar.endCalendarOpen\" datepicker-options=\"endDateOptions\" min-date=\"minEndDate\" class=\"form-control\" lp-future-time=\"\" show-button-bar=\"false\" tabindex=\"0\" ng-keypress=\"openEndCalendar($event)\" \\/>' +\n            '            <span ng-click=\"openEndCalendar($event)\" class=\"lp-icon lp-icon-calendar calendar-icon\"></span>' +\n            '        </div>' +\n            '    </div>' +\n            '    <p ng-if=\"dateWarning\">Transfer will be put through on the last day of the month if the month is not long enough</p>' +\n            '</div>'\n        );\n\n        function linkFn(scope, element, attrs, ctrls) {\n            var dateCalculator;\n            var modelCtrl = ctrls[0];\n            var formCtrl = ctrls[1];\n\n            var isCustomOrder = function() {\n                return scope.scheduledTransfer.frequency === scope.frequenciesEnum.WEEKLY || scope.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY || scope.scheduledTransfer.frequency === scope.frequenciesEnum.YEARLY;\n            };\n\n            var handleWarningDate = function() {\n                var found = false;\n\n                if (scope.scheduledTransfer.intervals.length > 0 && scope.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY) {\n                    for (var i = 28; i < 31; i++) {\n                        if (scope.dates[i].active) {\n                            found = true;\n                        }\n                    }\n                }\n\n                scope.dateWarning = found;\n            };\n\n            var handleIntervalValidation = function() {\n                var validIntervals = true;\n\n                validIntervals = scope.scheduledTransfer.intervals.length > 0 ? true : false;\n\n                //validate requirement from frequency\n                validIntervals = scope.customOrder ? validIntervals : true;\n\n                //validate whether the order is scheduled or not\n                validIntervals = scope.isScheduledTransfer ? validIntervals : true;\n\n                modelCtrl.$setValidity('intervalsRequired', validIntervals);\n            };\n\n            var clearActiveIntervals = function() {\n                var i, l;\n\n                scope.scheduledTransfer.intervals = [];\n\n                for(i = 0, l = scope.days.length; i < l; i++) {\n                    scope.days[i].active = false;\n                }\n\n                for(i = 0, l = scope.dates.length; i < l; i++) {\n                    scope.dates[i].active = false;\n                }\n\n                for(i = 0, l = scope.months.length; i < l; i++) {\n                    scope.months[i].active = false;\n                }\n            };\n\n            var initialize = function() {\n\n                scope.todaysDate = new Date();\n                scope.minEndDate = new Date();\n\n                scope.frequenciesEnum = {\n                    START_OF_THE_MONTH: 'START_OF_THE_MONTH',\n                    END_OF_THE_MONTH: 'END_OF_THE_MONTH',\n                    LAST_FRIDAY_OF_THE_MONTH: 'LAST_FRIDAY_OF_THE_MONTH',\n                    WEEKLY: 'WEEKLY',\n                    MONTHLY: 'MONTHLY',\n                    YEARLY: 'YEARLY'\n                };\n\n                dateCalculator = new ScheduledDateCalculator({\n                    frequencies: scope.frequenciesEnum\n                });\n\n                //MENU OPTIONS\n                //groups prepended with letter to order list\n                if (!scope.frequencies) {\n                    // if endOptions where not passed these are defaults\n                    scope.frequencies = [{\n                            id: scope.frequenciesEnum.START_OF_THE_MONTH,\n                            value: 'First of the month',\n                            group: 'apreset'\n                        }, {\n                            id: scope.frequenciesEnum.END_OF_THE_MONTH,\n                            value: 'End of the month',\n                            group: 'apreset'\n                        }, {\n                            id: scope.frequenciesEnum.LAST_FRIDAY_OF_THE_MONTH,\n                            value: 'Last Friday of the month',\n                            group: 'apreset'\n                        }, {\n                            id: scope.frequenciesEnum.WEEKLY,\n                            value: 'Weekly',\n                            group: 'bcustom'\n                        }, {\n                            id: scope.frequenciesEnum.MONTHLY,\n                            value: 'Monthly',\n                            group: 'bcustom'\n                        }, {\n                            id: scope.frequenciesEnum.YEARLY,\n                            value: 'Yearly',\n                            group: 'bcustom'\n                        }];\n                }\n                //interval days\n                scope.days = [\n                    {\n                        id: 1,\n                        value: 'M',\n                        label: 'Monday',\n                        active: false\n                    }, {\n                        id: 2,\n                        value: 'T',\n                        label: 'Tuesday',\n                        active: false\n                    }, {\n                        id: 3,\n                        value: 'W',\n                        label: 'Wednesday',\n                        active: false\n                    }, {\n                        id: 4,\n                        value: 'T',\n                        label: 'Thursday',\n                        active: false\n                    }, {\n                        id: 5,\n                        value: 'F',\n                        label: 'Friday',\n                        active: false\n                    }, {\n                        id: 6,\n                        value: 'S',\n                        label: 'Saturday',\n                        active: false\n                    }, {\n                        id: 7,\n                        value: 'S',\n                        label: 'Sunday',\n                        active: false\n                    }];\n\n                //interval months\n                scope.months = [{\n                        id: 1,\n                        value: 'Jan',\n                        label: 'January',\n                        active: false\n                    }, {\n                        id: 2,\n                        value: 'Feb',\n                        label: 'February',\n                        active: false\n                    }, {\n                        id: 3,\n                        value: 'Mar',\n                        label: 'March',\n                        active: false\n                    }, {\n                        id: 4,\n                        value: 'Apr',\n                        label: 'April',\n                        active: false\n                    }, {\n                        id: 5,\n                        value: 'May',\n                        label: 'May',\n                        active: false\n                    }, {\n                        id: 6,\n                        value: 'Jun',\n                        label: 'June',\n                        active: false\n                    }, {\n                        id: 7,\n                        value: 'Jul',\n                        label: 'July',\n                        active: false\n                    }, {\n                        id: 8,\n                        value: 'Aug',\n                        label: 'August',\n                        active: false\n                    }, {\n                        id: 9,\n                        value: 'Sep',\n                        label: 'September',\n                        active: false\n                    }, {\n                        id: 10,\n                        value: 'Oct',\n                        label: 'October',\n                        active: false\n                    }, {\n                        id: 11,\n                        value: 'Nov',\n                        label: 'November',\n                        active: false\n                    }, {\n                        id: 12,\n                        value: 'Dec',\n                        label: 'December',\n                        active: false\n                    }];\n\n                //interval dates\n                scope.dates = [];\n\n                for(var i = 1; i < 32; i++) {\n                    scope.dates.push({\n                        id: i,\n                        value: i,\n                        label: i,\n                        active: false\n                    });\n                }\n\n                if (!scope.endOptions) {\n                    // if endOptions where not passed these are defaults\n                    scope.endOptions = [{\n                            id: 'after',\n                            value: 'After'\n                        }, {\n                            id: 'onDate',\n                            value: 'On date'\n                        }];\n                }\n                scope.scheduledTransfer.endOn = scope.endOptions[0].id;\n\n                scope.customOrder = false;\n                scope.dateWarning = false;\n\n                //calendar flags\n                scope.calendar = {\n                    startCalendarOpen: false,\n                    endCalendarOpen: false\n                };\n\n                scope.endDateOptions = {\n                    datepickerMode: 'year',\n                    'show-weeks': false\n                };\n\n                scope.startDateOptions = {\n                    'show-weeks': false\n                };\n\n                scope.timesEndDate = scope.scheduledTransfer.endDate;\n\n                scope.setEndDate();\n            };\n\n            //add intervals control to form to cater for validation\n            modelCtrl.$name = 'scheduledTransfer';\n            formCtrl.$addControl(modelCtrl);\n\n            modelCtrl.$formatters.push(function(value) {\n                if(value.intervals.length > 0) {\n                    var i, j;\n\n                    //check the frequency\n                    if(value.frequency === scope.frequenciesEnum.WEEKLY) {\n                        //if correct frequency\n                        for(i = 0; i < value.intervals.length; i++) {\n                            //remap active intervals\n                            for(j = 0; j < scope.days.length; j++) {\n                                if(value.intervals[i] === scope.days[j].id) {\n                                    scope.days[j].active = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else if(value.frequency === scope.frequenciesEnum.MONTHLY) {\n                        for(i = 0; i < value.intervals.length; i++) {\n                            for(j = 0; j < scope.dates.length; j++) {\n                                if(value.intervals[i] === scope.dates[j].id) {\n                                    scope.dates[j].active = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else if(value.frequency === scope.frequenciesEnum.YEARLY) {\n                        for(i = 0; i < value.intervals.length; i++) {\n                            for(j = 0; j < scope.months.length; j++) {\n                                if(value.intervals[i] === scope.months[j].id) {\n                                    scope.months[j].active = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                //set frequency\n                scope.scheduledTransfer.frequency = value.frequency === '' ? scope.frequencies[0].id : value.frequency;\n\n                //set custom order\n                if(isCustomOrder()) {\n                    scope.customOrder = true;\n                } else {\n                    scope.customOrder = false;\n                }\n\n                handleWarningDate();\n                scope.setTransferPeriodDates();\n            });\n\n\n            /**\n             * FREQUENCY FUNCTIONS\n             */\n            //reset the interval list and set whether the standing order is custom or not\n            scope.frequencyChanged = function() {\n\n                clearActiveIntervals();\n\n                scope.setTransferPeriodDates();\n\n                if(isCustomOrder()) {\n                    scope.customOrder = true;\n                    handleIntervalValidation();\n                    scope.scheduledTransfer.customOrder = true;\n                } else {\n                    scope.customOrder = false;\n                    modelCtrl.$setValidity('intervalsRequired', true);\n                    scope.scheduledTransfer.customOrder = false;\n                }\n\n                handleWarningDate();\n            };\n\n            /**\n             * INTERVAL FUNCTIONS\n             */\n            //add a selected interval to the interval list\n            scope.toggleInterval = function($index) {\n\n                var list, search;\n\n                //set list to whichever frequency is currently selected\n                if(scope.scheduledTransfer.frequency === scope.frequenciesEnum.WEEKLY) {\n                    list = scope.days;\n                } else if(scope.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY) {\n                    list = scope.dates;\n                } else if(scope.scheduledTransfer.frequency === scope.frequenciesEnum.YEARLY) {\n                    list = scope.months;\n                }\n\n                search = list[$index];\n\n                if(search.active) {\n                    //remove from list\n                    var index = scope.scheduledTransfer.intervals.indexOf(search.id);\n                    scope.scheduledTransfer.intervals.splice(index, 1);\n                } else {\n                    //add to list\n                    scope.scheduledTransfer.intervals.push(search.id);\n                }\n\n                search.active = !search.active;\n\n                //set interval control validity\n                handleIntervalValidation();\n                handleWarningDate();\n\n                scope.setEndDate();\n            };\n\n            /**\n             * CALENDAR FUNCTIONS\n             */\n            scope.openStartCalendar = function($event) {\n                //open calendar on click event or \"enter\" and \"space\" key press events\n                if ($event.type === 'click' || $event.which === 32 || $event.which === 13) {\n                    $event.preventDefault();\n                    $event.stopPropagation();\n\n                    scope.calendar.endCalendarOpen = false;\n                    //open start date calendar\n                    scope.calendar.startCalendarOpen = !scope.calendar.startCalendarOpen;\n                }\n            };\n\n            scope.openEndCalendar = function($event) {\n                if ($event.type === 'click' || $event.which === 32 || $event.which === 13) {\n                    $event.preventDefault();\n                    $event.stopPropagation();\n\n                    scope.calendar.startCalendarOpen = false;\n                    //open end date calendar\n                    scope.calendar.endCalendarOpen = !scope.calendar.endCalendarOpen;\n                }\n            };\n\n            scope.setTransferPeriodDates = function() {\n\n                if (typeof scope.scheduledTransfer.startDate !== 'object') {\n                    if(isCustomOrder()) {\n                        //start date todays date\n                        scope.scheduledTransfer.startDate = new Date(scope.todaysDate.getTime());\n                    } else {\n                        //calculate start date\n                        if(scope.scheduledTransfer.frequency === scope.frequenciesEnum.END_OF_THE_MONTH) {\n                            scope.scheduledTransfer.startDate = dateCalculator.getLastDayOfMonth();\n                        } else if(scope.scheduledTransfer.frequency === scope.frequenciesEnum.START_OF_THE_MONTH) {\n                            scope.scheduledTransfer.startDate = dateCalculator.getFirstDayOfMonth();\n                        } else if(scope.scheduledTransfer.frequency === scope.frequenciesEnum.LAST_FRIDAY_OF_THE_MONTH) {\n                            scope.scheduledTransfer.startDate = dateCalculator.getLastFridayOfMonth();\n                        }\n                    }\n                }\n\n                scope.setEndDate();\n            };\n\n            scope.setEndDate = function() {\n\n                var timeToAdd;\n\n                if(scope.scheduledTransfer.startDate) {\n                    var date = new Date(scope.scheduledTransfer.startDate.getTime());\n\n                    if(isCustomOrder()) {\n                        timeToAdd = (scope.scheduledTransfer.timesToRepeat * scope.scheduledTransfer.every);\n\n                        //add specified number of weeks/months/years to date\n                        if(scope.scheduledTransfer.frequency === scope.frequenciesEnum.WEEKLY) {\n                            date = dateCalculator.addWeeksToDate(date, timeToAdd);\n\n                        } else if(scope.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY) {\n                            date = dateCalculator.addMonthsToDate(date, timeToAdd);\n\n                        } else if(scope.scheduledTransfer.frequency === scope.frequenciesEnum.YEARLY) {\n                            date = dateCalculator.addYearsToDate(date, timeToAdd);\n\n                        }\n                    } else {\n                        timeToAdd = scope.scheduledTransfer.timesToRepeat;\n                        timeToAdd = scope.scheduledTransfer.timesToRepeat;\n\n                        //calculate end date based on frequency\n                        if(scope.scheduledTransfer.frequency === scope.frequenciesEnum.END_OF_THE_MONTH) {\n                            date = dateCalculator.getLastDayOfMonthPlusTime(date, timeToAdd);\n\n                        } else if(scope.scheduledTransfer.frequency === scope.frequenciesEnum.START_OF_THE_MONTH) {\n                            date = dateCalculator.getFirstDayOfMonthPlusTime(date, timeToAdd);\n\n                        } else if(scope.scheduledTransfer.frequency === scope.frequenciesEnum.LAST_FRIDAY_OF_THE_MONTH) {\n                            date = dateCalculator.getLastFridayOfMonthPlusTime(date, timeToAdd);\n\n                        }\n                    }\n\n                    scope.scheduledTransfer.endDate = date;\n                    scope.minEndDate = dateCalculator.calculateMinimumEndDate(scope.scheduledTransfer.frequency, scope.scheduledTransfer.every, new Date(scope.scheduledTransfer.startDate.getTime()));\n\n                    scope.timesEndDate = new Date(scope.scheduledTransfer.endDate.getTime()).toString('d-MMM-yyyy');\n                }\n            };\n\n            /**\n             * WATCHES\n             */\n            scope.$watch('isScheduledTransfer', function(newValue) {\n                handleIntervalValidation();\n            });\n\n            //reset scope on successful form submission\n            scope.$on('reset', function() {\n                scope.scheduledTransfer.frequency = scope.frequencies[0].id;\n                scope.customOrder = false;\n                scope.scheduledTransfer.customOrder = false;\n            });\n\n            initialize();\n        }\n\n        return {\n            restrict: 'AE',\n            replace: true,\n            require: ['ngModel', '^form'],\n            template: $templateCache.get('scheduled-transfer.html'),\n            scope: {\n                scheduledTransfer: '=ngModel',\n                isScheduledTransfer: '=lpIsScheduledTransfer',\n                frequencies: '=?frequencies',\n                endOptions: '=?endOptions'\n            },\n            link: linkFn\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/components/scheduled-transfer/scripts/lp-scheduled-transfer.js\n **/","define(function(require, exports, module) {\n\n    'use strict';\n\n    var base = require('base');\n    var lpCoreUtils = base.inject('lpCoreUtils', require('core').name);\n\n    /**\n     * Scheduled Date Calculator Constructor\n     * @constructor\n     */\n    var ScheduledDateCalculator = module.exports = function ScheduledDateCalculator(config) {\n        var self = this;\n\n        self.frequencies = config.frequencies;\n    };\n\n    /**\n     * Add number of weeks to a specified date\n     * @param date\n     * @param noOfWeeks\n     * @returns {Date}\n     */\n    ScheduledDateCalculator.prototype.addWeeksToDate = function(date, noOfWeeks) {\n        return lpCoreUtils.date(date).add(noOfWeeks, 'weeks').toDate();\n    };\n\n    /**\n     * Add number of months to a specified date\n     * @param date\n     * @param noOfMonths\n     * @returns {Date}\n     */\n    ScheduledDateCalculator.prototype.addMonthsToDate = function(date, noOfMonths) {\n        return lpCoreUtils.date(date).add(noOfMonths, 'months').toDate();\n    };\n\n    /**\n     * Add number of years to a specified date\n     * @param date\n     * @param noOfYears\n     * @returns {Date}\n     */\n    ScheduledDateCalculator.prototype.addYearsToDate = function(date, noOfYears) {\n        return lpCoreUtils.date(date).add(noOfYears, 'years').toDate();\n    };\n\n    /**\n     * Returns a date set at the last day of the month\n     * @returns Date\n     */\n    ScheduledDateCalculator.prototype.getLastDayOfMonth = function() {\n        return lpCoreUtils.date().endOf('month').toDate();\n    };\n\n    /**\n     * Returns a date set to today, if it is the first, or the next first day of a month\n     * @returns {Date}\n     */\n    ScheduledDateCalculator.prototype.getFirstDayOfMonth = function() {\n        var date = lpCoreUtils.date();\n\n        //is is the first day of the month?\n        if(date.date() !== 1) {\n            date.add(1, 'month').startOf('month');\n        }\n\n        return date.toDate();\n    };\n\n    /**\n     * Returns a date set to the next last friday of the month (if the last friday of this month has passed, it will go to the next)\n     * @returns {Date}\n     */\n    ScheduledDateCalculator.prototype.getLastFridayOfMonth = function() {\n        var lastDay = lpCoreUtils.date().endOf('month');\n\n        if (lastDay.day() >= 5) {\n            lastDay.subtract(lastDay.day() - 5, 'days');\n        }\n        else {\n            lastDay.subtract(lastDay.day() + 2, 'days');\n        }\n\n        return lastDay.toDate();\n    };\n\n    /**\n     * returns provided date with extra months as specified\n     * @param date\n     * @param monthsToAdd\n     * @returns {Date}\n     */\n    ScheduledDateCalculator.prototype.getLastDayOfMonthPlusTime = function(date, monthsToAdd) {\n        return lpCoreUtils.date(date).add(monthsToAdd - 1, 'month').endOf('month').toDate();\n    };\n\n    /**\n     * Get's the first day of the month\n     * @param date\n     * @param monthsToAdd\n     * @returns {Date}\n     */\n    ScheduledDateCalculator.prototype.getFirstDayOfMonthPlusTime = function(date, monthsToAdd) {\n        var dateCopy = lpCoreUtils.date(date).clone();\n\n        //if start date is first of month (default start date, zero based)\n        if(dateCopy.day() === 0) {\n            dateCopy.add(monthsToAdd - 1, 'months').startOf('month');\n            if(dateCopy.isBefore(date)) {\n                date = dateCopy.add(1, 'months');\n            } else {\n                date = dateCopy;\n            }\n        } else {\n            date = lpCoreUtils.date(date).add(monthsToAdd, 'months').startOf('month');\n        }\n\n        return date.toDate();\n    };\n\n\n    /**\n     * Calculates the next last friday of a month based on the specified number of Months to add\n     * @param date\n     * @param monthsToAdd\n     * @returns {Date}\n     */\n    ScheduledDateCalculator.prototype.getLastFridayOfMonthPlusTime = function(date, monthsToAdd) {\n        var dateCopy = lpCoreUtils.date(date).clone();\n        var lastWeekFriday = function(d) {\n            return d.subtract(1, 'week').endOf('week').subtract(1, 'days');\n        };\n\n        //this month?\n        if(dateCopy.endOf('month').day() !== 5) {\n            lastWeekFriday(dateCopy);\n\n            if(dateCopy.isBefore(date)) {\n                dateCopy.add(monthsToAdd, 'months');\n            } else {\n                dateCopy.add(monthsToAdd - 1, 'months');\n            }\n\n            if(dateCopy.endOf('month').day() !== 5) {\n                lastWeekFriday(dateCopy);\n            }\n        } else {\n            dateCopy.add(monthsToAdd - 1, 'months').endOf('month');\n\n            if(dateCopy.day() !== 5) {\n                lastWeekFriday(dateCopy);\n            }\n        }\n\n        return dateCopy.toDate();\n    };\n\n    /**\n     * Calculates the minimum end date\n     * @param frequency\n     * @param repeatEvery\n     * @param date\n     * @returns {Date}\n     */\n    ScheduledDateCalculator.prototype.calculateMinimumEndDate = function(frequency, repeatEvery, date) {\n        switch(frequency) {\n            case this.frequencies.WEEKLY:\n                date = lpCoreUtils.date(date).add(1 * repeatEvery, 'weeks').toDate();\n                break;\n            case this.frequencies.MONTHLY:\n                date = lpCoreUtils.date(date).add(1 * repeatEvery, 'months').toDate();\n                break;\n            case this.frequencies.YEARLY:\n                date = lpCoreUtils.date(date).add(1 * repeatEvery, 'years').toDate();\n                break;\n            case this.frequencies.LAST_FRIDAY_OF_THE_MONTH:\n                date = this.getLastFridayOfMonthPlusTime(date, 1);\n                break;\n            case this.frequencies.START_OF_THE_MONTH:\n                date = this.getFirstDayOfMonthPlusTime(date, 1);\n                break;\n            case this.frequencies.END_OF_THE_MONTH:\n                date = this.getLastDayOfMonthPlusTime(date, 1);\n                break;\n            default:\n                break;\n        }\n\n        return date;\n    };\n\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/factories/scheduled-date-calculator.js\n **/","/*\n *  ----------------------------------------------------------------\n *  Copyright © Backbase Launchpad B.V.\n *  ----------------------------------------------------------------\n *  Filename : main.js\n *  Description: Main entry point lp-amount-input component\n *  ----------------------------------------------------------------\n */\ndefine( function (require, exports, module) {\n    'use strict';\n\n    module.name = 'lp-amount-input';\n    var base = require('base');\n    var core = require('core');\n    var ui = require('ui');\n\n    var deps = [\n        core.name,\n        ui.name\n    ];\n\n    module.exports = base.createModule(module.name, deps)\n        .directive(require('./directives'));\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/components/lp-amount-input/scripts/main.js\n **/","define(function(require, exports, module) {\n\n    'use strict';\n\n    var defaults = {\n        decimals: 2,\n        hideGroupSep: false,\n        allowNegative: false,\n        currencySymbol: '' //use locale settings by default\n    };\n\n    /**\n     * lp-amount-input custom element directive\n     * @ngInject\n     */\n    exports.lpAmountInput = function(lpUIUtils, $locale, $parse) {\n\n        var StringMask = lpUIUtils.StringMask;\n\n        /**\n         * Main directive link function\n         *\n         * @param  {object} scope   Angular scope object\n         * @param  {HTMLElement} elem    DOM element\n         * @param  {object} attrs   Elem attributes\n         * @param  {object} ctrl  ngModelController\n         * @return {undefined}\n         */\n        function linkFn(scope, elem, attrs, ctrl) {\n            if (attrs.lpAmountInput) {\n                // Convert string to object.\n                attrs.lpAmountInput = $parse(attrs.lpAmountInput)(scope);\n            }\n\n            var options = lpUIUtils.defaults(attrs.lpAmountInput || {}, defaults);\n\n            var moneyMask,\n                decimalDelimiter = $locale.NUMBER_FORMATS.DECIMAL_SEP,\n                thousandsDelimiter = $locale.NUMBER_FORMATS.GROUP_SEP,\n                currencySym = options.currencySymbol || $locale.NUMBER_FORMATS.CURRENCY_SYM;\n\n            function maskFactory(maskDecimals) {\n                var decimalsPattern = maskDecimals > 0 ? decimalDelimiter + new Array(maskDecimals + 1).join('0') : '';\n                var maskPattern = currencySym + ' #' + thousandsDelimiter + '##0' + decimalsPattern;\n                return new StringMask(maskPattern, {reverse: true});\n            }\n\n            if (options.hideGroupSep) {\n                thousandsDelimiter = '';\n            }\n\n            moneyMask = maskFactory(options.decimals);\n\n            function formatter(value) {\n                if (!value) {\n                     return '';\n                }\n\n                var prefix = (options.allowNegative && value < 0) ? '-' : '';\n                var valueToFormat = lpUIUtils.prepareNumberToFormatter(value, options.decimals);\n                return prefix + moneyMask.apply(valueToFormat);\n            }\n\n            function parser(value) {\n                if (!value) {\n                    return '';\n                }\n\n                var actualNumber = value.replace(/[^\\d]+/g, ''),\n                    formatedValue;\n\n                    actualNumber = actualNumber.replace(/^[0]+([1-9])/, '$1');\n                    formatedValue = moneyMask.apply(actualNumber);\n\n                if (options.allowNegative) {\n                    var isNegative = (value[0] === '-'),\n                    needsToInvertSign = (value.slice(-1) === '-');\n\n                    //only apply the minus sign if it is negative or(exclusive)\n                    //needs to be negative and the number is different from zero\n                    if (needsToInvertSign ^ isNegative && !!actualNumber) {\n                        actualNumber *= -1;\n                        formatedValue = '-' + formatedValue;\n                    }\n                }\n\n                if (value !== formatedValue) {\n                    ctrl.$setViewValue(formatedValue);\n                    ctrl.$render();\n                }\n\n                formatedValue = formatedValue ? parseInt(formatedValue.replace(/[^\\d\\-]+/g, ''), 10) / Math.pow(10, options.decimals) : null;\n\n                return formatedValue;\n            }\n            // observe attribute changes\n            attrs.$observe('lpAmountInput', function(value) {\n                value = $parse(value)(scope);\n                if (value !== null && typeof value === 'object') {\n                    if (value.currencySymbol !== '') {\n                        currencySym = value.currencySymbol;\n                    }\n                    moneyMask = maskFactory(options.decimals);\n                    parser(ctrl.$viewValue);\n                }\n            });\n            // Add formatters and parsers.\n            ctrl.$formatters.push(formatter);\n            ctrl.$parsers.push(parser);\n        }\n\n        return {\n            require: 'ngModel',\n            restrict: 'A',\n            link: linkFn\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/components/lp-amount-input/scripts/directives.js\n **/","/**\n *  ----------------------------------------------------------------\n *  Copyright © Backbase Launchpad B.V.\n *  ----------------------------------------------------------------\n *  Filename : main.js\n *  Description: Main entry point otp-check component\n *  ----------------------------------------------------------------\n */\ndefine( function (require, exports, module) {\n    'use strict';\n\n    module.name = 'otp-check';\n    var base = require('base');\n    var deps = [\n        require('module-enrollment').name\n    ];\n\n\n    module.exports = base.createModule(module.name, deps)\n        .directive(require('./directives'));\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/components/otp-check/scripts/main.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_17__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-enrollment\"\n ** module id = 17\n ** module chunks = 0\n **/","define(function(require, exports, module) {\n\n    'use strict';\n\n    var layoutDesktop = require('../templates/desktop/layout');\n    var fieldsList = require('./config').fields;\n\n    /**\n     * otp-check custom element directive\n     * @ngInject\n     */\n    exports.otpCheck = function($timeout, lpCoreBus, lpEnrollmentUtil, lpCoreUtils) {\n\n        /**\n         * Main directive link function\n         * @param  {object} scope   Angular scope object\n         * @param  {HTMLElement} elem    DOM element\n         * @param  {object} attrs   Elem attributes\n         * @param  {object} ngModel ngModelController\n         * @return {undefined}\n         */\n        function linkFn(scope, elem, attrs, ngModel) {\n            var namespace = scope.otpEventNamespace || '';\n\n\n            scope.otp = {}; // main state object\n            scope.otp.input = lpCoreUtils.clone(fieldsList.verifyOtp);\n\n            scope.otp.input.name = scope.otpInputName || scope.otp.input.name;\n\n            // Passing api function to verifier\n            scope.otp.input.api = function () {\n                return {\n                    verifyOtp: function (params) {\n                        return scope.otpApi(params);\n                    }\n                };\n            };\n\n            scope.mask = lpEnrollmentUtil.maskStringMaker;\n\n            // Step 1\n            scope.otp.showChannelSelector = true;\n            scope.otp.showOtpVerification = false;\n\n            // Select channel\n            scope.selectChannel = function (channel) {\n                scope.channelSelected = channel;\n            };\n\n            scope.cancel = function () {\n                // go to 'select channel' step\n                scope.back();\n\n                // clear otp input field\n                scope.otp.input.value = null;\n\n                scope.channelSelected = false;\n                scope.otpNext = false;\n\n                // reset otp field\n                lpCoreBus.publish('lp-labeled-input:reset:by:name', scope.otpInputName);\n            };\n\n            // Returning to step 1\n            scope.back = function () {\n                scope.otp.showChannelSelector = true;\n                scope.otp.showOtpVerification = false;\n            };\n\n            scope.select = function () {\n                scope.loading = true;\n                lpCoreBus.publish(namespace + '.lp-otp-check-select-channel', scope.channelSelected);\n            };\n\n            lpCoreBus.subscribe(namespace + '.lp-otp-check-channel-response-success', function () {\n                scope.loading = false;\n                scope.otp.showChannelSelector = false;\n                scope.otp.showOtpVerification = true;\n                scope.codeSent = 'Sent';\n                $timeout(function () {\n                    scope.codeSent = false;\n                }, 500);\n            });\n\n            lpCoreBus.subscribe(namespace + '.lp-otp-check-channel-response-error', function (err) {\n                scope.loading = false;\n                scope.serverError = err.statusText || 'Server error!';\n                $timeout(function () {\n                    scope.serverError = false;\n                }, 5000);\n            });\n\n            // Step 2\n            scope.serverResponseFails = false;\n            scope.serverValidationFails = false;\n\n            lpCoreBus.subscribe('lp-enrollment:validation:external', function(res) {\n                //exit if validated input is not in current scope\n                if (res.name !== scope.otpInputName) {\n                    return;\n                }\n\n                // let know about server request error\n                if (res.serverError) {\n                    scope.verifyLoading = false; // enable submit button\n                    scope.serverResponseFails = 'Server error for [' + res.name + ']';\n                } else {\n                    scope.serverResponseFails = false;\n                }\n\n                // let know about server validation error\n                if (res.validationError) {\n                    scope.verifyLoading = false; // enable submit button\n                    scope.serverValidationFails = res.validationError;\n                } else {\n                    scope.serverValidationFails = false;\n                }\n\n                // All is OK!\n                if (!scope.serverResponseFails && !scope.serverValidationFails) {\n                    $timeout(function () {\n                        // close view\n                        scope.cancel();\n\n                        // let know widget\n                        lpCoreBus.publish(namespace + '.lp-otp-check-success');\n                    }, 500);\n                }\n            });\n\n            scope.verify = function () {\n                scope.verifyLoading = true; // disable submit button\n                lpCoreBus.publish('lp-enrollment:verify:by', scope.otpInputName);\n            };\n        }\n\n        /**\n         * Compile function manipulate the DOM before the linking\n         * @param  {HTMLElement} elem  DOM element\n         * @param  {object} attrs Element attributes\n         * @return {function}       Linked function\n         */\n        function compileFn(elem, attrs) {\n            return linkFn;\n        }\n\n        return {\n            scope: {\n                otpNext: '=',\n                otpApi: '=',\n                otpInputName: '@',\n                otpEventNamespace: '@'\n            },\n            template: layoutDesktop,\n            compile: compileFn,\n            restrict: 'AE',\n            link: linkFn\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/components/otp-check/scripts/directives.js\n **/","define(function (require, exports, module) {\n    'use strict';\n\n    /**\n     * Export Template\n     */\n    module.exports = '' +\n        '<!-- DESKTOP -->' +\n        '<div class=\"lp-otp-check otp-check is-desktop\">' +\n        '   <div ng-show=\"otp.showChannelSelector\">' +\n        '       <div class=\"otp-content\">' +\n        '           <h3 lp-i18n=\"Verification required\"></h3>' +\n        '           <div class=\"text-muted\" lp-i18n=\"Same sensitive payments require you to provide a verification code. This does not affect your registered devices.\"></div>' +\n        '           <h5 ng-show=\"serverError\" class=\"text-red\" lp-i18n=\"{{ serverError }}\"></h5>' +\n        '           <h5 ng-hide=\"serverError\" class=\"text-success\">&nbsp;</h5>' +\n        '           <h5 lp-i18n=\"Where do you want to receive your verification code?\"></h5>' +\n        '           <div class=\"channel-selector row\">' +\n        '               <div class=\"cell col-xs-12 col-sm-12 col-md-12 col-lg-12\">' +\n        '                   <div lp-custom-radio=\"\" class=\"custom-radio custom-radio-lg\" ng-model=\"channelSelected\" value=\"phone\" name=\"numbers\">' +\n        '                       <div class=\"radio-label\">' +\n        '                           <div class=\"radio-label-main\" lp-i18n=\"Use my mobile phone\"></div>' +\n        '                           <div class=\"radio-label-small\" lp-i18n=\"{{ mask(\\'phone\\')(otpNext.phone.phoneNumber) }}\"></div>' +\n        '                       </div>' +\n        '                   </div>' +\n        '                   <div lp-custom-radio=\"\" class=\"custom-radio custom-radio-lg\" ng-model=\"channelSelected\" value=\"email\" name=\"numbers\">' +\n        '                       <div class=\"radio-label\">' +\n        '                           <div class=\"radio-label-main\" lp-i18n=\"Use my email\"></div>' +\n        '                           <div class=\"radio-label-small\" lp-i18n=\"{{ mask(\\'email\\')(otpNext.email.emailAddress) }}\"></div>' +\n        '                       </div>' +\n        '                   </div>' +\n        '               </div>' +\n        '           </div>' +\n        '       </div>  ' +\n        '       <div class=\"otp-nav text-right\">' +\n        '           <button ng-click=\"cancel()\" ng-disabled=\"loading\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></button>' +\n        '           <button ng-click=\"select()\" ng-disabled=\"!channelSelected || loading\" class=\"btn btn-primary\" lp-i18n=\"Send my code\"></button>' +\n        '           <i ng-show=\"loading\" class=\"loading-button\"><span class=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\"></span></i>' +\n        '       </div>' +\n        '   </div>' +\n        '   <!-- Step 2: verify code -->' +\n        '   <div ng-show=\"otp.showOtpVerification\">' +\n        '       <div class=\"otp-content\">' +\n        '           <h4 lp-i18n=\"Enter authentication code:\"></h4>' +\n        '           <div class=\"row\">' +\n        '               <div class=\"col-xs-12 col-sm-8 col-md-6 col-lg-5\">' +\n        '                   <div lp-labeled-input-field=\"lp-labeled-input-field\"' +\n        '                       external-verification=\"{{ otp.input.externalVerification }}\"' +\n        '                       input-type=\"{{ otp.input.type }}\"' +\n        '                       api=\"otp.input.api()\"' +\n        '                       description=\"templates/otp.html\"' +\n        '                       button-inside=\"otp.input.buttonInside\"' +\n        '                       input-value=\"otp.input.value\"' +\n        '                       is-required=\"{{ otp.input.required }}\"' +\n        '                       input-pattern=\"{{ otp.input.pattern }}\"' +\n        '                       pattern-error-msg=\"{{ otp.input.errorMsg }}\"' +\n        '                       field-name=\"{{ otp.input.name }}\"' +\n        '                       placeholder-text=\"{{ otp.input.placeholder }}\"></div>' +\n        '               </div>' +\n        '           </div>' +\n        '           <h5 ng-show=\"serverResponseFails\" class=\"text-red\" lp-i18n=\"Server response failed!\"></h5>' +\n        '           <h5 ng-show=\"serverValidationFails\" class=\"text-red\" lp-i18n=\"{{serverValidationFails}}\"></h5>' +\n        '           <br><button ng-click=\"select()\" ng-disabled=\"!channelSelected || loading\" class=\"btn btn-link text-right\" lp-i18n=\"Re-send code\"></button>' +\n        '           <span ng-show=\"codeSent\" class=\"text-success\" lp-i18n=\"{{ codeSent }}\"></span>' +\n        '           <i ng-show=\"loading\" class=\"loading-button\"><span class=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\"></span></i>' +\n        '           <span ng-show=\"serverError\" class=\"text-red text-center\" lp-i18n=\"{{ serverError }}\"></span>' +\n        '       </div>' +\n        '       <div class=\"otp-nav text-right\">' +\n        '           <button ng-click=\"back()\" ng-disabled=\"loading\" class=\"btn btn-link\" lp-i18n=\"Back\"></button>' +\n        '           <button ng-click=\"verify()\" class=\"btn btn-primary verify-button\" ng-disabled=\"!otp.input.value || loading\" lp-i18n=\"Verify\"></button>' +\n        '       </div>' +\n        '   </div>' +\n        '</div>';\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/components/otp-check/templates/desktop/layout.js\n **/","define(function (require, exports, module) {\n    'use strict';\n\n    // Configure input fields for different steps\n    exports.fields = {\n        verifyOtp: {\n            name: 'otpCode',\n            required: true,\n            externalVerification: 'verifyOtp',\n            buttonInside: true,\n            type: 'text',\n            pattern: '/^[0-9]{6}$/',\n            errorMsg: 'Wrong format: should be at least 6 digits',\n            placeholder: 'Enter your code',\n            value: null\n        }\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/components/otp-check/scripts/config.js\n **/","/**\n * @deprecated will be removed in LP v0.13.x\n * Please use Scheduled Transfer component and\n * factories/scheduled-date-calculator instead\n */\ndefine( function (require, exports, module) {\n\t'use strict';\n\n\tmodule.name = 'module-payments-deprecated';\n\n\tvar base = require('base');\n\n\tvar deps = [];\n\n\tmodule.exports = base.createModule(module.name, deps)\n\t\t.factory( require('./scheduled-date-calculator'))\n\t\t.directive( require('./scheduled-transfer'));\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/deprecated/scripts/main.js\n **/","/* eslint-disable */\n\n/**\n * @deprecated will be removed in LP v0.13.x\n * Please use factories/scheduled-date-calculator instead\n */\ndefine(function(require, exports, module) {\n    'use strict';\n\n    // @ngInject\n    exports.ScheduledDateCalculator = function(lpCoreUtils) {\n\n        /**\n         * Scheduled Date Calculator Constructor\n         * @constructor\n         */\n        var ScheduledDateCalculator = function(config) {\n            var self = this;\n\n            self.frequencies = config.frequencies;\n        };\n\n        /**\n         * Add number of weeks to a specified date\n         * @param date\n         * @param noOfWeeks\n         * @returns {Date}\n         */\n        ScheduledDateCalculator.prototype.addWeeksToDate = function(date, noOfWeeks) {\n            return lpCoreUtils.date(date).add(noOfWeeks, 'weeks').toDate();\n        };\n\n        /**\n         * Add number of months to a specified date\n         * @param date\n         * @param noOfMonths\n         * @returns {Date}\n         */\n        ScheduledDateCalculator.prototype.addMonthsToDate = function(date, noOfMonths) {\n            return lpCoreUtils.date(date).add(noOfMonths, 'months').toDate();\n        };\n\n        /**\n         * Add number of years to a specified date\n         * @param date\n         * @param noOfYears\n         * @returns {Date}\n         */\n        ScheduledDateCalculator.prototype.addYearsToDate = function(date, noOfYears) {\n            return lpCoreUtils.date(date).add(noOfYears, 'years').toDate();\n        };\n\n        /**\n         * Returns a date set at the last day of the month\n         * @returns Date\n         */\n        ScheduledDateCalculator.prototype.getLastDayOfMonth = function() {\n            return lpCoreUtils.date().endOf('month').toDate();\n        };\n\n        /**\n         * Returns a date set to today, if it is the first, or the next first day of a month\n         * @returns {Date}\n         */\n        ScheduledDateCalculator.prototype.getFirstDayOfMonth = function() {\n            var date = lpCoreUtils.date();\n\n            //is is the first day of the month?\n            if(date.date() !== 1) {\n                date.add(1, 'month').startOf('month');\n            }\n\n            return date.toDate();\n        };\n\n        /**\n         * Returns a date set to the next last friday of the month (if the last friday of this month has passed, it will go to the next)\n         * @returns {Date}\n         */\n        ScheduledDateCalculator.prototype.getLastFridayOfMonth = function() {\n            var lastDay = lpCoreUtils.date().endOf('month');\n\n            if (lastDay.day() >= 5) {\n                lastDay.subtract(lastDay.day() - 5, 'days');\n            }\n            else {\n                lastDay.subtract(lastDay.day() + 2, 'days');\n            }\n\n            return lastDay.toDate();\n        };\n\n        /**\n         * returns provided date with extra months as specified\n         * @param date\n         * @param monthsToAdd\n         * @returns {Date}\n         */\n        ScheduledDateCalculator.prototype.getLastDayOfMonthPlusTime = function(date, monthsToAdd) {\n            return lpCoreUtils.date(date).add(monthsToAdd - 1, 'month').endOf('month').toDate();\n        };\n\n        /**\n         * Get's the first day of the month\n         * @param date\n         * @param monthsToAdd\n         * @returns {Date}\n         */\n        ScheduledDateCalculator.prototype.getFirstDayOfMonthPlusTime = function(date, monthsToAdd) {\n            var dateCopy = lpCoreUtils.date(date).clone();\n\n            //if start date is first of month (default start date, zero based)\n            if(dateCopy.day() === 0) {\n                dateCopy.add(monthsToAdd - 1, 'months').startOf('month');\n                if(dateCopy.isBefore(date)) {\n                    date = dateCopy.add(1, 'months');\n                } else {\n                    date = dateCopy;\n                }\n            } else {\n                date = lpCoreUtils.date(date).add(monthsToAdd, 'months').startOf('month');\n            }\n\n            return date.toDate();\n        };\n\n\n        /**\n         * Calculates the next last friday of a month based on the specified number of Months to add\n         * @param date\n         * @param monthsToAdd\n         * @returns {Date}\n         */\n        ScheduledDateCalculator.prototype.getLastFridayOfMonthPlusTime = function(date, monthsToAdd) {\n            var dateCopy = lpCoreUtils.date(date).clone();\n            var lastWeekFriday = function(d) {\n                return d.subtract(1, 'week').endOf('week').subtract(1, 'days');\n            };\n\n            //this month?\n            if(dateCopy.endOf('month').day() !== 5) {\n                lastWeekFriday(dateCopy);\n\n                if(dateCopy.isBefore(date)) {\n                    dateCopy.add(monthsToAdd, 'months');\n                } else {\n                    dateCopy.add(monthsToAdd - 1, 'months');\n                }\n\n                if(dateCopy.endOf('month').day() !== 5) {\n                    lastWeekFriday(dateCopy);\n                }\n            } else {\n                dateCopy.add(monthsToAdd - 1, 'months').endOf('month');\n\n                if(dateCopy.day() !== 5) {\n                    lastWeekFriday(dateCopy);\n                }\n            }\n\n            date = dateCopy.toDate();\n            return date = dateCopy.toDate();\n        };\n\n        /**\n         * Calculates the minimum end date\n         * @param frequency\n         * @param repeatEvery\n         * @param date\n         * @returns {Date}\n         */\n        ScheduledDateCalculator.prototype.calculateMinimumEndDate = function(frequency, repeatEvery, date) {\n            switch(frequency) {\n                case this.frequencies.WEEKLY:\n                    date = lpCoreUtils.date(date).add(1 * repeatEvery, 'weeks').toDate();\n                    break;\n                case this.frequencies.MONTHLY:\n                    date = lpCoreUtils.date(date).add(1 * repeatEvery, 'months').toDate();\n                    break;\n                case this.frequencies.YEARLY:\n                    date = lpCoreUtils.date(date).add(1 * repeatEvery, 'years').toDate();\n                    break;\n                case this.frequencies.LAST_FRIDAY_OF_THE_MONTH:\n                    date = this.getLastFridayOfMonthPlusTime(date, 1);\n                    break;\n                case this.frequencies.START_OF_THE_MONTH:\n                    date = this.getFirstDayOfMonthPlusTime(date, 1);\n                    break;\n                case this.frequencies.END_OF_THE_MONTH:\n                    date = this.getLastDayOfMonthPlusTime(date, 1);\n                    break;\n                default:\n                    break;\n            }\n\n            return date;\n        };\n\n        return {\n            getInstance: function(config) {\n                return new ScheduledDateCalculator(config);\n            }\n        };\n    }\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/deprecated/scripts/scheduled-date-calculator.js\n **/","/* eslint-disable */\n\n/**\n * @deprecated will be removed in LP v0.13.x\n * Please use Scheduled Transfer component instead.\n */\ndefine(function(require, exports, module) {\n    'use strict';\n\n    /**\n     * TODO: Refactor this directive to not require a widget instance.\n     */\n\n    // @ngInject\n    exports.scheduledTransfer = function(ScheduledDateCalculator) {\n        var template='';\n        template += '<div class=\"lp-scheduled-transfer\">';\n        template += '    <div class=\"lp-st-frequency lp-st-section clearfix\">';\n        template += '        <div class=\"pull-left lp-st-caption\">Frequency</div>';\n        template += '        <div class=\"pull-left lp-st-control\">';\n        template += '            <div class=\"lp-st-frequency-dropdown\" aria-label=\"frequency\" dropdown-select=\"dropdown-select\" ng-change=\"frequencyChanged()\" ng-model=\"paymentOrder.scheduledTransfer.frequency\" options=\"val.id as val.value group by val.group for val in frequencies\"></div>';\n        template += '        </div>';\n        template += '    </div>';\n        template += '    <div class=\"lp-st-every lp-st-section clearfix\">';\n        template += '        <div class=\"pull-left lp-st-caption\" ng-if=\"customOrder\">Every</div>';\n        template += '        <div class=\"pull-left lp-st-control clearfix\" ng-if=\"paymentOrder.scheduledTransfer.frequency === frequenciesEnum.WEEKLY\">';\n        template += '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"1\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"lp-st-every-input pull-left\" name=\"repeatEvery\" required=\"required\" tabindex=\"0\" aria-required=\"true\" aria-label=\"Repeat weekly transfer every\" maxlength=\"2\" ng-model=\"paymentOrder.scheduledTransfer.every\" ng-change=\"setEndDate()\" \\/><span>week(s) on:</span>';\n        template += '        </div>';\n        template += '        <div class=\"pull-left lp-st-control clearfix\" ng-if=\"paymentOrder.scheduledTransfer.frequency === frequenciesEnum.MONTHLY\">';\n        template += '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"1\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"lp-st-every-input pull-left\" name=\"repeatEvery\" required=\"required\" tabindex=\"0\" aria-required=\"true\" aria-label=\"Repeat monthly transfer every\" maxlength=\"2\" ng-model=\"paymentOrder.scheduledTransfer.every\" ng-change=\"setEndDate()\" \\/><span>month(s) on:</span>';\n        template += '        </div>';\n        template += '        <div class=\"pull-left lp-st-control clearfix\" ng-if=\"paymentOrder.scheduledTransfer.frequency === frequenciesEnum.YEARLY\">';\n        template += '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"1\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"lp-st-every-input pull-left\" name=\"repeatEvery\" required=\"required\" tabindex=\"0\" aria-required=\"true\"  aria-label=\"Repeat yearly transfer every\" maxlength=\"2\" ng-model=\"paymentOrder.scheduledTransfer.every\" ng-change=\"setEndDate()\" \\/><span>year(s):</span>';\n        template += '        </div>';\n        template += '    </div>';\n        template += '    <div class=\"lp-st-interval lp-st-section clearfix\" ng-if=\"customOrder\">';\n        template += '        <div class=\"lp-st-interval-menu weekly btn-group\" ng-if=\"paymentOrder.scheduledTransfer.frequency === frequenciesEnum.WEEKLY\">';\n        template += '            <button type=\"button\" interval-button=\"interval-button\" aria-label=\"{{day.label}}\" ng-class=\"{\\'active\\': day.active}\" class=\"btn btn-default\" tabindex=\"0\"  ng-click=\"toggleInterval($index)\" ng-repeat=\"day in days\" ng-model=\"day\">{{day.value}}</button>';\n        template += '        </div>';\n        template += '        <div class=\"lp-st-interval-menu monthly btn-group\" ng-if=\"paymentOrder.scheduledTransfer.frequency === frequenciesEnum.MONTHLY\">';\n        template += '            <button type=\"button\" interval-button=\"interval-button\" aria-label=\"{{date.label}}\" ng-class=\"{\\'active\\': date.active}\" class=\"btn btn-default\" tabindex=\"0\"  ng-click=\"toggleInterval($index)\" ng-repeat=\"date in dates\" ng-model=\"date\">{{date.value}}</button>';\n        template += '        </div>';\n        template += '        <div class=\"lp-st-interval-menu yearly btn-group\" ng-if=\"paymentOrder.scheduledTransfer.frequency === frequenciesEnum.YEARLY\">';\n        template += '            <button type=\"button\" interval-button=\"interval-button\" aria-label=\"{{month.label}}\" ng-class=\"{\\'active\\': month.active}\" class=\"btn btn-default\" tabindex=\"0\" ng-click=\"toggleInterval($index)\" ng-repeat=\"month in months\" ng-model=\"month\">{{month.value}}</button>';\n        template += '        </div>';\n        template += '    </div>';\n        template += '    <div class=\"lp-st-start-date lp-st-section clearfix\">';\n        template += '        <div class=\"pull-left lp-st-caption\">Start</div>';\n        template += '        <div class=\"pull-left lp-st-control calendar\">';\n        template += '            <input ng-click=\"openStartCalendar($event)\" aria-label=\"start date\" type=\"text\" ng-required=\"paymentOrder.isScheduledTransfer === true\" name=\"startDate\" ng-model=\"paymentOrder.scheduledTransfer.startDate\" datepicker-popup=\"d-MMM-yyyy\" readonly=\"readonly\" is-open=\"calendar.startCalendarOpen\" datepicker-options=\"startDateOptions\" min-date=\"todaysDate\" class=\"form-control\" lp-future-time=\"\" show-button-bar=\"false\" tabindex=\"0\" ng-change=\"setEndDate()\" ng-keypress=\"openStartCalendar($event)\" \\/>';\n        template += '            <span ng-click=\"openStartCalendar($event)\" class=\"lp-icon lp-icon-calendar calendar-icon\"></span>';\n        template += '        </div>';\n        template += '    </div>';\n        template += '    <div class=\"lp-st-end-on lp-st-section clearfix\">';\n        template += '        <div class=\"pull-left lp-st-caption\">End</div>';\n        template += '        <div class=\"pull-left lp-st-control\">';\n        template += '            <div class=\"lp-st-end-on-dropdown\" aria-label=\"end on\" dropdown-select=\"dropdown-select\" ng-change=\"endOnChanged()\" ng-model=\"paymentOrder.scheduledTransfer.endOn\" options=\"val.id as val.value for val in endOptions\"></div>';\n        template += '        </div>';\n        template += '    </div>';\n        template += '    <div class=\"lp-st-end-after lp-st-section clearfix\" ng-if=\"paymentOrder.scheduledTransfer.endOn === \\'after\\'\">';\n        template += '        <div class=\"pull-left lp-st-caption\">Repeat</div>';\n        template += '        <div class=\"pull-left lp-st-control\">';\n        template += '            <input type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"2\" min=\"1\" step=\"0\" non-zero=\"non-zero\" class=\"form-control\" aria-label=\"times to repeat\" name=\"timesToRepeat\" aria-required=\"true\" required=\"required\" tabindex=\"0\" ng-model=\"paymentOrder.scheduledTransfer.timesToRepeat\" ng-change=\"setEndDate()\"  \\/>';\n        template += '        </div>';\n        template += '';\n        template += '    </div>';\n        template += '    <p class=\"text-muted\" ng-if=\"paymentOrder.scheduledTransfer.endOn === \\'after\\' && timesEndDate.length > 0\" style=\"margin-left: 5px;\">Completion date: {{timesEndDate}}</p>';\n        template += '    <div class=\"lp-st-end-date lp-st-section clearfix\" ng-if=\"paymentOrder.scheduledTransfer.endOn === \\'onDate\\'\">';\n        template += '        <div class=\"pull-left lp-st-caption\">End date</div>';\n        template += '        <div class=\"pull-left lp-st-control calendar\">';\n        template += '            <input ng-click=\"openEndCalendar($event)\" aria-label=\"end date\" type=\"text\" ng-required=\"paymentOrder.isScheduledTransfer === true\" name=\"endDate\" ng-model=\"paymentOrder.scheduledTransfer.endDate\" readonly=\"readonly\" datepicker-popup=\"d-MMM-yyyy\" is-open=\"calendar.endCalendarOpen\" datepicker-options=\"endDateOptions\" min-date=\"minEndDate\" class=\"form-control\" lp-future-time=\"\" show-button-bar=\"false\" tabindex=\"0\" ng-keypress=\"openEndCalendar($event)\" \\/>';\n        template += '            <span ng-click=\"openEndCalendar($event)\" class=\"lp-icon lp-icon-calendar calendar-icon\"></span>';\n        template += '        </div>';\n        template += '    </div>';\n        template += '    <p ng-if=\"dateWarning\">Transfer will be put through on the last day of the month if the month is not long enough</p>';\n        template += '</div>';\n        template += '';\n\n        return {\n            restrict : \"AE\",\n            replace: true,\n            require: [\"ngModel\", \"^form\"],\n            template: template,\n            link: function (scope, element, attrs, ctrls) {\n\n                var dateCalculator;\n\n                var initialize = function() {\n\n                    scope.todaysDate = new Date();\n                    scope.minEndDate = new Date();\n\n                    scope.frequenciesEnum = {\n                        START_OF_THE_MONTH: \"START_OF_THE_MONTH\",\n                        END_OF_THE_MONTH: \"END_OF_THE_MONTH\",\n                        LAST_FRIDAY_OF_THE_MONTH: \"LAST_FRIDAY_OF_THE_MONTH\",\n                        WEEKLY: \"WEEKLY\",\n                        MONTHLY: \"MONTHLY\",\n                        YEARLY: \"YEARLY\"\n                    };\n\n                    dateCalculator = ScheduledDateCalculator.getInstance({\n                        frequencies: scope.frequenciesEnum\n                    });\n\n                    //MENU OPTIONS\n                    //groups prepended with letter to order list\n                    if (!scope.frequencies) {\n                        // if endOptions where not passed these are defaults\n                        scope.frequencies = [{\n                                id: scope.frequenciesEnum.START_OF_THE_MONTH,\n                                value: \"First of the month\",\n                                group: \"apreset\"\n                            },{\n                                id: scope.frequenciesEnum.END_OF_THE_MONTH,\n                                value: \"End of the month\",\n                                group: \"apreset\"\n                            },{\n                                id: scope.frequenciesEnum.LAST_FRIDAY_OF_THE_MONTH,\n                                value: \"Last Friday of the month\",\n                                group: \"apreset\"\n                            },{\n                                id: scope.frequenciesEnum.WEEKLY,\n                                value: \"Weekly\",\n                                group: \"bcustom\"\n                            },{\n                                id: scope.frequenciesEnum.MONTHLY,\n                                value: \"Monthly\",\n                                group: \"bcustom\"\n                            },{\n                                id: scope.frequenciesEnum.YEARLY,\n                                value: \"Yearly\",\n                                group: \"bcustom\"\n                            }];\n                    }\n                    //interval days\n                    scope.days = [\n                        {\n                            id: 1,\n                            value: \"M\",\n                            label: \"Monday\",\n                            active: false\n                        },{\n                            id: 2,\n                            value: \"T\",\n                            label: \"Tuesday\",\n                            active: false\n                        },{\n                            id: 3,\n                            value: \"W\",\n                            label: \"Wednesday\",\n                            active: false\n                        },{\n                            id: 4,\n                            value: \"T\",\n                            label: \"Thursday\",\n                            active: false\n                        },{\n                            id: 5,\n                            value: \"F\",\n                            label: \"Friday\",\n                            active: false\n                        },{\n                            id: 6,\n                            value: \"S\",\n                            label: \"Saturday\",\n                            active: false\n                        },{\n                            id: 7,\n                            value: \"S\",\n                            label: \"Sunday\",\n                            active: false\n                        }];\n\n                    //interval months\n                    scope.months = [{\n                            id: 1,\n                            value: \"Jan\",\n                            label: \"January\",\n                            active: false\n                        },{\n                            id: 2,\n                            value: \"Feb\",\n                            label: \"February\",\n                            active: false\n                        },{\n                            id: 3,\n                            value: \"Mar\",\n                            label: \"March\",\n                            active: false\n                        },{\n                            id: 4,\n                            value: \"Apr\",\n                            label: \"April\",\n                            active: false\n                        },{\n                            id: 5,\n                            value: \"May\",\n                            label: \"May\",\n                            active: false\n                        },{\n                            id: 6,\n                            value: \"Jun\",\n                            label: \"June\",\n                            active: false\n                        },{\n                            id: 7,\n                            value: \"Jul\",\n                            label: \"July\",\n                            active: false\n                        },{\n                            id: 8,\n                            value: \"Aug\",\n                            label: \"August\",\n                            active: false\n                        },{\n                            id: 9,\n                            value: \"Sep\",\n                            label: \"September\",\n                            active: false\n                        },{\n                            id: 10,\n                            value: \"Oct\",\n                            label: \"October\",\n                            active: false\n                        },{\n                            id: 11,\n                            value: \"Nov\",\n                            label: \"November\",\n                            active: false\n                        },{\n                            id: 12,\n                            value: \"Dec\",\n                            label: \"December\",\n                            active: false\n                        }];\n\n                    //interval dates\n                    scope.dates = [];\n\n                    for(var i = 1; i < 32; i++) {\n                        scope.dates.push({\n                            id: i,\n                            value: i,\n                            label: i,\n                            active: false\n                        });\n                    }\n\n                    if (!scope.endOptions) {\n                        // if endOptions where not passed these are defaults\n                        scope.endOptions = [{\n                                id: \"after\",\n                                value: \"After\"\n                            },{\n                                id: \"onDate\",\n                                value: \"On date\"\n                            }];\n                    }\n                    scope.paymentOrder.scheduledTransfer.endOn = scope.endOptions[0].id;\n\n                    scope.customOrder = false;\n                    scope.dateWarning = false;\n\n                    //calendar flags\n                    scope.calendar = {\n                        startCalendarOpen: false,\n                        endCalendarOpen: false\n                    };\n\n                    scope.endDateOptions = {\n                        datepickerMode: 'year',\n                        'show-weeks': false\n                    };\n\n                    scope.startDateOptions = {\n                        'show-weeks': false\n                    };\n\n                    scope.timesEndDate = scope.paymentOrder.scheduledTransfer.endDate;\n\n                    scope.setEndDate();\n                };\n\n\n\n                var modelCtrl = ctrls[0];\n                var formCtrl = ctrls[1];\n\n                //add intervals control to form to cater for validation\n                modelCtrl.$name = 'scheduledTransfer';\n                formCtrl.$addControl(modelCtrl);\n\n                modelCtrl.$formatters.push(function(value) {\n                    //remap intervals\n                    if(value.intervals.length > 0) {\n                        var i, j;\n\n                        //check the frequency\n                        if(value.frequency === scope.frequenciesEnum.WEEKLY) {\n                            //if correct frequency\n                            for(i = 0; i < value.intervals.length; i++) {\n                                //remap active intervals\n                                for(j = 0; j < scope.days.length; j++) {\n                                    if(value.intervals[i] === scope.days[j].id) {\n                                        scope.days[j].active = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        } else if(value.frequency === scope.frequenciesEnum.MONTHLY) {\n                            for(i = 0; i < value.intervals.length; i++) {\n                                for(j = 0; j < scope.dates.length; j++) {\n                                    if(value.intervals[i] === scope.dates[j].id) {\n                                        scope.dates[j].active = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        } else if(value.frequency === scope.frequenciesEnum.YEARLY) {\n                            for(i = 0; i < value.intervals.length; i++) {\n                                for(j = 0; j < scope.months.length; j++) {\n                                    if(value.intervals[i] === scope.months[j].id) {\n                                        scope.months[j].active = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    //set frequency\n                    scope.paymentOrder.scheduledTransfer.frequency = value.frequency === \"\" ? scope.frequencies[0].id : value.frequency;\n\n                    //set custom order\n                    if(isCustomOrder()) {\n                        scope.customOrder = true;\n                    } else {\n                        scope.customOrder = false;\n                    }\n\n                    handleWarningDate();\n                    scope.setTransferPeriodDates();\n                });\n\n\n                /**\n                 * FREQUENCY FUNCTIONS\n                 */\n                //reset the interval list and set whether the standing order is custom or not\n                scope.frequencyChanged = function() {\n\n                    clearActiveIntervals();\n\n                    scope.setTransferPeriodDates();\n\n                    if(isCustomOrder()) {\n                        scope.customOrder = true;\n                        handleIntervalValidation();\n                        scope.paymentOrder.scheduledTransfer.customOrder = true;\n                    } else {\n                        scope.customOrder = false;\n                        modelCtrl.$setValidity(\"intervalsRequired\", true);\n                        scope.paymentOrder.scheduledTransfer.customOrder = false;\n                    }\n\n                    handleWarningDate();\n                };\n\n                /**\n                 * INTERVAL FUNCTIONS\n                 */\n                //add a selected interval to the interval list\n                scope.toggleInterval = function($index) {\n\n                    var list, search;\n\n                    //set list to whichever frequency is currenctly selected\n                    if(scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.WEEKLY) {\n                        list = scope.days;\n                    } else if(scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY) {\n                        list = scope.dates;\n                    } else if(scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.YEARLY) {\n                        list = scope.months;\n                    }\n\n                    search = list[$index];\n\n                    if(search.active) {\n                        //remove from list\n                        var index = scope.paymentOrder.scheduledTransfer.intervals.indexOf(search.id);\n                        scope.paymentOrder.scheduledTransfer.intervals.splice(index, 1);\n                    } else {\n                        //add to list\n                        scope.paymentOrder.scheduledTransfer.intervals.push(search.id);\n                    }\n\n                    search.active = !search.active;\n\n                    //set interval control validity\n                    handleIntervalValidation();\n                    handleWarningDate();\n\n                    scope.setEndDate();\n                };\n\n                var handleIntervalValidation = function() {\n\n                    var validIntervals = true;\n\n                    validIntervals = scope.paymentOrder.scheduledTransfer.intervals.length > 0 ? true : false;\n\n                    //validate requirement from frequency\n                    validIntervals = scope.customOrder ? validIntervals : true;\n\n                    //validate whether the order is scheduled or not\n                    validIntervals = scope.paymentOrder.isScheduledTransfer ? validIntervals : true;\n\n                    modelCtrl.$setValidity(\"intervalsRequired\", validIntervals);\n                };\n\n                var clearActiveIntervals = function() {\n\n                    scope.paymentOrder.scheduledTransfer.intervals = [];\n\n                    var i;\n\n                    for(i = 0; i < scope.days.length; i++) {\n                        scope.days[i].active = false;\n                    }\n\n                    for(i = 0; i < scope.dates.length; i++) {\n                        scope.dates[i].active = false;\n                    }\n\n                    for(i = 0; i < scope.months.length; i++) {\n                        scope.months[i].active = false;\n                    }\n                };\n\n\n                /**\n                 * CALENDAR FUNCTIONS\n                 */\n                scope.openStartCalendar = function($event) {\n                    //open calendar on click event or \"enter\" and \"space\" key press events\n                    if ($event.type === 'click' || $event.which === 32 || $event.which === 13) {\n                        $event.preventDefault();\n                        $event.stopPropagation();\n\n                        scope.calendar.endCalendarOpen = false;\n                        //open start date calendar\n                        scope.calendar.startCalendarOpen = !scope.calendar.startCalendarOpen;\n                    }\n                };\n\n                scope.openEndCalendar = function($event) {\n                    if ($event.type === 'click' || $event.which === 32 || $event.which === 13) {\n                        $event.preventDefault();\n                        $event.stopPropagation();\n\n                        scope.calendar.startCalendarOpen = false;\n                        //open end date calendar\n                        scope.calendar.endCalendarOpen = !scope.calendar.endCalendarOpen;\n                    }\n                };\n\n                scope.setTransferPeriodDates = function() {\n\n                    if (typeof scope.paymentOrder.scheduledTransfer.startDate !== 'object') {\n                        if(isCustomOrder()) {\n                            //start date todays date\n                            scope.paymentOrder.scheduledTransfer.startDate = new Date(scope.todaysDate.getTime());\n                        } else {\n                            //calculate start date\n                            if(scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.END_OF_THE_MONTH) {\n                                scope.paymentOrder.scheduledTransfer.startDate = dateCalculator.getLastDayOfMonth();\n                            } else if(scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.START_OF_THE_MONTH) {\n                                scope.paymentOrder.scheduledTransfer.startDate = dateCalculator.getFirstDayOfMonth();\n                            } else if(scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.LAST_FRIDAY_OF_THE_MONTH) {\n                                scope.paymentOrder.scheduledTransfer.startDate = dateCalculator.getLastFridayOfMonth();\n                            }\n                        }\n                    }\n\n                    scope.setEndDate();\n                };\n\n                scope.setEndDate = function() {\n\n                    var timeToAdd;\n\n                    if(scope.paymentOrder.scheduledTransfer.startDate) {\n                        var date = new Date(scope.paymentOrder.scheduledTransfer.startDate.getTime());\n\n                        if(isCustomOrder()) {\n                            timeToAdd = (scope.paymentOrder.scheduledTransfer.timesToRepeat * scope.paymentOrder.scheduledTransfer.every);\n\n                            //add specified number of weeks/months/years to date\n                            if(scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.WEEKLY) {\n                                date = dateCalculator.addWeeksToDate(date, timeToAdd);\n\n                            } else if(scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY) {\n                                date = dateCalculator.addMonthsToDate(date, timeToAdd);\n\n                            } else if(scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.YEARLY) {\n                                date = dateCalculator.addYearsToDate(date, timeToAdd);\n\n                            }\n                        } else {\n                            timeToAdd = scope.paymentOrder.scheduledTransfer.timesToRepeat;\n                            timeToAdd = scope.paymentOrder.scheduledTransfer.timesToRepeat;\n\n                            //calculate end date based on frequency\n                            if(scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.END_OF_THE_MONTH) {\n                                date = dateCalculator.getLastDayOfMonthPlusTime(date, timeToAdd);\n\n                            } else if(scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.START_OF_THE_MONTH) {\n                                date = dateCalculator.getFirstDayOfMonthPlusTime(date, timeToAdd);\n\n                            } else if(scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.LAST_FRIDAY_OF_THE_MONTH) {\n                                date = dateCalculator.getLastFridayOfMonthPlusTime(date, timeToAdd);\n\n                            }\n\n                        }\n\n                        scope.paymentOrder.scheduledTransfer.endDate = date;\n                        scope.minEndDate = dateCalculator.calculateMinimumEndDate(scope.paymentOrder.scheduledTransfer.frequency, scope.paymentOrder.scheduledTransfer.every, new Date(scope.paymentOrder.scheduledTransfer.startDate.getTime()));\n\n                        scope.timesEndDate = new Date(scope.paymentOrder.scheduledTransfer.endDate.getTime()).toString(\"d-MMM-yyyy\");\n                    }\n                };\n\n                var handleWarningDate = function() {\n\n                    var found = false;\n\n                    if(scope.paymentOrder.scheduledTransfer.intervals.length > 0 && scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY) {\n                        for (var i = 28; i < 31; i++) {\n                            if (scope.dates[i].active) {\n                                found = true;\n                            }\n                        }\n                    }\n\n                    scope.dateWarning = found;\n                };\n\n\n                /**\n                 * WATCHES\n                 */\n                scope.$watch(\"paymentOrder.isScheduledTransfer\", function(newValue) {\n                    handleIntervalValidation();\n                });\n\n                //reset scope on succesful form submission\n                scope.$on(\"reset\", function() {\n                    scope.paymentOrder.scheduledTransfer.frequency = scope.frequencies[0].id;\n                    scope.customOrder = false;\n                    scope.paymentOrder.scheduledTransfer.customOrder = false;\n                });\n\n                /**\n                 * GENERAL\n                 */\n                var isCustomOrder = function() {\n                    return scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.WEEKLY || scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.MONTHLY || scope.paymentOrder.scheduledTransfer.frequency === scope.frequenciesEnum.YEARLY;\n                };\n\n                initialize();\n            }\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/deprecated/scripts/scheduled-transfer.js\n **/","define( function (require, exports, module) {\n\t'use strict';\n\n\tmodule.name = 'module-payments-migration';\n\n\tvar base = require('base');\n\n\tvar deps = [];\n\n\tmodule.exports = base.createModule(module.name, deps)\n\t\t.directive( require('./address-transfer'))\n\t\t.directive( require('./counter-party-filter'))\n\t\t.directive( require('./dynamic-aria-label'))\n\t\t.directive( require('./dynamic-focus'))\n\t\t.directive( require('./email-transfer'))\n\t\t.filter( require('./filters'))\n\t\t.factory( require('./iban-model'))\n\t\t.directive( require('./lp-currency-amount-input'))\n\t\t.directive( require('./lp-format-payment-reference'))\n\t\t.directive( require('./lp-format-us-account'))\n\t\t.directive( require('./lp-iban-input'))\n\t\t.directive( require('./lp-input-currency'))\n\t\t.directive( require('./lp-payment-ref-description'))\n\t\t.directive( require('./non-zero'))\n\t\t.directive( require('./p2p-enrollment'))\n\t\t.directive( require('./us-account-input'));\n});\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/main.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    // @ngInject\n    exports.addressTransfer = function($templateCache, transferTypes) {\n\n        $templateCache.put(\"$addressTransferTemplate.html\",\n                '<div class=\"lp-address-transfer\">' +\n                    '<div class=\"col-xs-12\">' +\n                        '<input type=\"input\" class=\"form-control\" ng-model=\"address.addressOne\" placeholder=\"Address Line 1\" aria-label=\"Address Line One\" />' +\n                        '<input type=\"input\" class=\"form-control\" ng-model=\"address.addressTwo\" placeholder=\"Address Line 2\" aria-label=\"Address Line Two\"  />' +\n                    '</div>' +\n                    '<div class=\"col-xs-12\">' +\n                        '<input type=\"input\" class=\"form-control\" ng-model=\"address.city\" placeholder=\"City\" aria-label=\"City\" />' +\n                    '</div>' +\n                    '<div class=\"col-xs-12\">' +\n                        '<div class=\"col-xs-5\">' +\n                            '<input type=\"input\" class=\"form-control\" ng-model=\"address.state\" placeholder=\"State\" aria-label=\"State\" />' +\n                        '</div>' +\n                        '<div ng-class=\"{\\'col-xs-offset-1\\': true, \\'col-xs-6\\': true, \\'has-feedback\\': address.zip.length > 0, \\'has-error\\': address.zip.length > 0 && !validZip, \\'has-success\\': address.zip.length > 0 && validZip}\">' +\n                            '<input type=\"input\" class=\"form-control\" ng-model=\"address.zip\" placeholder=\"Zip\" aria-label=\"Zip\" />' +\n                            '<span ng-if=\"validZip && address.zip.length > 0\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' +\n                            '<span ng-if=\"!validZip && address.zip.length > 0\" ng-click=\"clear()\" class=\"glyphicon glyphicon-remove form-control-feedback\"></span>' +\n                        '</div>' +\n                    '</div>' +\n                    '<div class=\"warning\">' +\n                        '<span>Selecting this means a cheque will be printed and posted on your behalf. Can take 7-14 days.</span>' +\n                    '</div>' +\n                '</div>'\n        );\n        //display table row clearfix\n\n        return {\n            restrict: 'EA',\n            replace: true,\n            require: [\"ngModel\", \"^form\"],\n            scope: {\n                counterpartyAddress: '=ngModel',\n                transferType: '=lpTransferType'\n            },\n            template: $templateCache.get(\"$addressTransferTemplate.html\"),\n            link: function(scope, element, attrs, ctrls) {\n\n                //Initial set up\n                /**\n                 * intialisation function\n                 * @constructor\n                 */\n                var initialize = function() {\n\n                    scope.address = {\n                        addressOne: \"\",\n                        addressTwo: \"\",\n                        city: \"\",\n                        state: \"\",\n                        zip: \"\"\n                    };\n\n                    setDefaultValidation(scope.transferType);\n                };\n\n                //controllers\n                var modelCtrl = ctrls[0], formCtrl = ctrls[1], associatedTransferType = transferTypes.p2pAddress;\n\n                modelCtrl.$name = attrs.name;\n                formCtrl.$addControl(modelCtrl);\n\n                modelCtrl.$formatters.push(function(value) {\n\n                    validateAddress(value);\n                    return value;\n                });\n\n                var validateAddress = function(address) {\n\n                    var lineOne = true, city = true, state = true, zip = true, zipValid = true;\n                    if(address) {\n                        //split address into multiple lines again\n                        var tempArray = address.split(\", \");\n\n                        scope.address.addressOne = tempArray[0];\n                        scope.address.addressTwo = tempArray[1];\n                        scope.address.city = tempArray[2];\n                        scope.address.state = tempArray[3];\n                        scope.address.zip = tempArray[4];\n\n                        //first line\n                        if(tempArray[0].length === 0) {\n                            lineOne = false;\n                        }\n\n                        //city line\n                        if(tempArray[2].length === 0) {\n                            city = false;\n                        }\n\n                        //state line\n                        if(tempArray[3].length === 0) {\n                            state = false;\n                        }\n\n                        //zip line\n                        if(tempArray[4].length === 0) {\n                            zip = false;\n                        } else {\n                            zipValid = validateZip(tempArray[4]);\n                        }\n                    }\n\n                    modelCtrl.$setValidity(\"addressLineOne\", lineOne);\n                    modelCtrl.$setValidity(\"addressCity\", city);\n                    modelCtrl.$setValidity(\"addressState\", state);\n                    modelCtrl.$setValidity(\"addressZip\", zip);\n                    modelCtrl.$setValidity(\"addressValidZip\", zipValid);\n                };\n\n                var validateZip = function(zip) {\n\n                    var re =  /^\\d{5}(-\\d{4})?$/;\n                    var valid = re.test(zip);\n                    scope.validZip = valid;\n                    return valid;\n                };\n\n                scope.$watch(\"address\", function(newValue, oldValue) {\n                    if(newValue === oldValue) {\n                        return;\n                    }\n\n                    scope.counterpartyAddress = newValue.addressOne + \", \" + newValue.addressTwo + \", \" + newValue.city + \", \" + newValue.state + \", \" + newValue.zip;\n\n                }, true);\n\n                scope.$watch(\"transferType\", function(newValue, oldValue) {\n\n                    if(newValue === oldValue) {\n                        return;\n                    }\n\n                    setDefaultValidation(newValue);\n                });\n\n                var setDefaultValidation = function(value) {\n                    if(value === associatedTransferType) {\n                        validateAddress(scope.counterpartyAddress || \"\");\n                    } else {\n                        modelCtrl.$setValidity(\"addressLineOne\", true);\n                        modelCtrl.$setValidity(\"addressCity\", true);\n                        modelCtrl.$setValidity(\"addressState\", true);\n                        modelCtrl.$setValidity(\"addressZip\", true);\n                        modelCtrl.$setValidity(\"addressValidZip\", true);\n                    }\n                };\n\n\n\n                initialize();\n\n            }\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/address-transfer.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    var $ = window.jQuery;\n    var base = require('base');\n    var angular = base.ng;\n    var lpUIUtils = base.inject('lpUIUtils', require('ui').name);\n\n    // @ngInject\n    exports.counterPartyFilter = function($templateCache, transferTypes, $document, lpUserDetails, lpCoreError, lpCoreUtils) {\n\n        $templateCache.put('$counterPartyFilter.html',\n            '<div class=\"lp-counter-party-filter\">' +\n                '<div class=\"input-group has-clear\">' +\n                    '<input class=\"name-field form-control\" type=\"text\" ng-model=\"counterpartyName\" ng-click=\"showContactList()\" ng-keydown=\"showContactList($event)\" aria-label=\"Counterparty Name\" />' +\n                    '<span class=\"counterparty-to text-muted\">To:</span>' +\n                    '<span class=\"input-clear\" ng-click=\"clearCounterParty()\" ng-show=\"counterpartyName.length\"><i class=\"glyphicon glyphicon-remove cursor-pointer\"></i></span>' +\n                    '<span class=\"input-group-btn\">' +\n                        '<button type=\"button\" role=\"button\" aria-label=\"Auto Suggest\" tabindex=\"0\" class=\"btn btn-default dropdown-toggle\" ng-click=\"toggleShowContacts()\">' +\n                            '<i class=\"lp-icon lp-icon-addressbook\"></i>' +\n                        '</button>' +\n                    '</span>' +\n                '</div>' +\n                '<div class=\"dropdown\">' +\n                    '<ul ng-show=\"showContacts && (counterpartyList | filter:counterpartyName).length > 0\" class=\"col-xs-12 dropdown-menu filter-list\" style=\"display: block;\">' +\n                        '<li class=\"contact\" ng-repeat=\"contact in counterpartyList | filter: counterpartyName | limitTo: 25 track by $index\" >' +\n                            '<div class=\"border\" ng-class=\"{\\'border-my-accounts\\': contact.ownAccounts, \\'border-other\\': !contact.ownAccounts}\"></div>' +\n                            '<div class=\"filter-contact clearfix\" ng-class=\"{\\'single-account-selection\\': contact.accounts.length === 1}\" ng-click=\"prepareSelection(contact)\" ng-keydown=\"handleContactAccountToggleKeyDown(contact, $event)\" dynamic-focus=\"contact\">' +\n                                '<div class=\"pull-left photo-container\">' +\n                                    '<img class=\"contact-photo media-object\" ng-src=\"{{getProfileImageByName(contact.photoUrl,contact.name)}}\" />' +\n                                '</div>' +\n                                '<div class=\"contact-info pull-left contact-details\">' +\n                                    '<span class=\"contact-name\">{{contact.name}}</span>' +\n                                    '<p class=\"account-info\" ng-if=\"contact.accounts.length > 1\">{{contact.accounts.length}} account(s)</p>' +\n                                    '<p class=\"account-info\" ng-if=\"contact.accounts.length === 1\">{{contact.accounts[0].account}}</p>' +\n                                '</div>' +\n                                '<div ng-if=\"contact.accounts.length > 1\" class=\"pull-left contact-account-list\">' +\n                                    '<p tabindex=\"0\" class=\"toggle-accounts\" ng-show=\"!contact.open\" ng-click=\"toggleContactAccounts(contact)\" ng-keydown=\"handleContactAccountToggleKeyDown(contact, $event)\"  aria-label=\"View accounts for {{contact.name}}\">View all accounts <span class=\"caret\"></span></p>' +\n                                    '<p tabindex=\"0\" class=\"toggle-accounts\" ng-show=\"contact.open\" ng-click=\"toggleContactAccounts(contact)\" ng-keydown=\"handleContactAccountToggleKeyDown(contact, $event)\" aria-label=\"Close accounts for {{contact.name}}\">Close all accounts <span class=\"caret\"></span></p>' +\n                                    '<div class=\"contact-accounts\" ng-class=\"{\\'contact-accounts-open\\': contact.open}\">' +\n                                        '<div tabindex=\"0\" ng-show=\"contact.open\" ng-repeat=\"account in contact.accounts track by $index\" class=\"contact-single-account\" ng-click=\"prepareSelection(contact, account)\" ng-keydown=\"handleSingleAccountKeyDown(contact, account, $event)\" dynamic-aria-label=\"dynamic-aria-label\" aria-contact=\"contact\" aria-account=\"account\">' +\n                                            '<div class=\"col-xs-10 col-xs-offset-2\">' +\n                                                '<p ng-if=\"account.name\">{{account.name}}</p>' +\n                                                '<p>{{account.account}}</p>' +\n                                            '</div>' +\n                                        '</div>' +\n                                    '</div>' +\n                                '</div>' +\n                            '</div>' +\n                        '</li>' +\n                    '</ul>' +\n                '</div>' +\n            '</div>'\n        );\n\n\n\n        return {\n            restrict: 'A',\n            scope: {\n                \"counterpartyName\": \"=ngModel\",\n                \"contacts\": \"=lpContacts\",\n                \"accounts\": \"=lpAccounts\",\n                \"profile\": \"=lpProfile\",\n                \"onSelect\": \"=\"\n            },\n            require: [\"ngModel\", \"^form\"],\n            template: $templateCache.get(\"$counterPartyFilter.html\"),\n            link: function(scope, element, attrs, ctrls) {\n\n                var modelCtrl = ctrls[0];\n                var formCtrl = ctrls[1];\n\n                modelCtrl.$name = attrs.name;\n                formCtrl.$addControl(modelCtrl);\n\n                var input = angular.element(element.find(\"input\"));\n                var elementNode = element.get(0);\n\n                var keyCodes = {\n                    up: 38,\n                    down: 40,\n                    enter: 13\n                };\n\n                var contactAccountFields = {\n                    email: transferTypes.p2pEmail,\n                    account: transferTypes.bank\n                };\n\n                var initialize = function() {\n\n                    scope.counterpartyList = [];\n                    scope.showContacts = false;\n\n                    scope.deregisterProfileWatch = scope.$watch(\"profile\", function(newProfileData) {\n                        console.log(newProfileData);\n                        if (!newProfileData) return;\n                        newProfileData.fullname = [newProfileData.firstName, newProfileData.lastName].join(' ');\n\n                        newProfileData.activities.lastLoggedIn = {\n                            key: 'Last Logged In',\n                            value: newProfileData.activities.lastLoggedIn\n                        };\n\n                        // capitalize first letter of the keys\n                        lpCoreUtils.map(newProfileData.details, function(v) {\n                            v.key = lpCoreUtils.startCase(v.key);\n                        });\n\n                        scope.profile = newProfileData;\n\n                        scope.deregisterContactsWatch = scope.$watch(\"contacts\", function(newContactsData) {\n                            if(newContactsData.length > 0) {\n                                preprocessContacts(scope.contacts);\n                                scope.deregisterContactsWatch();\n                            }\n                        });\n\n                        scope.deregisterAccountsWatch = scope.$watch(\"accounts\", function(newAccountsData) {\n                            if(newAccountsData.length > 0) {\n                                preprocessAccounts(scope.accounts);\n                                scope.deregisterAccountsWatch();\n                            }\n                        });\n                    });\n\n                    scope.accountsConfigured = false;\n                    scope.contactsConfigured = false;\n                };\n\n                /**\n                 * Validation hooks\n                 */\n                modelCtrl.$formatters.push(function(value) {\n\n                    if(value.length > 0) {\n                        modelCtrl.$setValidity(\"required\", true);\n                    } else {\n                        modelCtrl.$setValidity(\"required\", false);\n                    }\n\n                    return value;\n                });\n\n                modelCtrl.$parsers.push(function(value) {\n\n                    if(value.length > 0) {\n                        modelCtrl.$setValidity(\"required\", true);\n                    } else {\n                        modelCtrl.$setValidity(\"required\", false);\n                    }\n\n                    return value;\n                });\n\n\n                /**\n                 * Preprocess contacts list and add to counterpartyList\n                 * @param contacts\n                 */\n                var preprocessContacts = function(contacts) {\n\n                    var contact;\n\n                    for(var i = 0; i < contacts.length; i ++) {\n                        contact = contacts[i];\n                        contact.open = false;\n                        contact.accounts = [];\n\n\n                        for(var key in contact) {\n                            if(contact.hasOwnProperty(key)) {\n                                if(contactAccountFields[key] && contact[key]) {\n                                    contact.accounts.push({\n                                        \"type\": contactAccountFields[key],\n                                        \"account\": contact[key]\n                                    });\n                                }\n                            }\n                        }\n\n                        scope.counterpartyList.push(contact);\n                    }\n                };\n\n                /**\n                 * Preprocess accounts array and add extra properties\n                 * @param accounts\n                 */\n                var preprocessAccounts = function(accounts) {\n\n                    var myAccounts = {};\n\n                    myAccounts.name = scope.profile.fullname;\n                    myAccounts.open = false; //closed by default\n                    myAccounts.ownAccounts = true;\n                    myAccounts.accounts = [];\n\n                    for(var i = 0; i < accounts.length; i ++) {\n                        myAccounts.accounts.push({\n                            type: transferTypes.bank,\n                            account: accounts[i].identifier,\n                            name: accounts[i].alias\n                        });\n                    }\n\n                    scope.counterpartyList.unshift(myAccounts);\n                };\n\n                var bindHideContacts = function() {\n\n                    $document.bind(\"click\", function(e) {\n\n                        if(!elementNode.contains(e.target)) {\n                            scope.$apply(function() {\n                                scope.showContacts = false;\n                            });\n                            unbindHideContacts();\n                        }\n                    });\n                };\n\n                var unbindHideContacts = function() {\n                    $document.unbind(\"click\");\n                };\n\n                var findFirstContact = function() {\n                    return $(element.find(\".contact\")[0]);\n                };\n\n                /**\n                 * Focuses on the selected contacts account toggle\n                 * @param target\n                 */\n                var focusContactsAccountsButton = function(target) {\n\n                    //focus on close button\n                    var toFocus;\n                    target = angular.element(event.target);\n\n                    if(target.next().hasClass(\"toggle-accounts\")) {\n                        toFocus = target.next();\n                    } else if(target.prev().hasClass(\"toggle-accounts\")) {\n                        toFocus = target.prev();\n                    }\n\n                    if(toFocus) {\n                        setTimeout(function() {\n                            toFocus.focus();\n                        }, 0);\n                    }\n                };\n\n                /**\n                 * Find the toggle buttons in a contact container\n                 * @param contactContainer\n                 * @returns {*}\n                 */\n                var findAccountToggles = function(contactContainer) {\n\n                    return contactContainer.find(\".toggle-accounts\");\n                };\n\n                /**\n                 * focus on the active toggle when selection an an contact account toggle\n                 * @param buttons\n                 */\n                var focusOnActiveToggle = function(buttons) {\n\n                    var toFocus;\n\n                    if($(buttons[0]).css(\"display\") === \"block\") {\n                        toFocus = buttons[0];\n                    } else {\n                       toFocus = buttons[1];\n                    }\n\n                    if(toFocus) {\n                        setTimeout(function() {\n                            toFocus.focus();\n                        }, 0);\n                    }\n                };\n\n                /**\n                 * returns the surrounding .contact element of an account or account toggle\n                 * @param target\n                 * @returns {*}\n                 */\n                var getContactParentContainer = function(target) {\n                    return target.parents(\".contact\");\n                };\n\n\n                /**\n                 * Show/Hide functions\n                 */\n                scope.toggleShowContacts = function() {\n\n                    scope.showContacts = !scope.showContacts;\n\n                    if(scope.showContacts) {\n                        bindHideContacts();\n                    } else {\n                        unbindHideContacts();\n                    }\n                };\n\n                /**\n                 * Clear CounterParty filter field\n                 */\n                scope.clearCounterParty = function() {\n                    scope.counterpartyName = '';\n\n                    scope.showContacts = true;\n                    bindHideContacts();\n                    scope.onSelect();\n\n                    (element.find(input)[0]).focus();\n                };\n\n                scope.$on(\"reset\", function() {\n                    scope.showContacts = false;\n                });\n\n                scope.showContactList = function(event) {\n\n                    //unbind before rebinding again\n                    unbindHideContacts();\n\n                    //if no event passed, or space or down arrow\n                    if(!event || (event.which === keyCodes.enter || event.which === keyCodes.down || event.which === keyCodes.up)) {\n\n                        if(event) {\n                            event.preventDefault();\n                            event.stopPropagation();\n                        }\n\n                        bindHideContacts();\n\n                        if(!scope.showContacts) {\n                            //open list of contacts\n                            scope.showContacts = true;\n                        } else if(event && event.which === keyCodes.down) {\n                            //select first contact\n                            var contact = findFirstContact();\n                            var buttons = findAccountToggles(contact);\n                            if(buttons.length > 0) {\n                                focusOnActiveToggle(buttons);\n                            } else {\n                                contact.find(\".filter-contact\").focus();\n                            }\n                        } else if(event && (event.which === keyCodes.up || event.which === keyCodes.enter)) {\n                            //close contacts\n                            scope.showContacts = false;\n                            unbindHideContacts();\n                        }\n                    }\n\n                };\n\n                /**\n                 * Hide/close a contacts list of accounts\n                 * @param contact\n                 * @param event\n                 */\n                scope.toggleContactAccounts = function(contact) {\n\n                    //loop through accounts\n                    for(var i = 0; i < scope.counterpartyList.length; i ++) {\n                        //toggle this contact's accounts open or closed\n                        if(scope.counterpartyList[i] === contact) {\n                            scope.counterpartyList[i].open = !scope.counterpartyList[i].open;\n                        } else {\n                            //hide all else\n                            scope.counterpartyList[i].open = false;\n                        }\n                    }\n                };\n\n\n                /**\n                 * Handle key press on account toggles\n                 * @param contact\n                 * @param event\n                 */\n                scope.handleContactAccountToggleKeyDown = function(contact, event) {\n\n                    event.preventDefault();\n                    event.stopPropagation();\n\n                    if(event.which === keyCodes.enter) {\n                        //selection\n                        if(contact.accounts.length === 1) {\n                            scope.prepareSelection(contact);\n                        } else {\n                            scope.toggleContactAccounts(contact);\n                            focusContactsAccountsButton(event.target);\n                        }\n                    } else if(event.which === keyCodes.down || event.which === keyCodes.up) {\n                        //navigation\n                        scope.keyToNextAccountToggle(event);\n                    }\n                };\n\n                /**\n                 * handle keypress on individual account selection\n                 * @param contact\n                 * @param account\n                 * @param event\n                 */\n                scope.handleSingleAccountKeyDown = function(contact, account, event) {\n\n                    event.preventDefault();\n                    event.stopPropagation();\n\n                    if(event.which === keyCodes.enter) {\n                        //selection\n                        scope.prepareSelection(contact, account);\n                    } else if(event.which === keyCodes.down || event.which === keyCodes.up) {\n                        //navigation\n                        scope.keyToNextAccount(event);\n                    }\n                };\n\n                /**\n                 * Focus on the next Account toggle based on keypress\n                 * @param event\n                 */\n                scope.keyToNextAccountToggle = function(event) {\n\n                    var target = $(event.target);\n                    var contactContainer = getContactParentContainer(target), buttons;\n\n                    if(event.which === keyCodes.down) {\n                        //are accounts open?\n                        if(target.next(\"div\").length > 0) {\n                            contactContainer.find(\".contact-single-account\")[0].focus();\n                        } else {\n                            //go to next account dropdown\n                            var nextContact = contactContainer.next(\".contact\");\n                            buttons = findAccountToggles(nextContact);\n\n                            if(buttons.length > 0) {\n                                focusOnActiveToggle(buttons);\n                            } else {\n                                //only one account!\n                                nextContact.find(\".filter-contact\").focus();\n                            }\n\n                        }\n                    } else if(event.which === keyCodes.up) {\n\n                        var prevContact = contactContainer.prev(\".contact\");\n                        buttons = findAccountToggles(prevContact);\n\n                        if(buttons.length > 0) {\n                            focusOnActiveToggle(buttons);\n                        } else if(prevContact.find(\".filter-contact\").length > 0) {\n                            //only one account!\n                            prevContact.find(\".filter-contact\").focus();\n                        } else {\n                            //no more accounts, focus on input\n                            input.focus();\n                        }\n                    }\n                };\n\n                /**\n                 * focus on next single account from keypress\n                 * @param event\n                 */\n                scope.keyToNextAccount = function(event) {\n\n                    var target = $(event.target), toFocus, contactContainer, buttons;\n\n                    if(event.which === keyCodes.down) {\n                        if(target.next(\".contact-single-account\").length === 1) {\n                            //next account\n                            toFocus = target.next(\".contact-single-account\");\n                        }\n                    } else if(event.which === keyCodes.up) {\n                        if(target.prev(\".contact-single-account\").length === 1) {\n                            //previous account\n                            toFocus = target.prev(\".contact-single-account\");\n                        } else {\n                            contactContainer = getContactParentContainer(target);\n                            buttons = findAccountToggles(contactContainer);\n                            if(buttons.length > 0) {\n                                //no more accounts, go to account toggle\n                                focusOnActiveToggle(buttons);\n                            }\n                        }\n                    }\n                    if(toFocus) {\n                        setTimeout(function () {\n                            toFocus.trigger(\"focus\");\n                        }, 0);\n                    }\n                };\n\n\n                /**\n                 * Prepare a selection for assignment to payment order\n                 * @param contact\n                 * @param account\n                 * @param event the event passed from the user interaction\n                 */\n                scope.prepareSelection = function (contact, account) {\n\n                    if(!account) {\n                        if(contact.accounts.length > 1) {\n                            return;\n                        } else {\n                            account = contact.accounts[0];\n                        }\n                    }\n\n                    scope.showContacts = false;\n                    unbindHideContacts();\n                    modelCtrl.$setViewValue(contact.name);\n                    scope.onSelect(account);\n\n                    setTimeout(function() {\n                        input.focus();\n                    }, 0);\n\n\n                };\n\n                /**\n                 * Decode URL of profile photo for contact\n                 * @param photoUrl\n                 * @returns {string}\n                 */\n                scope.getProfileImageByName = function(photoUrl, name) {\n                    if (photoUrl) {\n                        return lpUIUtils.decodePhotoUrl(photoUrl);\n                    } else if (name) {\n                        return lpUIUtils.getDefaultProfileImage(name, 100, 100);\n                    } else {\n                        lpCoreError.throwException('Expected a name but got ' + name);\n                        return '';\n                    }\n                };\n\n                initialize();\n\n            }\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/counter-party-filter.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    // @ngInject\n    exports.dynamicAriaLabel = function() {\n        return {\n            restrict: \"A\",\n            scope: {\n                \"contact\": \"=ariaContact\",\n                \"account\": \"=ariaAccount\"\n            },\n            link: function(scope, element) {\n\n                var ariaLabel = \"\";\n\n                ariaLabel += scope.contact.name + \" \";\n\n                if(scope.account.name) {\n                    ariaLabel += scope.account.name + \" \";\n                } else {\n                    var type = scope.account.type.toLowerCase();\n                    type = type.replace(\"_\", \" \");\n                    ariaLabel += type + \" \";\n                }\n\n                ariaLabel += scope.account.account;\n\n                element.attr(\"aria-label\", ariaLabel);\n            }\n        };\n    };\n});\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/dynamic-aria-label.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    // @ngInject\n    exports.dynamicFocus = function() {\n        return {\n            restrict: \"A\",\n            scope: {\n                \"contact\": \"=dynamicFocus\"\n            },\n            link: function(scope, element) {\n\n                if(scope.contact.accounts.length === 1) {\n                    element.attr(\"tabindex\", \"0\");\n                    element.attr(\"aria-label\", scope.contact.name + \" \" + scope.contact.accounts[0].type.toLowerCase() + \" \" + scope.contact.accounts[0].account);\n                }\n            }\n        };\n    };\n});\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/dynamic-focus.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    var base = require('base');\n    var angular = base.ng;\n    var lpCoreUtils = base.inject('lpCoreUtils', require('core').name);\n\n    // @ngInject\n    exports.emailTransfer = function($templateCache, transferTypes) {\n\n\t\t$templateCache.put(\"$emailTransferTemplate.html\",\n\t\t\t\t'<div class=\"lp-email-transfer\">' +\n\t\t\t\t\t'<div ng-class=\"{\\'email-input\\': true, \\'has-feedback\\': email.length > 0, \\'has-success\\': email.length > 0 && validEmail, \\'has-error\\': email.length > 0 && !validEmail}\">' +\n\t\t\t\t\t\t'<input type=\"input\" ng-model=\"email\" ng-keyup=\"handleAutoSuggest($event)\" placeholder=\"Email address\" class=\"form-control\" aria-label=\"Email Address\" />' +\n\t\t\t\t\t\t'<span ng-if=\"validEmail && email.length > 0\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' +\n\t\t\t\t\t\t'<span ng-if=\"!validEmail && email.length > 0\" ng-click=\"clear()\" style=\"cursor: pointer;\" class=\"glyphicon glyphicon-remove form-control-feedback\"></span>' +\n\t\t\t\t\t'</div>' +\n\t\t\t\t\t'<span ng-if=\"autoSuggestActive\">Did you mean <span ng-click=\"doAutoSuggest()\" class=\"auto-correct-suggestion\">{{autoSuggestion}}</span>?<br /></span>' +\n\t\t\t\t\t'<span class=\"text-muted\" style=\"font-size: 13px;\">' +\n\t\t\t\t\t\t'Transfers up to $10.00 will be free of charge. For transfers above $10.00 a fee of $0.25 per transaction will be charged and debited from your account' +\n\t\t\t\t\t'</span>' +\n\t\t\t\t'</div>'\n\t\t);\n\n\t\treturn {\n\t\t\trestrict: 'EA',\n\t\t\treplace: true,\n\t\t\trequire: [\"ngModel\", \"^form\"],\n\t\t\tscope: {\n\t\t\t\t\"email\": \"=ngModel\",\n\t\t\t\t\"transferType\": \"=lpTransferType\"\n\t\t\t},\n\t\t\ttemplate: $templateCache.get(\"$emailTransferTemplate.html\"),\n\t\t\tlink: function(scope, element, attrs, ctrls) {\n\n\t\t\t\tvar $inputElement;\n\n\t\t\t\t//Initial set up\n\t\t\t\t/**\n\t\t\t\t * intialisation function\n\t\t\t\t * @constructor\n\t\t\t\t */\n\t\t\t\tvar initialize = function() {\n\n\t\t\t\t\tscope.validEmail = false;\n\n\t\t\t\t\tscope.autoSuggestActive = false;\n\t\t\t\t\tscope.autoSuggestion = \"\";\n\n\t\t\t\t\t$inputElement = angular.element(element.find(\"input\")[0]);\n\n\t\t\t\t\t//initialize suggestions and map only once\n\t\t\t\t\tvar suggestions = {\n\t\t\t\t\t\tgmail: \"gmail\",\n\t\t\t\t\t\tyahoo: \"yahoo\",\n\t\t\t\t\t\tbackbase: \"backbase\"\n\t\t\t\t\t};\n\n\t\t\t\t\tscope.suggestionsMap = {\n\t\t\t\t\t\t\"gmaik\": suggestions.gmail,\n\t\t\t\t\t\t\"gmain\": suggestions.gmail,\n\t\t\t\t\t\t\"gmal\": suggestions.gmail,\n\t\t\t\t\t\t\"gmakl\": suggestions.gmail,\n\t\t\t\t\t\t\"mgail\": suggestions.gmail,\n\t\t\t\t\t\t\"yaho\": suggestions.yahoo,\n\t\t\t\t\t\t\"yahooo\": suggestions.yahoo,\n\t\t\t\t\t\t\"yagoo\": suggestions.yahoo,\n\t\t\t\t\t\t\"bakbase\": suggestions.backbase,\n\t\t\t\t\t\t\"backbas\": suggestions.backbase,\n\t\t\t\t\t\t\"baclbase\": suggestions.backbase\n\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t//controllers\n\t\t\t\tvar modelCtrl = ctrls[0], formCtrl = ctrls[1], associatedTransferType = transferTypes.p2pEmail;\n\n\t\t\t\tmodelCtrl.$name = attrs.name;\n\t\t\t\tformCtrl.$addControl(modelCtrl);\n\n\t\t\t\tmodelCtrl.$formatters.push(function(value) {\n\n\t\t\t\t\tif(value !== undefined || value !== null) {\n\t\t\t\t\t\t//validate email\n\t\t\t\t\t\tscope.validEmail = validateEmail(value ? value.toLowerCase() : \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif(value && value.indexOf(\"@\") === -1) {\n\t\t\t\t\t\t//no @ symbol, deactive suggestions\n\t\t\t\t\t\tscope.autoSuggestActive = false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn value;\n\t\t\t\t});\n\n\t\t\t\t//scope functions\n\t\t\t\tscope.clear = function() {\n\t\t\t\t\tscope.email = \"\";\n\t\t\t\t};\n\n\t\t\t\tscope.handleAutoSuggest = function(event) {\n\t\t\t\t\t//if the key was a period or a backspace\n\t\t\t\t\tvar temp, domain;\n\t\t\t\t\tif(event.which === 190) {\n\t\t\t\t\t\tif(scope.email.indexOf(\"@\") > -1) {\n\t\t\t\t\t\t\ttemp = scope.email.split(\"@\");\n\n\t\t\t\t\t\t\t//second half of email\n\t\t\t\t\t\t\tif(temp[1] && temp[1] !== \"\") {\n\n\t\t\t\t\t\t\t\tdomain = getDomainFromEmail(temp[1]);\n\n\t\t\t\t\t\t\t\tif(scope.suggestionsMap[domain] !== undefined) {\n\t\t\t\t\t\t\t\t\t//if it is a valid mapped suggestion\n\t\t\t\t\t\t\t\t\tscope.autoSuggestion = scope.suggestionsMap[domain];\n\t\t\t\t\t\t\t\t\tscope.autoSuggestActive = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if(event.originalEvent.toString() === \"[object KeyboardEvent]\" && event.which === 8) {\n\t\t\t\t\t\t//will keep autosuggest active until no valid suggestion available\n\t\t\t\t\t\tif(scope.email.indexOf(\"@\") > -1) {\n\t\t\t\t\t\t\ttemp = scope.email.split(\"@\");\n\n\t\t\t\t\t\t\tif (temp[1] && temp[1] !== \"\") {\n\n\t\t\t\t\t\t\t\tdomain = getDomainFromEmail(temp[1]);\n\n\t\t\t\t\t\t\t\tif (scope.suggestionsMap[domain] === undefined) {\n\n\t\t\t\t\t\t\t\t\tscope.autoSuggestion = \"\";\n\t\t\t\t\t\t\t\t\tscope.autoSuggestActive = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t};\n\n\t\t\t\tscope.doAutoSuggest = function() {\n\n\t\t\t\t\tvar temp = scope.email.split(\"@\");\n\n\t\t\t\t\tif(temp[1]) {\n\t\t\t\t\t\tvar domain = getDomainFromEmail(temp[1]);\n\n\t\t\t\t\t\t//replace corrected word\n\t\t\t\t\t\ttemp[1] = temp[1].replace(domain, scope.autoSuggestion);\n\n\t\t\t\t\t\t//rejoin full email together\n\t\t\t\t\t\tscope.email = temp.join(\"@\");\n\t\t\t\t\t\tscope.autoSuggestActive = false; //deactivate auto suggest\n\t\t\t\t\t\tscope.autoSuggestion = \"\";\n\t\t\t\t\t}\n\t\t\t\t};\n\n\n\t\t\t\t//other functions\n\t\t\t\tvar validateEmail = function(email) {\n\t\t\t\t\t//validate required\n\t\t\t\t\tif(email.length === 0 && scope.transferType === associatedTransferType) {\n\t\t\t\t\t\tmodelCtrl.$setValidity(\"emailRequired\", false);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if(scope.transferType === associatedTransferType) {\n\t\t\t\t\t\tmodelCtrl.$setValidity(\"emailRequired\", true);\n\n\t\t\t\t\t\t//validate email format\n\t\t\t\t\t\tvar result = lpCoreUtils.isValidEmail(email);\n\t\t\t\t\t\tmodelCtrl.$setValidity(\"validEmailRequired\", result);\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t//get the domain from the split email\n\t\t\t\tvar getDomainFromEmail = function(emailDomainAndTLD) {\n\n\t\t\t\t\tvar indexOfPeriod = emailDomainAndTLD.indexOf(\".\");\n\t\t\t\t\tvar domain;\n\n\t\t\t\t\tif(indexOfPeriod > -1) {\n\t\t\t\t\t\tdomain = emailDomainAndTLD.substring(0, indexOfPeriod);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdomain = emailDomainAndTLD;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn domain;\n\t\t\t\t};\n\n\t\t\t\t//watch the transfer type to activate or de-activate validation\n\t\t\t\tscope.$watch(\"transferType\", function(newValue, oldValue) {\n\n\t\t\t\t\tif(newValue !== associatedTransferType) {\n\t\t\t\t\t\tmodelCtrl.$setValidity(\"emailRequired\", true);\n\t\t\t\t\t\tmodelCtrl.$setValidity(\"validEmailRequired\", true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscope.validEmail = validateEmail(scope.email);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\n\n\t\t\t\tinitialize();\n\n\t\t\t}\n\t\t};\n\t};\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/email-transfer.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    /**\n     * Angular filter to put visual indicator between every set of 4 characters\n     */\n    exports.addSeperator = function() {\n\n        var visualIndicator = \" \";\n\n        //add spaces function\n        var addVisualIndicator = function(input) {\n            if(input.length === 4) {\n                input += visualIndicator;\n            }\n\n            return input;\n        };\n\n        return function(input) {\n            if(input) {\n\n                //remove all spaces from input\n                input = input.split(visualIndicator).join(\"\");\n                input = input.toUpperCase();\n\n                //split every 4 characters and remainder\n                var tempArray = input.match(/.{1,4}/g);\n                var newInput = \"\";\n\n                for(var i = 0; i < tempArray.length; i++) {\n                    if(i !== tempArray.length - 1) {\n                        tempArray[i] = addVisualIndicator(tempArray[i]);\n                    }\n\n                    //append new value to newInput\n                    newInput += tempArray[i];\n                }\n\n                return newInput;\n            }\n        };\n    };\n\n    /**\n     * Angular filter to put visual indicator between every set of 4 characters\n     */\n    exports.addSeperator = function() {\n\n        var visualIndicator = \" \";\n\n        //add spaces function\n        var addVisualIndicator = function(input) {\n            if(input.length === 4) {\n                input += visualIndicator;\n            }\n\n            return input;\n        };\n\n        return function(input) {\n            if(input) {\n\n                //remove all spaces from input\n                input = input.split(visualIndicator).join(\"\");\n                input = input.toUpperCase();\n\n                //split every 4 characters and remainder\n                var tempArray = input.match(/.{1,4}/g);\n                var newInput = \"\";\n\n                for(var i = 0; i < tempArray.length; i++) {\n                    if(i !== tempArray.length - 1) {\n                        tempArray[i] = addVisualIndicator(tempArray[i]);\n                    }\n\n                    //append new value to newInput\n                    newInput += tempArray[i];\n                }\n\n                return newInput;\n            }\n        };\n    };\n});\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/filters.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    var base = require('base');\n    var angular = base.ng;\n    var lpCoreUtils = base.inject('lpCoreUtils', require('core').name);\n\n    // @ngInject\n    exports.IbanModel = function(httpService) {\n\n        /**\n         * IbanModel constructor\n         */\n        var IbanModel = function(config) {\n\n            this.enableCountrySearch = config.enableCountrySearch;\n\n            this.countryListService = httpService.getInstance({\n                endpoint: config.countryListEndpoint\n            });\n\n            this.value = '';\n            this.valid = false;\n            this.countryList = [];\n            this.selectedCountry = {};\n        };\n\n        /**\n         * Loads the list of countries to use for the dropdown from a REST API\n         * Default URL: /services/rest/iban\n         */\n        IbanModel.prototype.loadCountryList = function() {\n            var self = this;\n\n            var xhr = self.countryListService.read();\n            xhr.then(function(response) {\n                self.countryList = response.data;\n            }, function() {\n                self.error = \"countryListServiceError\";\n            });\n\n            return xhr;\n        };\n\n        /**\n         * Function that returns the country code from the IBAN\n         * returns null if the country isn't in the countryList array\n         */\n        IbanModel.prototype.getCountryCode = function(value) {\n            var self = this,\n                countryCode = null,\n                iban = value || self.value;\n\n            if (iban.match(/^[A-Za-z]{2}/g)) {\n                var code = iban.substr(0, 2);\n                angular.forEach(self.countryList, function(value) {\n                    if (value.country_code === code.toUpperCase()) {\n                        countryCode = code;\n                        self.selectedCountry = value;\n                        return;\n                    }\n                });\n            }\n\n            return countryCode;\n        };\n\n        /**\n         * Update the IBAN string to have capitalized letters and remove any dashes, dots or spaces\n         * @param  {string} iban The IBAN string\n         */\n        IbanModel.prototype.normalizeIban = function(iban) {\n            if (iban) {\n                // change to uppercase\n                iban = iban.toUpperCase();\n                // strip out unneeded characters\n                iban = iban.replace(/[\\-\\. ]/g, '');\n            }\n\n            return iban || '';\n        };\n\n        /**\n         * Function that validates the IBAN value\n         * Order of checks executed:\n         *     1. checks for correct length\n         *     2. checks if it matches the regular expression\n         *     3. checks with the validateIbanChecksum function\n         */\n        IbanModel.prototype.validate = function() {\n\n            // Check if the IBAN has the correct length\n            if (this.value.length !== parseInt(this.selectedCountry.iban_length, 10)) {\n                this.valid = false;\n                return false;\n            }\n\n            // Check if the IBAN matches the regular expression\n            var regex = new RegExp(this.selectedCountry.iban_regex);\n            if (!regex.test(this.value)) {\n                this.valid = false;\n                return false;\n            }\n\n            if (!lpCoreUtils.isValidISO7064Checksum(this.value)) {\n                this.valid = false;\n                return false;\n            }\n\n            this.valid = true;\n            return true;\n        };\n\n        return {\n            getInstance: function(config) {\n                return new IbanModel(config);\n            }\n        };\n    };\n});\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/iban-model.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n\n    // @ngInject\n    var ctrlFn = function($scope) {\n        var initialize = function() {\n            $scope.wholeAmount = \"\";\n            $scope.decimalAmount = \"\";\n            $scope.amountInDomesticCurrency = \"0.00\";\n            $scope.fieldLength = 6;\n        };\n\n        initialize();\n    };\n\n    // @ngInject\n    exports.lpCurrencyAmountInput = function($templateCache) {\n        $templateCache.put(\"$currencyAmountTemplate.html\",\n                '<div class=\"lp-currency-amount-input\">' +\n                    '<div class=\"clearfix\">' +\n                        '<div class=\"select-area pull-left\">' +\n                            '<div class=\"currency-select\" ng-hide=\"lpDisableCurrencySelection\" dropdown-select=\"dropdown-select\" empty-placeholder-text=\"EUR\" ng-model=\"lpCurrencyList.selected\" options=\"val as val.currency_code group by val.group for val in lpCurrencyList.orderedCurrencies\" ng-hide=\"lpCurrencyList.error\" aria-required=\"true\" aria-label=\"currency\"></div>' +\n                            // Below line should be uncommented once we have a default currency service running\n                            //'<div class=\"default-currency\" ng-show=\"lpDisableCurrencySelection\">{{lpCurrencyList.defaultCurrency.currency_code}}</div>'+\n                        '</div>' +\n                        '<div class=\"amount-area pull-left\" ng-class=\"{\\'input-group\\': lpAmountLabel}\">' +\n                            '<span class=\"input-group-addon lp-amount-label\" ng-if=\"lpAmountLabel\">{{lpAmountLabel}}</span>' +\n                            '<input name=\"wholeAmountInput\" type=\"number\" lp-number-input=\"lp-number-input\" lp-max-length=\"fieldLength\" min=\"0\" step=\"1\" class=\"form-control whole-amount-input pull-left\" ng-model=\"wholeAmount\" placeholder=\"{{lpAmountPlaceholder || \\'Amount\\'}}\" aria-required=\"true\" aria-label=\"amount\" />' +\n                            '<div  class=\"pull-left decimal\"><span class=\"decimal-point\">.</span></div>' +\n                            '<input type=\"text\" pattern=\"[0-9]\" lp-number-input=\"lp-number-input\" lp-max-length=\"2\" min=\"0\" step=\"1\" class=\"form-control pull-left decimal-amount-input\" ng-model=\"decimalAmount\" placeholder=\"00\"  aria-required=\"true\" aria-label=\"decimal amount\" />' +\n                        '</div>' +\n                    '</div>' +\n                    '<div class=\"info\">' +\n                        '<div ng-hide=\"lpDisableCurrencySelection || lpCurrencyList.error || lpCurrencyList.selected === lpCurrencyList.defaultCurrency\" class=\"info-message\"><span class=\"text-muted\">This transfer is {{amountInDomesticCurrency}} in {{lpCurrencyList.defaultCurrency.currency_code}}<i class=\"lp-icon lp-icon-xxl lp-icon-info-sign open-popup\" ng-click=\"toggleExchangeRateModal()\"></i></span></div>' +\n                    '</div>' +\n                '</div>');\n\n        return {\n            restrict : \"EA\",\n            scope: {\n                \"amount\": \"=ngModel\",\n                \"lpCurrencyList\": \"=\",\n                \"lpPaymentOrder\": \"=\",\n                \"lpDisableCurrencySelection\": \"=\",\n                \"lpAmountLabel\": \"@\",\n                \"lpAmountPlaceholder\": \"@\",\n                \"toggleExchangeRateModal\": \"=modal\"\n            },\n            require: \"ngModel\",\n            replace: true,\n            controller: ctrlFn,\n            template: $templateCache.get(\"$currencyAmountTemplate.html\"),\n            link: function (scope, element, attrs, ctrl) {\n\n                var $decimalInput = element.find(\".decimal-amount-input\");\n\n                //cater for changes in model from outside of directive\n                ctrl.$formatters.push(function(value) {\n                    if (!value) {\n                        return value;\n                    }\n\n                    var valueToCheck = formatAmount();\n\n                    if(value !== \"0.00\" && value !== '' && value !== valueToCheck) {\n                        var tempAmountArray = value.split(\".\");\n                        scope.wholeAmount = parseInt(tempAmountArray[0], 10);\n\n                        if(tempAmountArray[1] !== \"00\") {\n                            scope.decimalAmount = tempAmountArray[1];\n                        }\n                    }\n                    return value;\n                });\n\n                //Updates the current amount entered in domestic currency\n                var updateAmountInDomesticCurrency = function() {\n                    var amount = scope.amount;\n\n                    amount = amount / scope.lpCurrencyList.selected.exchange_rate;\n                    amount = fixFloatDecimal(amount);\n\n                    scope.amountInDomesticCurrency = amount;\n                };\n\n                //Parses values in text fields and sets the paymentOrder.instructedAmount\n                var updatePaymentOrderModelAmount = function() {\n\n                    var amount = formatAmount();\n\n                    var instructedAmount = parseInt(scope.wholeAmount, 10);\n\n                    if (scope.fieldLength && instructedAmount.toString().length > scope.fieldLength) {\n                        ctrl.$setValidity(\"lpCurrencyMaxLength\", false);\n                    } else {\n                        ctrl.$setValidity(\"lpCurrencyMaxLength\", true);\n                    }\n\n                    if(amount === \"0.00\") {\n                        ctrl.$setValidity(\"lpAmountRequired\", false);\n                    } else if(amount.length > 0){\n                        ctrl.$setValidity(\"lpAmountRequired\", true);\n                    }\n\n                    scope.amount = amount;\n\n                    //if the currencyService loaded succesfully\n                    if (scope.lpCurrencyList && scope.lpCurrencyList.orderedCurrencies.length > 0) {\n                        updateAmountInDomesticCurrency();\n                    }\n                };\n\n                var formatAmount = function() {\n\n                    var decimal = scope.decimalAmount;\n                    var instructedAmount = parseInt(scope.wholeAmount, 10);\n                    var leadingZero = /^0[0-9].*$/\n                    instructedAmount = isNaN(instructedAmount) ? 0 : instructedAmount;\n\n                    //assign the correct decimal value to a decimal lower than 10\n\t\t    if(decimal < 10 && !leadingZero.test(decimal)) {\n                        decimal = \"0\" + decimal;\n                    }\n\n                    decimal = parseFloat(\"0.\" + decimal);\n\n                    var amount = decimal === 0 ? instructedAmount  : instructedAmount + decimal;\n                    amount = fixFloatDecimal(amount);\n                    return amount;\n                };\n\n                var fixFloatDecimal = function(value) {\n\n                    return value.toFixed(2);\n                };\n\n                //Sets the instructedCurrency\n                var setCurrency = function() {\n                    scope.lpPaymentOrder.instructedCurrency = scope.lpCurrencyList.selected.currency_code;\n                    handleFieldLengthUpdate();\n                };\n\n                //updates amount field length, instructedAmount and amountInDomestic based on exchange rate of selected currency\n                var handleFieldLengthUpdate = function() {\n\n                    var oldFieldLength = scope.fieldLength;\n                    scope.fieldLength = scope.lpCurrencyList.selected.exchange_rate > 2.0 ? 8 : 6;\n\n                    //if the field length has shrunk, make sure the instructedAmount and amountInDomestic updates\n                    if(oldFieldLength > scope.fieldLength && scope.wholeAmount.toString().length > 6) {\n                        scope.wholeAmount = parseInt(scope.wholeAmount.toString().substring(0, 6), 10);\n                        updatePaymentOrderModelAmount();\n                    } else if(scope.wholeAmount !== \"\" || scope.decimalAmount !== \"\") { //if not blank, just update amountInDomestic\n                        updateAmountInDomesticCurrency();\n                    }\n                };\n\n                //Apply updated instructedAmount to lpPaymentOrder\n                scope.$watchCollection('[wholeAmount, decimalAmount]', function(newValue) {\n                    if(newValue[0]) {\n                        //if the change contains a decimal, focus on decimal input\n                        if (newValue[0].toString().indexOf(\".\") > -1) {\n                            scope.wholeAmount = parseInt(scope.wholeAmount.toString().replace(\".\", \"\"), 10);\n                            $decimalInput.focus();\n                        }\n                    }\n\n                    updatePaymentOrderModelAmount();\n                });\n\n                //update currency\n                scope.$watch(\"lpCurrencyList.selected\", function() {\n                    //prevent unneccessary setting of Currency\n                    if (scope.lpCurrencyList && scope.lpCurrencyList.selected && scope.lpCurrencyList.orderedCurrencies.length > 1) {\n                        setCurrency();\n                    }\n                });\n\n                //listen for succesful form submission and reset values to default\n                scope.$on(\"reset\", function() {\n                    scope.wholeAmount = \"\";\n                    scope.decimalAmount = \"\";\n                    scope.amountInDomesticCurrency = \"0.00\";\n                    scope.fieldLength = 6;\n                });\n            }\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/lp-currency-amount-input.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    // @ngInject\n    exports.lpFormatPaymentReference = function($filter) {\n        return {\n            restrict: 'A',\n            require: 'ngModel',\n            link: function(scope, element, attrs, ctrl) {\n\n                var addSeperatorAndRF = function(input) {\n                    //automatically add RF to start of reference if not present\n                    if(input && input.length > 2) {\n                        var sub = input.substring(0, 2);\n\n                        if(sub !== \"RF\") {\n                            input = \"RF\" + input;\n                        }\n                    }\n\n                    //filter input with spaces\n                    var filtered = $filter('addSeperator')(input);\n\n                    if(filtered !== input) {\n\n                        ctrl.$setViewValue(filtered);\n                        ctrl.$render();\n                    }\n\n                    return filtered;\n                };\n\n                ctrl.$parsers.push(addSeperatorAndRF);\n            }\n        };\n    };\n\n    // @ngInject\n    var ctrlFn = function($scope) {\n\n        var initialize = function() {\n            $scope.paymentReference = \"\";\n            $scope.paymentDescription = \"\";\n\n            $scope.showInfoMessage = false;\n\n            $scope.paymentRefDisabled = false;\n            $scope.paymentDescDisabled = false;\n        };\n\n        initialize();\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/lp-format-payment-reference.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    /**\n     * Angular directive to hook filter into ng-model\n     */\n\n    // @ngInject\n    exports.lpFormatUsAccount = function($filter) {\n        return {\n            restrict: 'A',\n            require: 'ngModel',\n            link: function(scope, element, attrs, ctrl) {\n\n                var addSeperator = function(input) {\n\n                    //filter input with spaces\n                    var filtered = $filter('addSeperator')(input);\n\n                    if(filtered !== input) {\n\n                        ctrl.$setViewValue(filtered);\n                        ctrl.$render();\n                    }\n\n                    return filtered;\n                };\n\n                ctrl.$parsers.push(addSeperator);\n            }\n        };\n    };\n});\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/lp-format-us-account.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    var $ = window.jQuery;\n    var base = require('base');\n    var angular = base.ng;\n    var lpUIUtils = base.inject('lpUIUtils', require('ui').name);\n\n    /**\n     * TODO: Refactor this directive to not require a widget instance.\n     */\n\n    // @ngInject\n    exports.lpIbanInput = function($templateCache, $timeout, IbanModel, widget) {\n\n        $templateCache.put('$ibanCountryOptionTemplate.html',\n            '<span aria-label=\"{{option.country_name}}\">{{option.country_code}}<span class=\"country-name\"> - {{option.country_name}}</span></span>'\n        );\n\n        return {\n            restrict: 'EA',\n            replace: true,\n            require: ['ngModel', '^form'],\n            scope: {\n                ibanModel: '=lpCountryList',\n                transferType: '=lpTransferType'\n            },\n            template:\n                '<div>' +\n                '<div class=\"lp-iban\">' +\n                '<div class=\"lp-iban-country-dropdown\">' +\n                '<div dropdown-select=\"dropdown-select\" empty-placeholder-text=\"NL\" name=\"ibaneDropdownField\" ng-model=\"iban.selectedCountry\" options=\"country.country_code as country for country in ibanModel.countryList\" ' +\n                'filter=\"ibanModel.enableCountrySearch\" filter-placeholder-text=\"Search country\" ng-change=\"change()\" ' +\n                'option-template-url=\"$ibanCountryOptionTemplate.html\" aria-label=\"iban country code\">' +\n                '</div>' +\n                '</div>' +\n                '<div class=\"lp-iban-input\" ng-class=\"{\\'has-success\\': ibanModel.valid && iban.value.length, \\'has-error\\': !ibanModel.valid && iban.value.length,  \\'has-feedback\\': iban.value.length}\">' +\n                '<input name=\"ibanInputField\" ng-required=\"transferType === \\'BANK\\'\" type=\"input\" class=\"form-control\" lp-input-overflow=\"lp-input-overflow\" ng-model=\"iban.value\"  aria-required=\"true\" ' +\n                'ng-keydown=\"getSelection($event)\" ng-keypress=\"getSelection($event)\" ' +\n                'ng-mousedown=\"getSelection($event)\" ng-mouseup=\"getSelection($event)\" ' +\n                'ng-change=\"change()\" tabindex=\"0\" ' +\n                'placeholder=\"Enter IBAN or Account Number\" aria-label=\"Enter IBAN or Account Number\">' +\n                '<span ng-if=\"ibanModel.valid && iban.value.length\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' +\n                '<span ng-if=\"!ibanModel.valid && iban.value.length\" ng-click=\"clear()\" class=\"glyphicon glyphicon-remove form-control-feedback\"></span>' +\n                '</div>' +\n                '</div>' +\n                '<span class=\"text-muted\">{{testiban}}</span>' +\n                '</div>',\n            link: function(scope, element, attrs, ctrls) {\n\n                var ngModelCtrl = ctrls[0],\n                    formCtrl = ctrls[1],\n                    input = element.find('input')[0],\n                    textSelection = [],\n                    isBackspace = false,\n                    lengthDiff = 0,\n                    $element = $(element[0]),\n                    associatedTransferType = \"BANK\";\n\n                // make the country code search to be focused when using keyboard\n                $element.find('div[name=\"ibaneDropdownField\"]').on('keypress', function(e) {\n                    // open dropdown after pressing Enter key\n                    if (e.which === 13) {\n                        $timeout(function() {\n                            $element.find('input[type=\"search\"]').focus();\n                        });\n                    }\n                });\n\n                scope.iban = {};\n\n                // add control using the name attribute to the form controller to track validity\n                ngModelCtrl.$name = attrs.name;\n                formCtrl.$addControl(ngModelCtrl);\n\n                scope.$watch('ibanModel.countryList', function (newValue) {\n                    scope.change(true);\n                    if (scope.ibanModel.countryList.length && !scope.iban.selectedCountry) {\n                        scope.iban.selectedCountry = scope.ibanModel.countryList[0].country_code;\n                    }\n                });\n\n                ngModelCtrl.$formatters.push(function(value) {\n\n                    scope.ibanModel.value = value;\n                    scope.iban.value = addDashes(value);\n\n                    var country = scope.ibanModel.getCountryCode();\n                    scope.ibanModel.validate();\n                    if (country) {\n                        scope.change(true);\n                    }\n\n                    var isValid = country ? scope.ibanModel.valid : false;\n\n                    ngModelCtrl.$setValidity('validIban', isValid);\n\n                    return value;\n                });\n\n                // set validity of the model value\n                ngModelCtrl.$parsers.push(function(value) {\n                    var isValid = scope.ibanModel.getCountryCode() ? scope.ibanModel.validate() : false;\n\n                    doValidation(value);\n\n                    return isValid ? value : undefined;\n                });\n\n                // Create a hidden span to calculate the cursor position in pixels\n                var $partialText = $(document.createElement('span'));\n                $partialText.addClass('lp-input-cursor-position-offset');\n                $partialText.css('font-size', element.css('font-size'));\n                $(input).after($partialText);\n\n                //Do validation on IBAN\n                var doValidation = function(newValue) {\n                    if(newValue !== associatedTransferType) {\n                        ngModelCtrl.$setValidity(\"validIban\", true);\n                        ngModelCtrl.$setValidity(\"required\", true);\n                        ngModelCtrl.$setValidity(\"parse\", true);\n                    } else {\n                        var isValid = scope.ibanModel.getCountryCode() ? scope.ibanModel.validate() : false;\n                        ngModelCtrl.$setValidity('validIban', isValid);\n                    }\n                };\n\n                // Split up the IBAN into groups of 4 characters separated by dashes\n                var addDashes = function(iban) {\n                    var ibanArray = [];\n\n                    ibanArray.push(iban.substr(0, 2));\n                    iban = iban.substr(2);\n                    while (iban.length > 0) {\n                        ibanArray.push(iban.substr(0, 4));\n                        iban = iban.substr(4);\n                    }\n\n                    return ibanArray.join('-');\n                };\n\n                /**\n                 * Set the correct cursor position after adding the separator\n                 */\n                scope.setCursorPosition = function() {\n\n                    var cursorPosition = lpUIUtils.getNewCaretPosition(input, textSelection, lengthDiff, isBackspace);\n                    isBackspace = false;\n\n                    // add the separators to the cursor position\n                    if (cursorPosition > 2) {\n                        cursorPosition++;\n                        if (cursorPosition > 6) {\n                            var temp = (cursorPosition - 3) / 4;\n                            if (parseInt(temp, 10) === temp) {\n                                cursorPosition--;\n                            }\n                            cursorPosition += parseInt(temp, 10);\n                        }\n                    }\n\n                    $timeout(function() {\n                        lpUIUtils.setCaretPositionOfInput(input, cursorPosition, scope.paymentReference, $partialText);\n                    }, 20, false);\n                };\n\n                /**\n                 * Function that stores the selection start and end values\n                 * @param  {event} event Either the Keyboard or the Mouse Event\n                 */\n                scope.getSelection = function(event) {\n\n                    var noDashSelection = function(select) {\n                        var selectionDiff = 0,\n                            temp = select;\n\n                        if (temp > 2) {\n                            temp -= 3;\n                            selectionDiff++;\n                        }\n                        selectionDiff += parseInt(temp / 5, 10);\n\n                        return select - selectionDiff;\n                    };\n\n                    // get the selection start and end values\n                    textSelection = lpUIUtils.getSelectionPositionOfInput(input, noDashSelection);\n\n                    if (event.originalEvent.toString() === '[object KeyboardEvent]') {\n                        // handle backspace\n                        if (event.originalEvent.which === 8 && input.value.length) {\n                            isBackspace = true;\n                        }\n                    }\n                };\n\n                scope.clear = function() {\n                    scope.iban.value = '';\n                    input.focus();\n                };\n\n                scope.change = function(dontFocus) {\n\n                    if (scope.ibanModel.value !== scope.ibanModel.normalizeIban(scope.iban.selectedCountry + scope.iban.value)) {\n                        var newValue = scope.ibanModel.normalizeIban(scope.iban.value);\n                        if (!scope.ibanModel.getCountryCode(newValue)) {\n                            newValue = scope.iban.selectedCountry + newValue;\n                        }\n\n                        // save the difference of length between the new and old values for later use\n                        lengthDiff = newValue.length - scope.ibanModel.value.length;\n\n                        // set the new value\n                        scope.ibanModel.value = newValue;\n                        ngModelCtrl.$setViewValue(newValue);\n                    }\n\n                    // if the first 2 characters of the input field are a valid IBAN country code\n                    // update both fields\n                    var countryCode = scope.ibanModel.getCountryCode();\n                    if (countryCode) {\n                        if (countryCode !== scope.iban.selectedCountry) {\n                            scope.iban.selectedCountry = countryCode;\n                            // add visual feedback for the country code change\n                            $(element.find('button')[0]).addClass('lp-country-dropdown-update');\n                            $timeout(function() {\n                                $(element.find('button')[0]).removeClass('lp-country-dropdown-update');\n                            }, 200, false);\n                        }\n                        // remove the country code from the input field value\n                        scope.iban.value = scope.ibanModel.value.substr(2);\n                    }\n\n                    // add the separator to the input field value\n                    scope.iban.value = addDashes(scope.ibanModel.normalizeIban(scope.iban.value));\n                    if (!dontFocus) {\n                        // move the cursor to the right position\n                        scope.setCursorPosition();\n                    }\n\n                    /*scope.testiban2 = scope.iban.selectedCountry + '' + scope.iban.value;\n                    scope.testiban = '';\n                    while (scope.testiban2.length > 4) {\n                        scope.testiban += scope.testiban2.substr(0, 4) + '-';\n                        scope.testiban2 = scope.testiban2.substr(4);\n                    }\n                    scope.testiban += scope.testiban2 ? scope.testiban2 : '';*/\n                };\n\n\n                //Turn validation on/off based on which tranfer type is selected\n                scope.$watch(\"transferType\", function(newValue, oldValue) {\n                    doValidation(newValue);\n                });\n\n                doValidation(scope.transferType);\n            }\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/lp-iban-input.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    // @ngInject\n    exports.lpInputCurrency = function(currencyMaxLength) {\n        return {\n            restrict: 'A',\n            require: 'ngModel',\n            link: function($scope, $element, $attrs, ctrl) {\n                var regex = /^\\d+((\\.|\\,)\\d+)?$/;\n\n\n                var setValidity = function(isValidFormat, isNonZero, isMaxLength) {\n                    ctrl.$setValidity('lpCurrencyFormat', isValidFormat);\n\n                    if (!isValidFormat) {\n                        // If format is not valid then more rules don't mean anything\n                        isNonZero = true;\n                        isMaxLength = true;\n                    }\n\n                    ctrl.$setValidity('lpCurrencyNonZero', isNonZero);\n                    ctrl.$setValidity('lpCurrencyMaxLength', isMaxLength);\n                };\n\n                ctrl.$parsers.unshift(function(value) {\n                    if (value) {\n                        value = value.replace(\",\", \".\");\n                        setValidity(regex.test(value), parseFloat(value) !== 0, value.length < currencyMaxLength);\n                    } else {\n                        // Don't make any currency validation for empty value\n                        setValidity(true, true, true);\n                    }\n                    return value;\n                });\n            }\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/lp-input-currency.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    var base = require('base');\n    var lpUIUtils = base.inject('lpUIUtils', require('ui').name);\n    var lpCoreUtils = base.inject('lpCoreUtils', require('core').name);\n\n    // @ngInject\n    exports.lpPaymentRefDescription = function ($templateCache, $timeout, $filter) {\n        $templateCache.put(\"$paymentRefDescription.html\", '<div class=\"lp-payment-ref-description\">' +\n            '<div ng-hide=\"hidePaymentReference\" class=\"lp-payment-reference\" ng-class=\"{\\'has-success\\': isValid && paymentReference.length > 0, \\'has-error\\': !isValid && paymentReference.length > 0,  \\'has-feedback\\': paymentReference.length}\">' +\n            '<input  class=\"form-control\" aria-label=\"payment reference\" lp-payment-reference-field\" type=\"text\" placeholder=\"Payment reference (optional)\" maxlength=\"31\" ng-model=\"paymentReference\" ng-disabled=\"paymentRefDisabled\" ' +\n                'lp-input-overflow=\"lp-input-overflow\" ' +\n                'ng-keydown=\"getSelection($event)\" ng-keypress=\"getSelection($event)\" ' +\n                'ng-mousedown=\"getSelection($event)\" ng-mouseup=\"getSelection($event)\" ' +\n                'lp-format-payment-reference=\"lp-format-payment-reference\" />' +\n            '<span ng-if=\"isValid && paymentReference.length\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' +\n            '<span ng-click=\"clearRef()\" ng-if=\"!isValid && paymentReference.length\" class=\"glyphicon glyphicon-remove form-control-feedback\"></span>' +\n            '<div class=\"lp-input-dividers clearfix\">' +\n            '<div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div>' +\n            '</div>' +\n            '</div>' +\n            '<div class=\"lp-payment-description\">' +\n            '<textarea aria-label=\"payment description\" class=\"form-control lp-payment-description-area\" placeholder=\"Description (optional) Maximum number of characters is 140\" maxlength=\"140\" ng-model=\"paymentDescription\" ng-disabled=\"paymentDescDisabled\"></textarea>' +\n            '</div>' +\n            '<div ng-if=\"!hidePaymentReference\" class=\"hover-catcher\" ng-class=\"{refDisabled: paymentRefDisabled, descDisabled: paymentDescDisabled}\" tooltip-placement=\"top\" tooltip=\"You can only provide a Payment Reference or a Payment Description, not both.\"></div>' +\n            '</div>');\n\n        return {\n            restrict : \"AE\",\n            replace: true,\n            require: [\"ngModel\", \"^form\"],\n            scope: {\n                \"paymentOrder\": \"=ngModel\",\n                \"hidePaymentReference\": \"=\"\n            },\n            template: $templateCache.get(\"$paymentRefDescription.html\"),\n            link: function (scope, element, attrs, ctrls) {\n\n                var ngModelCtrl = ctrls[0],\n                    formCtrl = ctrls[1];\n                var $paymentReference = element.find(\"input\");\n                var $hoverCatcher = element.find(\".hover-catcher\");\n                var $paymentDescription = element.find(\"textarea\");\n                var input = $paymentReference[0],\n                    textSelection = [],\n                    isBackspace = false,\n                    lengthDiff = 0;\n\n                // add control using the name attribute to the form controller to track validity\n                ngModelCtrl.$name = attrs.name;\n                // formCtrl.$addControl(ngModelCtrl);\n\n                var $partialText = $(document.createElement('span'));\n                $partialText.addClass('lp-input-cursor-position-offset');\n                $partialText.css('font-size', element.css('font-size'));\n                $(input).after($partialText);\n\n\n                //populate with preloaded data\n                if(scope.paymentOrder.paymentReference !== \"\") {\n                    scope.paymentReference = $filter(\"addSeperator\")(scope.paymentOrder.paymentReference);\n                    scope.paymentDescDisabled = true;\n                } else if(scope.paymentOrder.paymentDescription !== \"\") {\n                    scope.paymentDescription = scope.paymentOrder.paymentDescription;\n                    scope.paymentRefDisabled = true;\n                }\n\n                //treat deactivation if payment ref is hidden\n                if(scope.hidePaymentReference) {\n                    scope.paymentDescDisabled = false;\n                }\n\n                //normalizes payment ref input\n                var normalize = function(input) {\n                    return input.split(\" \").join(\"\");\n                };\n\n                //validates the payment ref based on length and ISO 7064\n                var validatePaymentRef = function(input) {\n\n                    var valid = true;\n\n                    //validates length\n                    if(input.length > 25) {\n                        valid = false;\n                    }\n\n                    if(!input.match(/^RF\\d{2}/)) {\n                        valid = false;\n                    }\n\n                    //validates input based on checksum\n                    if(!lpCoreUtils.isValidISO7064Checksum(input)) {\n                        valid = false;\n                    }\n\n                    return valid;\n                };\n\n                scope.toggleInfoMessage = function() {\n                    scope.showInfoMessage = !scope.showInfoMessage;\n                };\n\n\n                /**\n                 * Set the correct cursor position after adding the separator\n                 */\n                scope.setCursorPosition = function() {\n\n                    var cursorPosition = lpUIUtils.getNewCaretPosition(input, textSelection, lengthDiff, isBackspace);\n\n                    isBackspace = false;\n\n                    // add the separators to the cursor position\n                    if (cursorPosition > 4) {\n                        var temp = cursorPosition / 4;\n                        if (parseInt(temp, 10) === temp) {\n                            cursorPosition--;\n                        }\n                        cursorPosition += parseInt(temp, 10);\n                    }\n\n                    $timeout(function() {\n                        lpUIUtils.setCaretPositionOfInput(input, cursorPosition, scope.paymentReference, $partialText);\n                    }, 20, false);\n                };\n\n                /**\n                 * Function that stores the selection start and end values\n                 * @param  {event} event Either the Keyboard or the Mouse Event\n                 */\n                scope.getSelection = function(event) {\n\n                    var noSeparatorSelection = function(select) {\n                        var selectionDiff = 0;\n\n                        selectionDiff += parseInt(select / 5, 10);\n\n                        return select - selectionDiff;\n                    };\n\n                    textSelection = lpUIUtils.getSelectionPositionOfInput(input, noSeparatorSelection);\n\n                    if (event.originalEvent.toString() === '[object KeyboardEvent]') {\n                        // handle backspace\n                        if (event.originalEvent.which === 8 && input.value.length) {\n                            isBackspace = true;\n                        }\n                    }\n                };\n\n                scope.clearRef = function() {\n                    scope.paymentReference = \"\";\n                    input.focus();\n                };\n\n                scope.$watch('paymentReference', function(newValue, oldValue) {\n\n                    if(oldValue === newValue) {\n                        return;\n                    }\n\n                    if (!oldValue) {\n                        oldValue = '';\n                    }\n\n                    //if this field is empty, reactivate other field\n                    if(!newValue) {\n                        ngModelCtrl.$modelValue.paymentReference = \"\";\n                        scope.paymentDescDisabled = false;\n                        formCtrl.$removeControl(ngModelCtrl);\n                    } else if(newValue.length > 0) {\n\n                        if (!formCtrl[ngModelCtrl.$name]) {\n                            formCtrl.$addControl(ngModelCtrl);\n                        }\n\n                        //validation performed here\n                        var normalizedPaymentRef = normalize(newValue);\n                        scope.isValid = validatePaymentRef(normalizedPaymentRef);\n                        ngModelCtrl.$setValidity('validRef', scope.isValid);\n\n                        if (oldValue) {\n                            lengthDiff = normalizedPaymentRef.length - normalize(oldValue).length;\n                        } else {\n                            lengthDiff = normalizedPaymentRef.length;\n                        }\n\n                        scope.paymentDescDisabled = true;\n                        ngModelCtrl.$modelValue.paymentReference = normalizedPaymentRef;\n\n                        // scope.setCursorPosition();\n                    }\n                    scope.setCursorPosition();\n                }, true);\n\n                scope.$watch('paymentDescription', function(newValue, oldValue) {\n\n                    if(oldValue === newValue) {\n                        return;\n                    }\n\n                    //if this field is empty, reactivate other field\n                    if(!newValue) {\n                        scope.paymentRefDisabled = false;\n                        ngModelCtrl.$modelValue.paymentDescription = \"\";\n                    } else if(newValue.length > 0) {\n                        scope.paymentRefDisabled = true;\n                        ngModelCtrl.$modelValue.paymentDescription = newValue;\n                    }\n                }, true);\n\n                scope.$on(\"reset\", function() {\n\n                    scope.paymentReference = \"\";\n                    scope.paymentDescription = \"\";\n\n                    scope.showInfoMessage = false;\n\n                    scope.paymentRefDisabled = false;\n                    scope.paymentDescDisabled = false;\n                });\n            }\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/lp-payment-ref-description.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    // @ngInject\n    exports.nonZero =function() {\n        return {\n            restrict: \"A\",\n            require: \"ngModel\",\n            link: function (scope, element, attrs, ngModelCtrl) {\n                ngModelCtrl.$parsers.unshift(function(value) {\n                    ngModelCtrl.$setValidity(\"nonZero\", parseInt(value, 10) !== 0);\n                    return value;\n                });\n            }\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/non-zero.js\n **/","define(function(require, exports, module) {\n\t'use strict';\n\n    var base = require('base');\n    var lpCoreUtils = base.inject('lpCoreUtils', require('core').name);\n\n    // @ngInject\n    exports.p2pEnrollment = function($templateCache, transferTypes) {\n\n\t\t$templateCache.put(\"$emailTemplate.html\",\n\t\t\t\t'<div class=\"lp-p2p-enrollment\">' +\n\t\t\t\t\t'<p class=\"warning\">We also need a few details from you to make the transfer</p>' +\n\t\t\t\t\t'<div lp-accounts-select=\"lp-accounts-select\" designated-class=\"lp-normal-account-select-size\" ng-model=\"p2pRegistration.p2pAccount\" lp-accounts=\"accounts\" name=\"p2pAccountSelect\" ng-change=\"onP2PAccountChange()\"></div>' +\n\t\t\t\t\t'<ul tabset=\"tabset\" class=\"nav-tabs\">' +\n\t\t\t\t\t\t'<li tab=\"tab\">' +\n\t\t\t\t\t\t\t'<span tab-heading=\"tab-heading\" class=\"tab-heading\">Email</span>' +\n\t\t\t\t\t\t\t'<div ng-class=\"{\\'email-input-form\\': true, \\'has-feedback\\': enrollment.email.length > 0, \\'has-success\\': enrollment.email.length > 0 && validEmail, \\'has-error\\': enrollment.email.length > 0 && !validEmail}\">' +\n\t\t\t\t\t\t\t\t'<input type=\"input\" class=\"form-control\" ng-model=\"enrollment.email\" placeholder=\"Confirm your email\" ng-change=\"onEmailChange()\" aria-label=\"Email Address\"/>' +\n\t\t\t\t\t\t\t\t'<span ng-if=\"validEmail && enrollment.email.length > 0\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' +\n\t\t\t\t\t\t\t\t'<span ng-if=\"!validEmail && enrollment.email.length > 0\" ng-click=\"clearEmail()\" style=\"cursor: pointer;\" class=\"glyphicon glyphicon-remove form-control-feedback\"></span>' +\n\t\t\t\t\t\t\t'</div>' +\n\t\t\t\t\t\t'</li>' +\n\t\t\t\t\t'</ul>' +\n\t\t\t\t\t'<div class=\"ts-and-cs\">' +\n\t\t\t\t\t\t'<div lp-custom-checkbox=\"\" ng-model=\"p2pRegistration.userAgrees\" ng-change=\"onAgreementChange()\" aria-label=\"{{\\'Do you agree with terms and conditions?\\' | translate}}\">' +\n\t\t\t\t\t\t\t'<span style=\"display:inline-block\" lp-i18n=\"By registering this mobile number or email address, I agree that I am the email or mobile account holder, and I consent to receive email and automated text message about transfers at this time. Fees from carrier may apply\"></span>' +\n\t\t\t\t\t\t'</div>' +\n\t\t\t\t\t'</div>' +\n\t\t\t\t'</div>'\n\t\t);\n\n\t\treturn {\n\t\t\trestrict: 'EA',\n\t\t\treplace: true,\n\t\t\trequire: [\"ngModel\", \"^form\"],\n\t\t\tscope: {\n\t\t\t\t'accounts': '=lpAccounts',\n\t\t\t\t'enrollment': '=ngModel',\n\t\t\t\t'transferType': '=lpTransferType'\n\t\t\t},\n\t\t\ttemplate: $templateCache.get(\"$emailTemplate.html\"),\n\t\t\tlink: function(scope, element, attrs, ctrls) {\n\n\t\t\t\t//Initial set up\n\t\t\t\tvar modelCtrl = ctrls[0], formCtrl = ctrls[1];\n\t\t\t\tmodelCtrl.$name = attrs.name;\n\t\t\t\tformCtrl.$addControl(modelCtrl);\n\n\t\t\t\tvar associatedTransferTypes = [\n\t\t\t\t\ttransferTypes.p2pEmail,\n\t\t\t\t\ttransferTypes.p2pMobile,\n\t\t\t\t\ttransferTypes.p2pAddress\n\t\t\t\t];\n\t\t\t\t/**\n\t\t\t\t * intialisation function\n\t\t\t\t * @constructor\n\t\t\t\t */\n\t\t\t\tvar initialize = function() {\n\n\t\t\t\t\tscope.p2pRegistration = {\n\t\t\t\t\t\tp2pAccount: {},\n\t\t\t\t\t\tuserAgrees: false\n\t\t\t\t\t};\n\t\t\t\t\tsetDefaultValidation(scope.transferType);\n\t\t\t\t};\n\n\n\t\t\t\t//scope functions\n\t\t\t\tscope.clearEmail = function() {\n\t\t\t\t\tscope.enrollment.email = \"\";\n\t\t\t\t};\n\n\t\t\t\tscope.onP2PAccountChange = function() {\n\t\t\t\t\tscope.enrollment.receivingAccountNumber = scope.p2pRegistration.p2pAccount.identifier;\n\t\t\t\t\tmodelCtrl.$setValidity(\"p2pAccountRequired\", true);\n\t\t\t\t};\n\n\t\t\t\tscope.onEmailChange = function() {\n\t\t\t\t\tvalidateEmail();\n\t\t\t\t};\n\n\t\t\t\tscope.onAgreementChange = function() {\n\t\t\t\t\tmodelCtrl.$setValidity(\"termsAndConditions\", scope.p2pRegistration.userAgrees);\n\t\t\t\t};\n\n\t\t\t\t//other functions\n\t\t\t\t/*scope.$watch(\"accounts\", function(newValue, oldValue) {\n\t\t\t\t\t//set the default selection and default enrollment account\n\t\t\t\t\tif(newValue) {\n\t\t\t\t\t\tif(scope.enrollment) {\n\t\t\t\t\t\t\tscope.enrollment.receivingAccountNumber = newValue[0].identifier;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tscope.p2pRegistration.p2pAccount = newValue[0];\n\t\t\t\t\t}\n\t\t\t\t});*/\n\n\t\t\t\tscope.$watch(\"transferType\", function(newValue, oldValue) {\n\n\t\t\t\t\tif(newValue === oldValue) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tsetDefaultValidation(newValue);\n\t\t\t\t});\n\n\t\t\t\tvar validateEmail = function() {\n\n\t\t\t\t\tvar result;\n\t\t\t\t\tif(scope.enrollment) {\n\t\t\t\t\t\tresult = lpCoreUtils.isValidEmail(scope.enrollment.email);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = lpCoreUtils.isValidEmail(\"\");\n\t\t\t\t\t}\n\n\t\t\t\t\tmodelCtrl.$setValidity(\"validEmailRequired\", result);\n\n\t\t\t\t\tscope.validEmail = result;\n\t\t\t\t};\n\n\t\t\t\tvar setDefaultValidation = function(value) {\n\t\t\t\t\t//do we need to validate? Check new transfer type against associated transfer types\n\t\t\t\t\tvar found = false;\n\t\t\t\t\tfor(var i = 0; i < associatedTransferTypes.length; i++) {\n\t\t\t\t\t\tif(value === associatedTransferTypes[i]) {\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(found) {\n\t\t\t\t\t\t//yes, we need to validate\n\t\t\t\t\t\tmodelCtrl.$setValidity(\"termsAndConditions\", scope.p2pRegistration.userAgrees);\n\t\t\t\t\t\tvalidateEmail();\n\t\t\t\t\t\tmodelCtrl.$setValidity(\"p2pAccountRequired\", false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//no, we don't\n\t\t\t\t\t\tmodelCtrl.$setValidity(\"termsAndConditions\", true);\n\t\t\t\t\t\tmodelCtrl.$setValidity(\"validEmailRequired\", true);\n\t\t\t\t\t\tmodelCtrl.$setValidity(\"p2pAccountRequired\", true);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tinitialize();\n\t\t\t}\n\t\t};\n\t};\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/p2p-enrollment.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    var $ = window.jQuery;\n    var base = require('base');\n    var lpUIUtils = base.inject('lpUIUtils', require('ui').name);\n\n    // @ngInject\n    exports.usAccountInput = function($templateCache, $timeout, $filter, transferTypes) {\n\n        $templateCache.put('$usTransferCountryDropdownOption.html',\n            '<span aria-label=\"{{option.country_name}}\">{{option.country_code}}<span class=\"country-name\"> - {{option.country_name}}</span></span>'\n        );\n\n        $templateCache.put(\"$usAccountInputTemplate.html\", '<div class=\"lp-us-account-input\">' +\n            '<div ng-class=\"{\\'has-success\\': isRoutingNoValid && routingNumber.length > 0, \\'has-error\\': !isRoutingNoValid && routingNumber.length, \\'has-feedback\\': routingNumber.length}\">' +\n                '<input type=\"input\" class=\"form-control routing-number\" ng-model=\"routingNumber\" lp-number-input=\"lp-number-input\" min=\"0\" maxlength=\"9\" placeholder=\"{{\\'Routing Number\\'|translate}}\" aria-required=\"true\" aria-label=\"{{\\'Routing Number\\'|translate}}\" />' +\n                '<span ng-if=\"isRoutingNoValid && routingNumber.length\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' +\n                '<span ng-click=\"resetRoutingNumber()\" ng-if=\"!isRoutingNoValid && routingNumber.length\" class=\"glyphicon glyphicon-remove form-control-feedback clickable-icon\"></span>' +\n            '</div>' +\n            '<div class=\"lp-acc-plus-country\">' +\n                '<div class=\"country-select\" ng-if=\"showCountryDropdown\">' +\n                    '<div dropdown-select=\"dropdown-select\" class=\"country-select\" empty-placeholder-text=\"US\" ng-model=\"selectedCountry\" options=\"country.country_code as country for country in lpCountryList.countries\" option-template-url=\"$usTransferCountryDropdownOption.html\"></div>' +\n                '</div>' +\n                '<div ng-class=\"{\\'has-success\\': isAccNoConfirmed && accountNumber.length > 0, \\'has-warning\\': !isAccNoConfirmed && accountNumber.length, \\'has-feedback\\': accountNumber.length, \\'account-number\\': true}\">' +\n                    '<input type=\"input\" class=\"form-control\" ng-model=\"accountNumber\" lp-number-input=\"lp-number-input\" maxlength=\"19\" min=\"0\" placeholder=\"{{\\'Account Number\\'|translate}}\" aria-required=\"true\" aria-label=\"{{\\'Account Number\\'|translate}}\"' +\n                        'ng-keydown=\"getSelection($event)\" ng-keypress=\"getSelection($event)\" ' +\n                        'ng-mousedown=\"getSelection($event)\" ng-mouseup=\"getSelection($event)\"' +\n                        'lp-input-overflow=\"lp-input-overflow\" lp-format-us-account=\"lp-format-us-account\"/>' +\n                    '<span ng-if=\"isAccNoConfirmed && accountNumber.length\" class=\"glyphicon glyphicon-ok form-control-feedback\"></span>' +\n                    '<span ng-click=\"confirmAccountNumber()\" ng-keydown=\"confirmKeydown($event)\" tabindex=\"{{!isAccNoConfirmed && accountNumber.length ? 0 : -1}}\" ng-if=\"!isAccNoConfirmed && accountNumber.length\" class=\"glyphicon glyphicon-warning-sign form-control-feedback clickable-icon\" aria-label=\"Confirm Account Number\" role=\"button\"></span>' +\n                    '<div class=\"lp-input-dividers clearfix\" style=\"top: 28px;\">' +\n                        '<div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div><div class=\"separator\"></div>' +\n                    '</div>' +\n                '</div>' +\n            '</div>' +\n            '<span class=\"lp-routing-info text-muted\">' +\n                '<span lp-i18n=\"Where to find your account number & routing number\"></span>' +\n                '<i class=\"lp-icon lp-icon-xxl lp-icon-info-sign open-popup\" ng-click=\"modal()\"></i>' +\n            '</span>' +\n        '</div>'\n        );\n\n\n\n        return {\n            restrict: 'EA',\n            replace: true,\n            require: [\"ngModel\", \"^form\"],\n            scope: {\n                \"account\": \"=ngModel\",\n                \"lpCountryList\": \"=\",\n                \"modal\": \"=\",\n                \"transferType\": \"=lpTransferType\"\n            },\n            template: $templateCache.get(\"$usAccountInputTemplate.html\"),\n            link: function(scope, element, attrs, ctrls) {\n\n                //Initial set up\n                /**\n                 * intialisation function\n                 * @constructor\n                 */\n                var initialize = function() {\n\n                    //validation flags\n                    scope.isAccNoConfirmed = false;\n                    scope.isRoutingNoValid = false;\n\n                    //if a country list has been provided, show dropdown\n                    scope.showCountryDropdown = scope.lpCountryList ? true : false;\n\n                    if(scope.showCountryDropdown && scope.lpCountryList.default_country) {\n                        scope.selectedCountry = scope.lpCountryList.default_country.country_code;\n                    }\n\n                    setDefaultValidation(scope.transferType || \"\");\n                };\n\n                //controllers\n                var modelCtrl = ctrls[0], formCtrl = ctrls[1];\n\n                modelCtrl.$name = attrs.name;\n                formCtrl.$addControl(modelCtrl);\n\n                modelCtrl.$setValidity(\"accountNumberRequired\", false);\n                modelCtrl.$setValidity(\"routingNumberRequired\", false);\n\n                var accountInput = element.find(\"input\")[1],\n                    textSelection = [],\n                    isBackspace = false,\n                    lengthDiff = 0,\n                    associatedTransferType = transferTypes.bank;\n\n                //extra element needed to track caret across input\n                var $partialText = $(document.createElement('span'));\n                $partialText.addClass('lp-input-cursor-position-offset');\n                $partialText.css('font-size', element.css('font-size'));\n                $(accountInput).after($partialText);\n\n                //cater for changes in model from outside directive\n                modelCtrl.$formatters.push(function(value) {\n\n                    //default values for acc no and rout no\n                    if(value) {\n                        //if the first two characters are letters\n                        if(isNaN(parseInt(value.substring(0, 2), 10))) {\n                            scope.accountNumber = \"\";\n                            scope.routingNumber = \"\";\n                        } else {\n                            var tempArray = value.split(\" \");\n                            scope.routingNumber = tempArray[0];\n                            scope.accountNumber = $filter('addSeperator')(tempArray[1]);\n                            validateRoutingNumber(scope.routingNumber);\n                            setAccountValidity(scope.accountNumber);\n                        }\n                    } else {\n                        scope.accountNumber = \"\";\n                        scope.routingNumber = \"\";\n                    }\n\n                    return value;\n                });\n\n                modelCtrl.$parsers.push(function(value) {\n\n                    var tempArray = value.split(\" \");\n\n                    validateRoutingNumber(tempArray[0]);\n                    setAccountValidity(tempArray[1]);\n\n                    return value;\n                });\n\n                //general scope functions\n                /**\n                 * Confirm the account number as correct\n                 */\n                scope.confirmAccountNumber = function() {\n                    scope.isAccNoConfirmed = true;\n                    modelCtrl.$setValidity(\"accountNumberConfirmed\", true);\n                };\n\n                /**\n                 * Calls the confirmAccountNumber function when ENTER is pressed in the confirm icon\n                 * and places keyboard focus the next field.\n                 */\n                scope.confirmKeydown = function(event) {\n                    if (event.which === 13) {\n                        event.stopPropagation();\n                        event.preventDefault();\n\n                        scope.confirmAccountNumber();\n                        element.find('.routing-number').focus();\n                    }\n                };\n\n                /**\n                 * reset the routing number\n                 */\n                scope.resetRoutingNumber = function() {\n                    scope.routingNumber = \"\";\n                };\n\n                //Caret position functions\n                /**\n                 * Function that stores the selection start and end values\n                 * @param  {event} event Either the Keyboard or the Mouse Event\n                 */\n                scope.getSelection = function(event) {\n\n                    var noSeparatorSelection = function(select) {\n                        var selectionDiff = 0;\n\n                        selectionDiff += parseInt(select / 5, 10);\n\n                        return select - selectionDiff;\n                    };\n\n                    textSelection = lpUIUtils.getSelectionPositionOfInput(accountInput, noSeparatorSelection);\n\n                    if (event.originalEvent.toString() === '[object KeyboardEvent]') {\n                        // handle backspace\n                        if (event.originalEvent.which === 8 && accountInput.value.length) {\n                            isBackspace = true;\n                        }\n                    }\n                };\n\n                /**\n                 * Set the correct cursor position after adding the separator\n                 */\n                scope.setCursorPosition = function() {\n\n                    var cursorPosition = lpUIUtils.getNewCaretPosition(accountInput, textSelection, lengthDiff, isBackspace);\n\n                    isBackspace = false;\n\n                    // add the separators to the cursor position\n                    if (cursorPosition > 4) {\n                        var temp = cursorPosition / 4;\n                        if (parseInt(temp, 10) === temp) {\n                            cursorPosition--;\n                        }\n                        cursorPosition += parseInt(temp, 10);\n                    }\n\n                    $timeout(function() {\n                        lpUIUtils.setCaretPositionOfInput(accountInput, cursorPosition, scope.paymentReference, $partialText);\n                    }, 20, false);\n                };\n\n\n                //Watches\n                /**\n                 * handle change in account number\n                 */\n                scope.$watch(\"accountNumber\", function(newValue, oldValue) {\n\n                    if(newValue === oldValue) {\n                        return;\n                    }\n\n                    //require user to reconfirm account number when changed\n                    scope.isAccNoConfirmed = false;\n\n                    setModelValue();\n\n                    scope.setCursorPosition();\n                });\n\n                /**\n                 * handle change in routing number\n                 */\n                scope.$watch(\"routingNumber\", function(newValue, oldValue) {\n\n                    if(newValue === oldValue) {\n                        return;\n                    }\n\n                    setModelValue();\n                });\n\n                scope.$watch(\"transferType\", function(newValue, oldValue) {\n\n                    if(newValue === oldValue) {\n                        return;\n                    }\n\n                    setDefaultValidation(newValue);\n                });\n\n                /**\n                 * listen for the reset message form the parent scope\n                 */\n                scope.$on(\"reset\", function() {\n\n                    scope.routingNumber = \"\";\n                    scope.accountNumber = \"\";\n                });\n\n\n                //general functions\n                /**\n                 * Validates American routing number using below algorithm (where d is the routing number and is 0 based)\n                 * 3(d0 + d3 + d6) + 7(d1 + d4 + d7) + (d2 + d5 + d8) / 10 = 0\n                 * @param routingNumber the routing number to validate against\n                 */\n                var validateRoutingNumber = function(routingNumber) {\n\n                    if(routingNumber.length < 9) {\n                        scope.isRoutingNoValid = false;\n                        setRoutingValidity(routingNumber);\n                        return;\n                    }\n\n                    var result;\n\n                    //9 0s passes validation, fix\n                    if(routingNumber === \"000000000\") {\n                        result = false;\n                    } else {\n                        var digitOne = parseInt(routingNumber[0], 10) + parseInt(routingNumber[3], 10) + parseInt(routingNumber[6], 10),\n                            digitTwo = parseInt(routingNumber[1], 10) + parseInt(routingNumber[4], 10) + parseInt(routingNumber[7], 10),\n                            digitThree = parseInt(routingNumber[2], 10) + parseInt(routingNumber[5], 10) + parseInt(routingNumber[8], 10);\n\n                        var checkNumber = (3 * digitOne) + (7 * digitTwo) + digitThree;\n\n                        //find the modulus of 10\n                        result = checkNumber % 10;\n\n                        result = result === 0 ? true : false;\n                    }\n\n                    scope.isRoutingNoValid = result;\n\n                    setRoutingValidity(routingNumber);\n\n                };\n\n                var setRoutingValidity = function(value) {\n\n                    var routingProvided = value.length > 0 ? true : false;\n                    var invalidRoutingNumber = routingProvided && !scope.isRoutingNoValid ? false : true;\n\n                    modelCtrl.$setValidity(\"routingNumberRequired\", routingProvided);\n                    modelCtrl.$setValidity(\"invalidRoutingNumber\", invalidRoutingNumber);\n                };\n\n                var setAccountValidity = function(value) {\n\n                    //set validation needed based on new value\n                    var accountRequired = value && value.length > 0 ? true : false;\n                    var confirmRequired = value && value.length > 0 && !scope.isAccNoConfirmed ? false : true;\n\n                    modelCtrl.$setValidity(\"accountNumberRequired\", accountRequired);\n                    modelCtrl.$setValidity(\"accountNumberConfirmed\", confirmRequired);\n                };\n\n                //remove the spaces and any extra special characters\n                var normalize = function(value) {\n\n                    if(value) {\n                        value = value.replace(/ /g, '');\n                    }\n\n                    return value || \"\";\n                };\n\n                //set the model value\n                var setModelValue = function() {\n\n                    var modelValue = normalize(scope.routingNumber) + \" \" + normalize(scope.accountNumber);\n                    modelCtrl.$setViewValue(modelValue);\n                };\n\n                var setDefaultValidation = function(value) {\n\n                    if(value !== associatedTransferType) {\n                        modelCtrl.$setValidity(\"accountNumberRequired\", true);\n                        modelCtrl.$setValidity(\"accountNumberConfirmed\", true);\n                        modelCtrl.$setValidity(\"routingNumberRequired\", true);\n                        modelCtrl.$setValidity(\"invalidRoutingNumber\", true);\n                    } else {\n                        validateRoutingNumber(scope.routingNumber || \"\");\n                        setAccountValidity(scope.accountNumber || \"\");\n                    }\n                };\n\n                initialize();\n\n            }\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/migration/us-account-input.js\n **/","define( function (require, exports, module) {\n\t'use strict';\n\n\texports.transferTypes = {\n        bank: 'INTERNAL',\n        p2pEmail: 'P2P_EMAIL',\n        p2pAddress: 'P2P_ADDRESS',\n        p2pMobile: 'P2P_MOBILE'\n\t};\n\n\texports.pendingPaymentOrdersTimeout = 10 * 1000;\n\texports.customerId = '3';\n\texports.currencyMaxLength = 15;\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/constants.js\n **/","define( function (require, exports, module) {\n    'use strict';\n\n    // @ngInject\n    exports.lpPayments = function () {\n\n        // @ngInject\n        this.$get = function($q, $resource, lpCoreUtils) {\n\n            var config = {\n                paymentsEndpoint: '/mock/v1/payments'\n            };\n\n            function API() {\n\n                var Rest = $resource(config.paymentsEndpoint, {}, {\n                    getUnsubmitted: {\n                        method: 'GET',\n                        url: config.paymentsEndpoint + '/:ids/unsubmitted',\n                        isArray: true\n                    },\n                    create: {\n                        method: 'PUT'\n                    },\n                    del: {\n                        method: 'DELETE',\n                        url: config.paymentsEndpoint + '/:paymentId'\n                    },\n                    submit: {\n                        method: 'POST',\n                        url: config.paymentsEndpoint + '/:paymentId/submit'\n                    }\n                });\n\n                /**\n                 * Creates or updates payment order\n                 *\n                 * @param order\n                 * @returns {promise}\n                 */\n                Rest.prototype.createOrder = function (order) {\n                    var deferred = $q.defer();\n\n                    Rest.create({paymentId: order.id}, order, function(response) {\n                        deferred.resolve(response);\n                    }, function(error) {\n                        deferred.reject(error);\n                    });\n\n                    return deferred.promise;\n                };\n\n                /**\n                 * Send payment orders to execution\n                 *\n                 * @param param\n                 * @param authorization\n                 * @returns {promise}\n                 */\n                Rest.prototype.send = function (param, authorization) {\n                    var deferred = $q.defer();\n\n                    Rest.submit(param, authorization || {}, function (response) {\n                        deferred.resolve(response);\n                    }, function(error) {\n                        deferred.reject(error);\n                    });\n\n                    return deferred.promise;\n                };\n\n                /**\n                 * Remove pending order.\n                 *\n                 * @param uuid\n                 * @returns {promise}\n                 */\n                Rest.prototype.remove = function (orderId) {\n                    var deferred = $q.defer();\n\n                    Rest.del({paymentId: orderId}, {}, function (response) {\n                        deferred.resolve(response);\n                    }, function(error) {\n                        deferred.reject(error);\n                    });\n\n                    return deferred.promise;\n                };\n\n\n                Rest.prototype.createModel = function() {\n                    return new Rest({\n                        id: lpCoreUtils.generateUUID() // to be refactored\n                    });\n                };\n\n                Rest.prototype.load = function(accounts) {\n\n                    // This is to not use default paging from payments Rest\n                    var params = {\n                        f: 0,   // paging: from\n                        l: 100, // paging: size\n                        ids: accounts.join()\n                    };\n\n                    return Rest.getUnsubmitted(params).$promise.then(function (resp) {\n                        this.pendingOrdersGroups = this.preprocessPendingOrdersGroups(resp);\n                        return this.pendingOrdersGroups;\n                    }.bind(this));\n                };\n\n                Rest.prototype.preprocessPendingOrdersGroups = function(data) {\n                    var paymentOrderGroups = [];\n                    var paymentOrder;\n\n                    var checkGroupExistance = function(accountId) {\n                        var result = false;\n                        for (var i = 0; i < paymentOrderGroups.length; i++) {\n                            if (paymentOrderGroups[i]['@id'] === accountId) {\n                                result = true;\n                            }\n                        }\n                        return result;\n                    };\n\n                    var createGroup = function(id) {\n                        paymentOrderGroups.push({\n                            '@id': id,\n                            'paymentOrders': []\n                        });\n                    };\n\n                    var addPaymentOrderToGroup = function(paymentOrderDetail) {\n                        if (!checkGroupExistance(paymentOrderDetail.accountId)) {\n                            createGroup(paymentOrderDetail.accountId);\n                        }\n\n                        for (var i = 0; i < paymentOrderGroups.length; i++) {\n                            if (paymentOrderGroups[i]['@id'] === paymentOrderDetail.accountId) {\n                                paymentOrderGroups[i].paymentOrders.push(paymentOrderDetail);\n                            }\n                        }\n                    };\n\n                    for (var y = 0; y < data.length; y++) {\n                        paymentOrder = data[y];\n\n                        if(paymentOrder.counterpartyIban && paymentOrder.counterpartyIban.length > 0) {\n                            paymentOrder.accountDetails = paymentOrder.counterpartyIban;\n                        } else if(paymentOrder.counterpartyAccount && paymentOrder.counterpartyAccount.length > 0) {\n                            paymentOrder.accountDetails = paymentOrder.counterpartyAccount;\n                        } else if(paymentOrder.counterpartyEmail && paymentOrder.counterpartyEmail.length > 0) {\n                            paymentOrder.accountDetails = paymentOrder.counterpartyEmail;\n                        }\n\n                        addPaymentOrderToGroup(paymentOrder);\n                    }\n\n                    return paymentOrderGroups;\n                };\n\n                /**\n                 * Making form object to edit order in \"New Transfer\" widget\n                 *\n                 * @param order\n                 */\n                Rest.prototype.makeFormObject = function(order) {\n                    var form = {\n                        update: true, // here we notify it is UPDATE\n                        uuid: order.id,\n                        accountId: order.accountId,\n                        isScheduledTransfer: order.scheduledTransfer.every ? true : false,\n                        scheduleDate: order.onDate ? new Date(order.onDate) : new Date(),\n                        scheduledTransfer: {\n                            frequency: order.scheduledTransfer.frequency,\n                            every: order.scheduledTransfer.every,\n                            intervals: order.scheduledTransfer.intervals ? [order.schedule.intervals] : [],\n                            timesToRepeat: order.scheduledTransfer.timesToRepeat || 1, // not in API\n                            customOrder: order.scheduledTransfer.customOrder || true, // not in API\n                            startDate: order.scheduledTransfer.startDate ? new Date(order.scheduledTransfer.startDate) : new Date()\n                        },\n                        selectedCounter: {\n                            name: order.counterpartyName,\n                            account: order.counterpartyIban || order.counterpartyEmail\n                        },\n                        instructedCurrency: order.instructedCurrency,\n                        counterpartyName: order.counterpartyName,\n                        counterpartyAccount: order.counterpartyAccount,\n                        counterpartyIban: order.counterpartyIban || '',\n                        counterpartyEmail: order.counterpartyEmail,\n                        instructedAmount: order.instructedAmount.toFixed(2),\n                        paymentReference: order.paymentReference || '', // not in API\n                        paymentDescription: order.paymentDescription || '', // not in API\n                        counterpartyAddress: order.counterpartyAddress || '', // not in API\n                        isOpenDate: order.isOpenDate || false, // not in API\n                        urgentTransfer: order.urgentTransfer || false, // not in API\n                        type: order.type\n                    };\n\n                    return form;\n                };\n\n\n                return new Rest();\n            }\n            return {\n                setConfig: function(options) {\n                    config = lpCoreUtils(options).chain()\n                        .mapValues(lpCoreUtils.resolvePortalPlaceholders)\n                        .defaults(config)\n                        .value();\n                    return this;\n                },\n\n                getConfig: function(prop) {\n                    if (prop && lpCoreUtils.isString(prop)) {\n                        return config[prop];\n                    } else {\n                        return config;\n                    }\n                },\n\n                api: API\n            };\n\n        };\n    };\n\n    // keep alias\n    // #TODO deprecate PaymentOrderModel\n    exports.PaymentOrderModel = exports.lpPayments;\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/payments.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    /**\n     * Services\n     * @param  {DI services}\n     * @return {object}\n     * @ngInject\n     */\n    function Services(PaymentOrders) {\n\n        // registered services\n        var services = {\n            'payment-orders': PaymentOrders\n        };\n\n        return {\n            api: function(name) {\n                if (typeof services[name] === 'undefined') {\n                    throw new Error('Unknown service ' + name + ' !!!');\n                }\n                return services[name];\n            }\n        };\n    }\n\n    /**\n     * lpAccountTransfers provider\n     * @return {object} angular provider\n     * @ngInject\n     */\n    exports.lpAccountTransfers = function() {\n        this.$get = Services;\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/providers.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    var utils = require('base').utils;\n    var api = {};\n    // default configuration\n    var defaults = {\n        url: '/mock/v2/payment-orders'\n    };\n\n    /*----------------------------------------------------------------*/\n    /* Public API\n    /*----------------------------------------------------------------*/\n    /**\n     * @ngInject\n     * @constructor\n     */\n    function PaymentOrders($http, lpCoreError) {\n        this.xhr = $http;\n        this.config = {};\n    }\n\n    api.createModel = function() {\n        return {};\n    };\n    /**\n     * Creates or updates payment order\n     *\n     * @param order\n     * @returns {promise}\n     */\n    api.createOrder = function(order) {\n        return this.xhr({\n            method: 'POST',\n            url: this.config.url,\n            data: order\n        });\n    };\n\n    /**\n     * Send payment orders to execution\n     *\n     * @param param\n     * @param authorization\n     * @returns {promise}\n     */\n    api.send = function(param, authorization) {\n        var url = this.config.url + '/' + param + '/submit';\n\n        return this.xhr({\n            method: 'POST',\n            url: url,\n            data: authorization || {}\n        });\n    };\n\n    /**\n     * Remove pending order.\n     *\n     * @param uuid\n     * @returns {promise}\n     */\n    api.remove = function(orderId) {\n        var url = this.config.url + '/' + orderId;\n\n        return this.xhr({\n            method: 'DELETE',\n            url: url\n        });\n    };\n\n    /**\n     * Notify server about selected OTP channel\n     *\n     * @param {String} url\n     * @returns {promise}\n     */\n    api.selectOtpChannel = function (url) {\n        if (!url) {\n            throw Error('No URL for channel selectOtpChannel specified!');\n        }\n\n        return this.xhr({\n            method: 'POST',\n            url: url\n        });\n    };\n\n    /**\n     * Do OTP verification\n     *\n     * @param {String} url\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    api.verifyOtp = function (url, params) {\n        if (!url) {\n            throw Error('No URL for verifyOtp specified!');\n        }\n\n        if (!params || !params.otpCode) {\n            throw Error('No OTP code for verifyOtp specified!');\n        }\n\n        return this.xhr({\n            method: 'POST',\n            url: url,\n            data: params\n        }).then(function (response) {\n            response.valid = true;\n            return response;\n        }, function (err) {\n            return err;\n        });\n    };\n\n    // -----------------------\n    // Add to lpCoreApiService\n    api.setConfig = function(options) {\n        this.config = utils.chain(options)\n            .mapValues(utils.resolvePortalPlaceholders)\n            .defaults(defaults)\n            .value();\n        return this;\n    };\n    api.getConfig = function(prop, defVal) {\n        if (prop && utils.isString(prop)) {\n            return this.config[prop] || defVal;\n        } else {\n            return this.config;\n        }\n    };\n    // ----------------------\n\n    /**\n     * mixin public api methods\n     */\n    utils.assign(PaymentOrders.prototype, api);\n\n    /**\n     * Exports\n     */\n    exports.PaymentOrders = PaymentOrders;\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/services/payment-orders.js\n **/"],"sourceRoot":""}