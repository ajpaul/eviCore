{"version":3,"sources":["webpack:///widget-new-transfer/webpack/universalModuleDefinition","webpack:///widget-new-transfer/scripts/main.js","webpack:///widget-new-transfer/webpack/bootstrap 5031e299ef87f9d7f75b","webpack:///widget-new-transfer/./scripts/main.js","webpack:///widget-new-transfer/(webpack)/buildin/module.js","webpack:///widget-new-transfer/external \"base\"","webpack:///widget-new-transfer/external \"core\"","webpack:///widget-new-transfer/external \"ui\"","webpack:///widget-new-transfer/external \"module-accounts\"","webpack:///widget-new-transfer/external \"module-contacts\"","webpack:///widget-new-transfer/external \"module-p2p\"","webpack:///widget-new-transfer/external \"module-payments\"","webpack:///widget-new-transfer/external \"module-transactions\"","webpack:///widget-new-transfer/external \"module-users\"","webpack:///widget-new-transfer/./scripts/form-data-persistence.js","webpack:///widget-new-transfer/./scripts/controllers.js","webpack:///widget-new-transfer/./scripts/directives.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_3__","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_5__","__WEBPACK_EXTERNAL_MODULE_6__","__WEBPACK_EXTERNAL_MODULE_7__","__WEBPACK_EXTERNAL_MODULE_8__","__WEBPACK_EXTERNAL_MODULE_9__","__WEBPACK_EXTERNAL_MODULE_10__","__WEBPACK_EXTERNAL_MODULE_11__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","run","lpWidget","lpPayments","lpCoreBus","setConfig","paymentsEndpoint","getPreference","model","name","publish","$inject","base","core","ui","accounts","contacts","p2p","payments","transactions","users","deps","createModule","controller","directive","undefined","webpackPolyfill","deprecate","paths","children","formDataPersistence","hasStorage","storage","result","uid","Date","getTime","toString","window","localStorage","setItem","getItem","removeItem","err","log","warn","FormDataPersistenceController","prototype","saveFormData","formName","formObject","stringifiedFormObject","JSON","stringify","sessionStorage","removeFormData","getFormData","widgetForm","parse","formatObject","thisObject","key","hasOwnProperty","toLowerCase","indexOf","testDate","isNaN","Object","isFormSaved","saved","getInstance","applyScope","$scope","$$phase","$apply","generateUUID","d","uuid","replace","r","Math","random","floor","$","jQuery","NewTransferController","$rootScope","$rootElement","$timeout","lpCoreUtils","AccountsModel","ContactsModel","lpTransactionsCurrency","IbanModel","customerId","lpP2P","transferTypes","lpUIResponsive","lpCoreUpdate","lpUsersPreference","lpUserDetails","errors","widget","PaymentOrderModel","api","autoSave","paymentIntervals","RECURRING","NON_RECURRING","isNewContact","contactsModel","findByName","paymentOrder","counterpartyName","selectedCounter","account","counterpartyIban","createContact","contact","type","poTypeEnum","bank","usTransfer","counterpartyAccount","p2pEmail","email","counterpartyEmail","currentContact","createCounterParty","resetModel","scheduledTransfer","isScheduledTransfer","update","dateAllOptions","label","dateOptions","frequency","every","intervals","startDate","endDate","timesToRepeat","urgentTransfer","scheduleDate","isOpenDate","instructedCurrency","counterpartyAddress","instructedAmount","paymentReference","paymentDescription","date","saveContact","parseBoolean","dirty","setActiveTransferTabs","tab","activeTransferTab","found","item","resetChildScopes","$broadcast","checkValidAccounts","paymentOrderForm","$setValidity","notEqualAccounts","buildBankPaymentOrder","join","paymentMode","onDate","buildP2PEmailPaymentOrder","buildP2PAddressPaymentOrder","p2pAddress","initialize","mediaDir","getWidgetBaseUrl","todaysDate","hideFooter","p2pService","url","resolvePortalPlaceholders","getAll","then","response","userEnrolledForP2P","subscribe","data","enrolled","status","p2pUserEnrollment","mobile","receivingAccountNumber","urgentTranfer","locale","title","accountsTopBalance","getPreferenceFromParents","disableCurrencySelection","modalShown","exchangeRateModalShown","ibanModalShown","routingModalShown","templates","saveContacts","exchangeRate","iban","routingAndAccount","accountsModel","accountsEndpoint","paymentOrderModel","createModel","show-button-bar","show-weeks","selectAccount","params","each","index","accountId","selected","promise","load","length","defaultAccount","findByAccountNumber","read","prefs","filter","identifier","error","get","userDetails","currencyModel","defaultCurrencyEndpoint","currencyListEndpoint","loadDefaultCurrency","configureDefaultCurrency","defaultCurrency","currency_code","loadOtherCurrencies","currency","selectCurrency","contactData","contactDetails","loadContacts","ibanModel","countryListEndpoint","enableCountrySearch","loadCountryList","validate","toggleTabs","oneTime","scheduled","persistenceManager","newPaymentOrder","excludedProperties","addEventListener","event","newValue","hideAllModals","$watch","oldValue","setScheduledTransfer","form","openCalendar","$event","which","preventDefault","stopPropagation","setPaymentOrderType","paymentOrderType","submitForm","xhr","processPaymentOrder","submitted","$invalid","selectedAccount","accountName","alias","enroll","accountNumber","verified","createOrder","res","trigger","widgetName","paymentId","resetForm","updateServerError","console","statusText","onSaveContactsChange","toggleModal","setContactPreference","setPreference","save","showContactsInfo","showContactsOptions","toggleSaveToContactsModal","toggleAutosuggest","body","find","cancelForm","$setPristine","resetCounterparty","updateCounterparty","accountDetails","$setDirty","onAccountChange","toggleExchangeRateModal","toggleSaveContactDetailsModal","toggleIbanModal","toggleRoutingNumberModal","urgentTransferModalShown","toggleUrgentTransferModal","value","$on","refreshHTML","lpTransactionUpdateLayout","restrict","scope","link","el","attrs","ngModel","$launcher","closest","$close","$title","defaultTitle","text","click","lpFutureTime","elm","now","setDate","getDate","$parsers","unshift","lpSmartsuggest","SmartSuggestEngine","SmartSuggestFormatter","lpSmartsuggestSelect","lpSmartsuggestClear","element","smartSuggest","showTitles","addSuggester","suggest","builtIn","getContactSuggestions","getAccountSuggestions","types","ACCOUNT","options","showAll","isArray","CONTACT","formatter","$eval","val","autosuggest","lookup","q","suggs","getSuggestions","map","suggestion","displayValue","values","format","onSelect","TITLE","onClear","formatResult","getSuggestionHtml","autoSelectFirst","minChars"],"mappings":"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","file":"scripts/main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-accounts\"), require(\"module-contacts\"), require(\"module-p2p\"), require(\"module-payments\"), require(\"module-transactions\"), require(\"module-users\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"core\", \"ui\", \"module-accounts\", \"module-contacts\", \"module-p2p\", \"module-payments\", \"module-transactions\", \"module-users\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-new-transfer\"] = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-accounts\"), require(\"module-contacts\"), require(\"module-p2p\"), require(\"module-payments\"), require(\"module-transactions\"), require(\"module-users\"));\n\telse\n\t\troot[\"widget-new-transfer\"] = factory(root[\"base\"], root[\"core\"], root[\"ui\"], root[\"module-accounts\"], root[\"module-contacts\"], root[\"module-p2p\"], root[\"module-payments\"], root[\"module-transactions\"], root[\"module-users\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-accounts\"), require(\"module-contacts\"), require(\"module-p2p\"), require(\"module-payments\"), require(\"module-transactions\"), require(\"module-users\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"core\", \"ui\", \"module-accounts\", \"module-contacts\", \"module-p2p\", \"module-payments\", \"module-transactions\", \"module-users\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-new-transfer\"] = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-accounts\"), require(\"module-contacts\"), require(\"module-p2p\"), require(\"module-payments\"), require(\"module-transactions\"), require(\"module-users\"));\n\telse\n\t\troot[\"widget-new-transfer\"] = factory(root[\"base\"], root[\"core\"], root[\"ui\"], root[\"module-accounts\"], root[\"module-contacts\"], root[\"module-p2p\"], root[\"module-payments\"], root[\"module-transactions\"], root[\"module-users\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    module.name = 'widgets-new-transfer';\n\n\t    var base = __webpack_require__(3);\n\t    var core = __webpack_require__(4);\n\t    var ui = __webpack_require__(5);\n\t    var accounts = __webpack_require__(6);\n\t    var contacts = __webpack_require__(7);\n\t    var p2p = __webpack_require__(8);\n\t    var payments = __webpack_require__(9);\n\t    var transactions = __webpack_require__(10);\n\t    var users = __webpack_require__(11);\n\n\t    var deps = [core.name, ui.name, accounts.name, payments.name, p2p.name, transactions.name, contacts.name, users.name];\n\n\t    // @ngInject\n\t    function run(lpWidget, lpPayments, lpCoreBus) {\n\t        lpPayments.setConfig({\n\t            'paymentsEndpoint': lpWidget.getPreference('paymentOrdersDataSrc')\n\t        });\n\t        if (lpWidget && lpWidget.model && lpWidget.model.name) {\n\t            lpCoreBus.publish('cxp.item.loaded', { id: lpWidget.model.name });\n\t        }\n\t    }\n\n\t    module.exports = base.createModule(module.name, deps).factory(__webpack_require__(12)).controller(__webpack_require__(13)).directive(__webpack_require__(14)).run(run);\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\n\t    'use strict';\n\n\t    var base = __webpack_require__(3);\n\n\t    // @ngInject\n\t    exports.formDataPersistence = function () {\n\n\t        function hasStorage() {\n\t            var uid = new Date().getTime().toString();\n\t            var storage;\n\t            var result;\n\t            try {\n\t                (storage = window.localStorage).setItem(uid, uid);\n\t                result = storage.getItem(uid) === uid;\n\t                storage.removeItem(uid);\n\t                return result && storage;\n\t            } catch (err) {\n\t                base.log.warn(err);\n\t            }\n\t        }\n\n\t        /**\n\t         * Creates a new FormDataPersistenceController instance\n\t         * @constructor\n\t         */\n\t        var FormDataPersistenceController = function FormDataPersistenceController() {};\n\n\t        /**\n\t         * Save the form data in session storage with the form name as the key\n\t         * @param formName a string value of the form/widget name\n\t         * @param a JS object representing the values of the form\n\t         */\n\t        FormDataPersistenceController.prototype.saveFormData = function (formName, formObject) {\n\t            if (hasStorage()) {\n\t                var stringifiedFormObject = JSON.stringify(formObject);\n\t                window.sessionStorage.setItem(formName, stringifiedFormObject);\n\t            }\n\t        };\n\n\t        /**\n\t         * Removes saved data from session storage by form name\n\t         * @param formName the name of the widget form to remove\n\t         */\n\t        FormDataPersistenceController.prototype.removeFormData = function (formName) {\n\t            if (hasStorage()) {\n\t                window.sessionStorage.removeItem(formName);\n\t            }\n\t        };\n\n\t        /**\n\t         * Return the stored string of the form object\n\t         * @param widget form name\n\t         */\n\t        FormDataPersistenceController.prototype.getFormData = function (formName) {\n\n\t            try {\n\t                var widgetForm = JSON.parse(window.sessionStorage.getItem(formName));\n\t            } catch (err) {\n\t                base.log.warn('Can\\'t parse form\\'s stored storage data.');\n\t            }\n\n\t            var formatObject = function formatObject(thisObject) {\n\t                for (var key in thisObject) {\n\t                    if (thisObject.hasOwnProperty(key)) {\n\t                        if (key.toLowerCase().indexOf('date') > -1 && typeof thisObject[key] !== 'boolean') {\n\t                            var testDate = new Date(thisObject[key]);\n\t                            //TODO: investigate better approach\n\t                            if (!isNaN(testDate.getTime())) {\n\t                                //a valid date\n\t                                thisObject[key] = testDate;\n\t                            }\n\t                        }\n\n\t                        if (thisObject[key] instanceof Object) {\n\t                            formatObject(thisObject[key]);\n\t                        }\n\t                    }\n\t                }\n\n\t                return thisObject;\n\t            };\n\n\t            formatObject(widgetForm);\n\n\t            return widgetForm;\n\t        };\n\n\t        /**\n\t         * Returns a flag if the form is currently saved\n\t         * @formName the name of the widget form to check\n\t         */\n\t        FormDataPersistenceController.prototype.isFormSaved = function (formName) {\n\t            var saved = window.sessionStorage.getItem(formName);\n\t            return saved === null ? false : true;\n\t        };\n\n\t        return {\n\t            getInstance: function getInstance() {\n\t                return new FormDataPersistenceController();\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    function applyScope($scope) {\n\t        if (!$scope.$$phase) {\n\t            $scope.$apply();\n\t        }\n\t    }\n\n\t    function generateUUID() {\n\t        var d = new Date().getTime();\n\t        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n\t            var r = (d + Math.random() * 16) % 16 | 0;\n\t            d = Math.floor(d / 16);\n\t            return (c === 'x' ? r : r & 0x7 | 0x8).toString(16);\n\t        });\n\t        return uuid;\n\t    }\n\n\t    var $ = window.jQuery;\n\n\t    // @ngInject\n\t    exports.NewTransferController = function ($scope, $rootScope, $rootElement, $timeout, lpCoreUtils, lpCoreBus, AccountsModel, ContactsModel, lpTransactionsCurrency, IbanModel, lpWidget, customerId, formDataPersistence, lpP2P, transferTypes, lpPayments, lpUIResponsive, lpCoreUpdate, lpUsersPreference, lpUserDetails) {\n\t        $scope.errors = {};\n\n\t        var widget = lpWidget;\n\t        var PaymentOrderModel = lpPayments.api();\n\t        // Wheter to auto save new contacts\n\t        var autoSave = widget.getPreference('autosaveContactsPreference');\n\n\t        var formName = 'new-transfer-form';\n\n\t        var paymentIntervals = {\n\t            RECURRING: 'RECURRING',\n\t            NON_RECURRING: 'NON_RECURRING'\n\t        };\n\n\t        /**\n\t         * Regular function\n\t         */\n\n\t        //is the recipient a new contact?\n\t        var isNewContact = function isNewContact() {\n\t            if ($scope.contactsModel.findByName($scope.paymentOrder.counterpartyName)) {\n\t                return false;\n\t            }\n\t            return !$scope.paymentOrder.selectedCounter || $scope.paymentOrder.selectedCounter.name !== $scope.paymentOrder.counterpartyName || $scope.paymentOrder.selectedCounter.account !== $scope.paymentOrder.counterpartyIban;\n\t        };\n\n\t        // Create a contact if this user's preference\n\t        var createContact = function createContact() {\n\n\t            var contact = {\n\t                name: $scope.paymentOrder.counterpartyName\n\t            };\n\n\t            if ($scope.paymentOrder.type === $scope.poTypeEnum.bank) {\n\t                contact.account = $scope.usTransfer ? $scope.paymentOrder.counterpartyAccount : $scope.paymentOrder.counterpartyIban;\n\t            } else if ($scope.paymentOrder.type === $scope.poTypeEnum.p2pEmail) {\n\t                contact.email = $scope.paymentOrder.counterpartyEmail;\n\t            }\n\n\t            $scope.contactsModel.currentContact = contact;\n\n\t            $scope.contactsModel.createCounterParty(true);\n\t            lpCoreBus.publish('launchpad.contacts.load');\n\t        };\n\n\t        //reset the payment order model\n\t        var resetModel = function resetModel() {\n\n\t            //fix to reset isScheduledTransfer to correct value\n\t            var scheduledTransfer = $scope.paymentOrder ? $scope.paymentOrder.isScheduledTransfer : false;\n\n\t            $scope.paymentOrder = {\n\t                update: false,\n\t                uuid: generateUUID(),\n\t                dateAllOptions: [{ id: 'today', label: 'Transfer today' }, { id: 'date', label: 'Scheduled transfer' }],\n\t                dateOptions: 'today',\n\t                isScheduledTransfer: scheduledTransfer,\n\t                scheduledTransfer: {\n\t                    frequency: '',\n\t                    every: 1,\n\t                    intervals: [],\n\t                    startDate: new Date(),\n\t                    endDate: new Date(),\n\t                    timesToRepeat: 1\n\t                },\n\t                urgentTransfer: false,\n\t                scheduleDate: new Date(),\n\t                isOpenDate: false,\n\t                instructedCurrency: '',\n\t                counterpartyIban: '',\n\t                counterpartyAccount: '',\n\t                counterpartyEmail: '',\n\t                counterpartyAddress: '',\n\t                instructedAmount: '',\n\t                paymentReference: '',\n\t                paymentDescription: '',\n\t                counterpartyName: '',\n\t                date: '',\n\t                saveContact: autoSave === '' ? false : lpCoreUtils.parseBoolean(autoSave),\n\t                type: $scope.poTypeEnum.bank,\n\t                dirty: false\n\t            };\n\t        };\n\n\t        //set which transfer tab is currently active\n\t        var setActiveTransferTabs = function setActiveTransferTabs() {\n\n\t            //set all tabs active to false\n\t            for (var tab in $scope.activeTransferTab) {\n\t                if ($scope.activeTransferTab.hasOwnProperty(tab)) {\n\t                    $scope.activeTransferTab[tab] = false;\n\t                }\n\t            }\n\n\t            var found = false;\n\n\t            for (var item in $scope.poTypeEnum) {\n\t                if ($scope.poTypeEnum.hasOwnProperty(item)) {\n\t                    if ($scope.poTypeEnum[item] === $scope.paymentOrder.type) {\n\t                        $scope.activeTransferTab[item] = true;\n\t                        found = true;\n\t                    }\n\t                }\n\t            }\n\n\t            if (!found) {\n\t                $scope.activeTransferTab.bank = true;\n\t            }\n\t        };\n\n\t        //broadcaste a message for child scopes to reset their properties\n\t        var resetChildScopes = function resetChildScopes() {\n\t            $scope.$broadcast('reset', {});\n\t        };\n\n\t        var checkValidAccounts = function checkValidAccounts() {\n\n\t            if ($scope.paymentOrderForm.counterpartyIban && $scope.paymentOrder.type === $scope.poTypeEnum.bank) {\n\t                $scope.paymentOrderForm.counterpartyIban.$setValidity('notEqual', $scope.notEqualAccounts());\n\t            }\n\t        };\n\n\t        //build the payment order with details needed for a bank transaction\n\t        var buildBankPaymentOrder = function buildBankPaymentOrder(paymentOrder) {\n\t            paymentOrder.type = $scope.poTypeEnum.bank;\n\n\t            if ($scope.usTransfer) {\n\n\t                paymentOrder.counterpartyAccount = $scope.paymentOrder.counterpartyAccount;\n\n\t                if ($scope.paymentOrder.paymentDescription !== '') {\n\t                    paymentOrder.paymentDescription = $scope.paymentOrder.paymentDescription;\n\t                }\n\t            } else {\n\t                paymentOrder.counterpartyIban = $scope.paymentOrder.counterpartyIban;\n\n\t                //set payment reference OR payment description\n\t                if ($scope.paymentOrder.paymentReference === '' && $scope.paymentOrder.paymentDescription !== '') {\n\t                    paymentOrder.paymentDescription = $scope.paymentOrder.paymentDescription;\n\t                } else if ($scope.paymentOrder.paymentDescription === '' && $scope.paymentOrder.paymentReference !== '') {\n\t                    paymentOrder.paymentReference = $scope.paymentOrder.paymentReference;\n\t                }\n\t            }\n\n\t            //handle scheduled transfer\n\t            if ($scope.paymentOrder.isScheduledTransfer) {\n\t                paymentOrder.scheduledTransfer = {};\n\n\t                //add relevent scheduledTransfer fields\n\t                paymentOrder.scheduledTransfer.frequency = $scope.paymentOrder.scheduledTransfer.frequency;\n\t                paymentOrder.scheduledTransfer.every = $scope.paymentOrder.scheduledTransfer.every;\n\n\t                //send array as comma-delimited string to the backend service (due to issue with camel mashup)\n\t                paymentOrder.scheduledTransfer.intervals = $scope.paymentOrder.scheduledTransfer.intervals.join(',');\n\t                paymentOrder.scheduledTransfer.startDate = +new Date($scope.paymentOrder.scheduledTransfer.startDate);\n\t                paymentOrder.scheduledTransfer.endDate = +new Date($scope.paymentOrder.scheduledTransfer.endDate);\n\t                paymentOrder.paymentMode = paymentIntervals.RECURRING;\n\t            } else {\n\t                paymentOrder.onDate = +new Date($scope.paymentOrder.scheduleDate);\n\t                paymentOrder.paymentMode = paymentIntervals.NON_RECURRING;\n\t                paymentOrder.urgentTransfer = $scope.paymentOrder.urgentTransfer;\n\t            }\n\n\t            return paymentOrder;\n\t        };\n\n\t        //build the payment order with details needed for a P2P transfer\n\t        var buildP2PEmailPaymentOrder = function buildP2PEmailPaymentOrder(paymentOrder) {\n\t            paymentOrder.type = $scope.poTypeEnum.p2pEmail;\n\t            paymentOrder.onDate = +new Date($scope.paymentOrder.scheduleDate);\n\t            paymentOrder.paymentMode = paymentIntervals.NON_RECURRING;\n\t            paymentOrder.counterpartyEmail = $scope.paymentOrder.counterpartyEmail;\n\n\t            return paymentOrder;\n\t        };\n\n\t        //build the payment order with details needed for a P2P address transfer\n\t        var buildP2PAddressPaymentOrder = function buildP2PAddressPaymentOrder(paymentOrder) {\n\t            paymentOrder.type = $scope.poTypeEnum.p2pAddress;\n\t            paymentOrder.onDate = +new Date($scope.paymentOrder.scheduleDate);\n\t            paymentOrder.paymentMode = paymentIntervals.NON_RECURRING;\n\t            paymentOrder.counterpartyAddress = $scope.paymentOrder.counterpartyAddress;\n\n\t            return paymentOrder;\n\t        };\n\n\t        var initialize = function initialize() {\n\n\t            $scope.mediaDir = lpCoreUtils.getWidgetBaseUrl(widget) + '/media';\n\n\t            $scope.todaysDate = new Date();\n\n\t            $scope.hideFooter = lpCoreUtils.parseBoolean(widget.getPreference('hideFooter'));\n\t            /**\n\t             * Manage transfer type to hide/show certain parts of the form\n\t             */\n\t            $scope.poTypeEnum = transferTypes;\n\n\t            $scope.p2pService = lpP2P.api('enroll-service').setConfig({\n\t                url: lpCoreUtils.resolvePortalPlaceholders(lpWidget.getPreference('p2pEnrollmentEndpoint'))\n\t            });\n\n\t            $scope.p2pService.getAll().then(function (response) {\n\t                $scope.userEnrolledForP2P = true;\n\t            }, function (response) {\n\n\t                lpCoreBus.subscribe('launchpad-retail.userP2PEnrolled', function (data) {\n\t                    $scope.userEnrolledForP2P = data.enrolled;\n\t                });\n\n\t                if (response.status === 404) {\n\t                    //user not enrolled\n\t                    $scope.userEnrolledForP2P = false;\n\t                    $scope.p2pUserEnrollment = {\n\t                        email: '',\n\t                        mobile: '',\n\t                        receivingAccountNumber: '',\n\t                        customerId: ''\n\t                    };\n\t                }\n\t            });\n\n\t            $scope.urgentTranfer = false;\n\n\t            $scope.locale = widget.getPreference('locale');\n\n\t            //flag for which kind of transfer this is\n\t            $scope.usTransfer = $scope.locale === 'en-US';\n\n\t            $scope.title = widget.getPreference('title');\n\n\t            $scope.accountsTopBalance = widget.getPreferenceFromParents('defaultBalanceView') || 'current';\n\t            $scope.disableCurrencySelection = widget.getPreference('disableCurrencySelection');\n\n\t            $scope.modalShown = false;\n\t            $scope.exchangeRateModalShown = false;\n\t            $scope.ibanModalShown = false;\n\t            $scope.routingModalShown = false;\n\n\t            $scope.templates = {\n\t                saveContacts: 'templates/save-contacts.html',\n\t                urgentTransfer: 'templates/urgent-transfer.html',\n\t                exchangeRate: 'templates/exchange-rate.html',\n\t                iban: 'templates/iban.html',\n\t                routingAndAccount: 'templates/routing-and-account-number.html'\n\t            };\n\n\t            $scope.accountsModel = AccountsModel;\n\t            $scope.accountsModel.setConfig({\n\t                accountsEndpoint: widget.getPreference('accountsDataSrc')\n\t            });\n\n\t            $scope.paymentOrderModel = PaymentOrderModel.createModel();\n\n\t            $scope.dateOptions = {\n\t                'show-button-bar': false,\n\t                'show-weeks': false\n\t            };\n\n\t            $scope.selectAccount = function (params) {\n\t                if (!$scope.accountsModel.accounts) {\n\t                    return;\n\t                }\n\n\t                $.each($scope.accountsModel.accounts, function (index, account) {\n\t                    if (params.accountId === account.id) {\n\t                        $scope.accountsModel.selected = account;\n\t                    }\n\t                });\n\t                applyScope($scope);\n\t            };\n\n\t            var promise = $scope.accountsModel.load();\n\n\t            promise.then(function () {\n\n\t                if (lpCoreUtils.parseBoolean(widget.getPreference('forceAccountSelection'))) {\n\t                    return;\n\t                }\n\n\t                if (!$scope.accountsModel.selected && $scope.accountsModel.accounts && $scope.accountsModel.accounts.length > 0) {\n\t                    var defaultAccount = widget.getPreferenceFromParents('defaultAccount');\n\t                    if (defaultAccount) {\n\t                        $scope.accountsModel.selected = $scope.accountsModel.findByAccountNumber(defaultAccount);\n\t                    }\n\n\t                    if ($scope.accountsModel.selected) {\n\t                        return;\n\t                    }\n\n\t                    return lpUsersPreference.read().then(function (prefs) {\n\t                        $scope.accountsModel.selected = $scope.accountsModel.accounts.filter(function (account) {\n\t                            return account.identifier === prefs.data.defaultAccount;\n\t                        })[0] || $scope.accountsModel.accounts[0];\n\t                    });\n\t                }\n\n\t                //now safe to listen for account Select message\n\t                lpCoreBus.subscribe('launchpad-retail.accountSelected', $scope.selectAccount);\n\t            })['catch'](function () {\n\t                $scope.accountsModel.error = 'accountsLoadFailed';\n\t            });\n\n\t            lpUserDetails.get(lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('profileDetailsEndpoint'))).then(function (userDetails) {\n\t                $scope.userDetails = userDetails;\n\t            });\n\n\t            $scope.currencyModel = lpTransactionsCurrency.api();\n\n\t            lpTransactionsCurrency.setConfig({\n\t                defaultCurrencyEndpoint: lpWidget.getPreference('defaultCurrencyEndpoint'),\n\t                currencyListEndpoint: lpWidget.getPreference('currencyListEndpoint')\n\t            });\n\n\t            $scope.currencyModel.loadDefaultCurrency().then(function (data) {\n\t                $scope.currencyModel.configureDefaultCurrency(data);\n\n\t                $scope.paymentOrder.instructedCurrency = $scope.paymentOrder.instructedCurrency === '' ? $scope.currencyModel.defaultCurrency.currency_code : $scope.paymentOrder.instructedCurrency;\n\t                $scope.currencyModel.loadOtherCurrencies().then(function () {\n\n\t                    //if there is payment order data saved, select the appropriate currency\n\t                    var currency = $scope.paymentOrder.instructedCurrency === '' ? $scope.currencyModel.defaultCurrency.currency_code : $scope.paymentOrder.instructedCurrency;\n\t                    $scope.currencyModel.selectCurrency(currency);\n\t                });\n\t            });\n\n\t            $scope.contactsModel = new ContactsModel({\n\t                contacts: lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('contactListDataSrc')),\n\t                contactData: lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('contactDataSrc')),\n\t                contactDetails: lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('contactDetailsDataSrc'))\n\n\t            });\n\t            $scope.contactsModel.loadContacts();\n\n\t            $scope.ibanModel = IbanModel.getInstance({\n\t                countryListEndpoint: widget.getPreference('ibanDataSrc'),\n\t                enableCountrySearch: lpCoreUtils.parseBoolean(widget.getPreference('enableIbanCountrySearch'))\n\t            });\n\t            $scope.ibanModel.loadCountryList().then(function (response) {\n\t                $scope.ibanModel.validate();\n\t            });\n\n\t            resetModel();\n\n\t            $scope.toggleTabs = {\n\t                oneTime: $scope.paymentOrder.isScheduledTransfer ? false : true,\n\t                scheduled: $scope.paymentOrder.isScheduledTransfer ? true : false\n\t            };\n\n\t            $scope.activeTransferTab = {\n\t                bank: true,\n\t                p2pEmail: false,\n\t                p2pAddress: false\n\t            };\n\n\t            //persisting form data that has been filled in but not processed\n\t            $scope.persistenceManager = formDataPersistence.getInstance();\n\n\t            //reload previously saved form data\n\t            if ($scope.persistenceManager.isFormSaved(formName)) {\n\n\t                var newPaymentOrder = $scope.persistenceManager.getFormData(formName);\n\n\t                var excludedProperties = ['uuid', 'scheduleDate', 'update'];\n\n\t                //extend the properties of the new payment order to the one on the scope\n\t                for (var key in newPaymentOrder) {\n\t                    if (newPaymentOrder.hasOwnProperty(key) && excludedProperties.indexOf(key) === -1) {\n\t                        $scope.paymentOrder[key] = newPaymentOrder[key];\n\t                    }\n\t                }\n\n\t                //reset active transfer tabs\n\t                setActiveTransferTabs();\n\t            }\n\n\t            // close all modal popups when the widget is closed (perspective minimized on launcher container and widget on springboard)\n\t            widget.addEventListener('PerspectiveModified', function (event) {\n\t                if (event.newValue === 'Minimized' || event.newValue === 'Widget') {\n\t                    $scope.hideAllModals();\n\t                }\n\t            });\n\n\t            //deep watch the payment order object, save form data when object changes\n\t            $scope.$watch('paymentOrder', function (newValue, oldValue) {\n\n\t                if (newValue !== oldValue) {\n\t                    $scope.persistenceManager.saveFormData(formName, $scope.paymentOrder);\n\n\t                    if (newValue && newValue.type !== $scope.poTypeEnum.bank) {\n\t                        $scope.setScheduledTransfer('one-time');\n\t                    }\n\t                }\n\t            }, true);\n\n\t            lpCoreBus.subscribe('launchpad-retail.requestMoneyTransfer.setTab', function (data) {\n\t                if (data.tab) {\n\t                    $scope.paymentOrder.type = data.tab;\n\t                    setActiveTransferTabs();\n\t                }\n\t            });\n\n\t            // UPDATE: if we want to update a transfer order\n\t            lpCoreBus.subscribe('lpMoneyTransfer.update', function (form) {\n\t                $scope.paymentOrder = form;\n\t                $scope.currencyModel.selectCurrency($scope.paymentOrder.instructedCurrency);\n\t                $timeout(function () {\n\t                    $scope.selectAccount(form);\n\t                });\n\t            });\n\n\t            applyScope($scope);\n\t        };\n\n\t        /**\n\t         * Scope functions\n\t         */\n\n\t        $scope.openCalendar = function ($event) {\n\t            //open calendar on click event or \"enter\" and \"space\" key press events\n\t            if ($event.type === 'click' || $event.which === 32 || $event.which === 13) {\n\t                $event.preventDefault();\n\t                $event.stopPropagation();\n\n\t                $scope.paymentOrder.isOpenDate = true;\n\t            }\n\t        };\n\n\t        //sets the payment orders transfer type\n\t        $scope.setPaymentOrderType = function (paymentOrderType) {\n\t            $scope.paymentOrder.type = paymentOrderType;\n\t        };\n\n\t        $scope.submitForm = function (event) {\n\t            var xhr;\n\n\t            if (event && event.preventDefault) {\n\t                event.preventDefault();\n\t            }\n\n\t            $scope.persistenceManager.removeFormData(formName);\n\n\t            checkValidAccounts();\n\n\t            var processPaymentOrder = true;\n\n\t            $scope.paymentOrderForm.submitted = true;\n\t            if ($scope.paymentOrderForm.$invalid) {\n\t                $scope.$broadcast('lp.retail.new-transfer.errors');\n\t                return false;\n\t            }\n\n\t            var paymentOrder = PaymentOrderModel.createModel();\n\t            var selectedAccount = $scope.accountsModel.selected;\n\n\t            //add relevent fields to payment order object\n\t            paymentOrder.uuid = $scope.paymentOrder.uuid;\n\t            paymentOrder.counterpartyName = $scope.paymentOrder.counterpartyName;\n\t            paymentOrder.instructedAmount = $scope.paymentOrder.instructedAmount;\n\t            paymentOrder.instructedCurrency = $scope.paymentOrder.instructedCurrency;\n\t            //if for some reason the instructed currency has been set blank it defaults to account default\n\t            if (paymentOrder.instructedCurrency === '') {\n\t                paymentOrder.instructedCurrency = selectedAccount.currency;\n\t            }\n\t            paymentOrder.accountId = selectedAccount.id;\n\t            paymentOrder.accountName = selectedAccount.alias;\n\n\t            switch ($scope.paymentOrder.type) {\n\t                //BANK TRANSFER\n\t                case $scope.poTypeEnum.bank:\n\t                    paymentOrder = buildBankPaymentOrder(paymentOrder);\n\t                    break;\n\t                //P2P Email Transfer\n\t                case $scope.poTypeEnum.p2pEmail:\n\t                    //enroll user if not already enrolled\n\t                    if (!$scope.userEnrolledForP2P) {\n\t                        $scope.p2pService.enroll({\n\t                            email: $scope.p2pUserEnrollment.email,\n\t                            accountNumber: $scope.p2pUserEnrollment.receivingAccountNumber\n\t                        }).then(function (response) {\n\n\t                            lpCoreBus.publish('launchpad-retail.userP2PEnrolled', {\n\t                                enrolled: true\n\t                            });\n\n\t                            lpCoreBus.publish('launchpad-retail.p2pEnrollmentComplete', {\n\t                                verified: true\n\t                            });\n\t                        }, function (response) {\n\t                            $scope.p2pService.error = 'An error occurred while connecting to the P2P Service';\n\t                            processPaymentOrder = false;\n\t                        });\n\t                    }\n\n\t                    paymentOrder = buildP2PEmailPaymentOrder(paymentOrder);\n\t                    break;\n\t                case $scope.poTypeEnum.p2pAddress:\n\t                    if (!$scope.userEnrolledForP2P) {\n\t                        $scope.p2pService.enroll({\n\t                            email: $scope.p2pUserEnrollment.email,\n\t                            accountNumber: $scope.p2pUserEnrollment.receivingAccountNumber\n\t                        }).then(function (response) {}, function (response) {\n\t                            $scope.p2pService.error = 'An error occurred while connecting to the P2P Service';\n\t                            processPaymentOrder = false;\n\t                        });\n\t                    }\n\n\t                    paymentOrder = buildP2PAddressPaymentOrder(paymentOrder);\n\t                    break;\n\t                default:\n\t                    paymentOrder = buildBankPaymentOrder(paymentOrder);\n\t                    break;\n\t            }\n\n\t            // Autosave contact if not an existing one\n\t            if ($scope.paymentOrder.saveContact && isNewContact()) {\n\t                createContact();\n\t            }\n\n\t            if (processPaymentOrder) {\n\t                xhr = paymentOrder.createOrder(paymentOrder); // Creates or updates payemnt model\n\n\t                //on success\n\t                xhr.then(function (res) {\n\t                    lpCoreUpdate.trigger('newPaymentOrderInitiated'); // update models on demand\n\t                    lpCoreBus.publish('Launcher:openWidget', { widgetName: 'review-transfers-v1' });\n\t                    lpCoreBus.publish('launchpad-retail.paymentOrderInitiated', { paymentId: paymentOrder.id });\n\t                    $scope.resetForm();\n\t                }, function (err) {\n\t                    $scope.errors.updateServerError = true;\n\t                    $timeout(function () {\n\t                        $scope.errors.updateServerError = false;\n\t                    }, 5000);\n\t                    console.log('Server error: ' + err.statusText);\n\t                });\n\t            }\n\t        };\n\n\t        if ($scope.hideFooter) {\n\t            lpCoreBus.subscribe('transfer:submit', $scope.submitForm);\n\t        }\n\n\t        $scope.onSaveContactsChange = function () {\n\t            if (autoSave === '' && $scope.paymentOrder.saveContact) {\n\t                $scope.toggleModal(); // Show\n\t            }\n\t        };\n\n\t        $scope.setContactPreference = function (response) {\n\t            // Call backend service to store this preference\n\t            autoSave = !!response;\n\t            widget.model.setPreference('autosaveContactsPreference', '' + autoSave);\n\t            widget.model.save();\n\n\t            $scope.toggleModal(); // Hide\n\t        };\n\n\t        $scope.showContactsInfo = function () {\n\t            $scope.showContactsOptions = false;\n\t            $scope.toggleModal(); // Hide\n\t        };\n\n\t        $scope.toggleSaveToContactsModal = function () {\n\t            $scope.showContactsOptions = !$scope.showContactsOptions;\n\t        };\n\n\t        $scope.toggleAutosuggest = function () {\n\t            $(widget.body).find('[name=counterpartyName]').trigger('toggle.autosuggest');\n\t        };\n\n\t        $scope.cancelForm = function () {\n\t            lpCoreBus.publish('launchpad-retail.closeActivePanel');\n\t        };\n\n\t        $scope.resetForm = function () {\n\n\t            resetModel();\n\t            resetChildScopes();\n\t            setActiveTransferTabs();\n\n\t            $scope.currencyModel.selectCurrency($scope.currencyModel.defaultCurrency.currency_code);\n\n\t            $scope.paymentOrderForm.submitted = false;\n\t            $scope.paymentOrderForm.$setPristine();\n\n\t            $scope.persistenceManager.removeFormData(formName);\n\t        };\n\n\t        $scope.resetCounterparty = function () {\n\t            $scope.$apply(function () {\n\t                $scope.paymentOrder.counterpartyIban = '';\n\t            });\n\t        };\n\n\t        $scope.updateCounterparty = function (accountDetails) {\n\t            // Store the selection as reference, to compare\n\t            // later if the contact is a new one or not.\n\t            if (accountDetails === null || accountDetails === undefined) {\n\t                $scope.paymentOrder.counterpartyIban = '';\n\n\t                if ($scope.paymentOrder.type === $scope.poTypeEnum.bank) {\n\t                    if ($scope.usTransfer) {\n\t                        $scope.paymentOrder.counterpartyAccount = '';\n\t                    } else {\n\t                        $scope.paymentOrder.counterpartyIban = '';\n\t                    }\n\t                } else if ($scope.paymentOrder.type === $scope.poTypeEnum.p2pEmail) {\n\t                    $scope.paymentOrder.counterpartyEmail = '';\n\t                }\n\n\t                $scope.paymentOrderForm.$setDirty();\n\n\t                return;\n\t            }\n\n\t            $scope.paymentOrder.selectedCounter = {\n\t                name: $scope.paymentOrder.counterpartyName,\n\t                account: accountDetails.account\n\t            };\n\n\t            $scope.paymentOrder.type = accountDetails.type;\n\t            setActiveTransferTabs();\n\n\t            if ($scope.paymentOrder.type === $scope.poTypeEnum.bank) {\n\t                if ($scope.usTransfer) {\n\t                    $scope.paymentOrder.counterpartyAccount = accountDetails.account;\n\t                } else {\n\t                    $scope.paymentOrder.counterpartyIban = accountDetails.account;\n\t                }\n\t            } else if ($scope.paymentOrder.type === $scope.poTypeEnum.p2pEmail) {\n\t                $scope.paymentOrder.counterpartyEmail = accountDetails.account;\n\t            }\n\n\t            $scope.paymentOrderForm.$setDirty();\n\t        };\n\n\t        // Validate that accounts ( from / to ) are not equal\n\t        $scope.notEqualAccounts = function () {\n\t            if (!$scope.accountsModel.selected) {\n\t                return false;\n\t            }\n\n\t            return $scope.accountsModel.selected.iban !== $scope.paymentOrder.counterpartyIban;\n\t        };\n\n\t        $scope.onAccountChange = function () {\n\t            checkValidAccounts();\n\t        };\n\n\t        $scope.toggleModal = function () {\n\t            $scope.showContactsOptions = !$scope.showContactsOptions;\n\t        };\n\n\t        //close the exchange rate modal\n\t        $scope.toggleExchangeRateModal = function () {\n\t            $scope.exchangeRateModalShown = !$scope.exchangeRateModalShown;\n\t        };\n\n\t        $scope.toggleSaveContactDetailsModal = function () {\n\t            $scope.modalShown = !$scope.modalShown;\n\t        };\n\n\t        $scope.toggleIbanModal = function () {\n\t            $scope.ibanModalShown = !$scope.ibanModalShown;\n\t        };\n\n\t        $scope.toggleRoutingNumberModal = function () {\n\t            $scope.routingModalShown = !$scope.routingModalShown;\n\t        };\n\n\t        $scope.hideAllModals = function () {\n\t            $scope.urgentTransferModalShown = false;\n\t            $scope.exchangeRateModalShown = false;\n\t            $scope.ibanModalShown = false;\n\t            $scope.modalShown = false;\n\t        };\n\n\t        $scope.toggleUrgentTransferModal = function () {\n\t            $scope.urgentTransferModalShown = !$scope.urgentTransferModalShown;\n\t        };\n\n\t        $scope.setScheduledTransfer = function (value) {\n\n\t            if (value === 'scheduled') {\n\t                $scope.paymentOrder.isScheduledTransfer = true;\n\t                $scope.toggleTabs.oneTime = false;\n\t                $scope.toggleTabs.scheduled = true;\n\t            } else if (value === 'one-time') {\n\t                $scope.paymentOrder.isScheduledTransfer = false;\n\t                $scope.toggleTabs.oneTime = true;\n\t                $scope.toggleTabs.scheduled = false;\n\t            }\n\t        };\n\n\t        $scope.$on('reset', function () {\n\t            $scope.paymentOrder.isScheduledTransfer = false;\n\t            $scope.toggleTabs.oneTime = true;\n\t            $scope.toggleTabs.scheduled = false;\n\t        });\n\n\t        /**\n\t         * Other set up\n\t         */\n\n\t        widget.addEventListener('preferencesSaved', function () {\n\t            widget.refreshHTML();\n\t            initialize();\n\t        });\n\n\t        initialize();\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    var $ = window.jQuery;\n\n\t    /**\n\t     * UPDATE: special ugly directive which should modify widget's layout\n\t     *         in order to provide update functionality (and remove those\n\t     *         changes on the widget's exit.\n\t     */\n\t    // @ngInject\n\t    exports.lpTransactionUpdateLayout = function (lpCoreBus, $timeout) {\n\t        return {\n\t            restrict: 'A',\n\t            scope: {\n\t                paymentOrder: '=lpTransactionUpdateLayout'\n\t            },\n\t            link: function link(scope, el, attrs, ngModel) {\n\t                // sorry for this jQuery ugliness :(\n\t                var $launcher = $(el[0]).closest('.lp-launcher-area');\n\t                var $close = $launcher.find('.close');\n\t                var $title = $launcher.find('.widget-title span');\n\t                var defaultTitle = $title.text();\n\n\t                scope.$watch('paymentOrder.update', function (update) {\n\t                    if (update) {\n\t                        $timeout(function () {\n\t                            $title.text('Update Transfer');\n\t                        });\n\t                    } else {\n\t                        $timeout(function () {\n\t                            $title.text(defaultTitle);\n\t                        });\n\t                    }\n\t                });\n\n\t                $close.click(function () {\n\t                    // on exit we should remove 'signs' of updating process\n\t                    scope.paymentOrder.update = false;\n\t                });\n\n\t                lpCoreBus.subscribe('launchpad-retail.closeActivePanel', function () {\n\t                    // on exit we should remove 'signs' of updating process\n\t                    scope.paymentOrder.update = false;\n\t                });\n\t            }\n\t        };\n\t    };\n\n\t    // @ngInject\n\t    exports.lpFutureTime = function () {\n\t        return {\n\n\t            require: '?ngModel',\n\n\t            link: function link(scope, elm, attrs, ngModel) {\n\n\t                var now = new Date();\n\t                now.setDate(now.getDate() - 1);\n\t                now = now.getTime();\n\n\t                ngModel.$parsers.unshift(function (value) {\n\t                    var date;\n\n\t                    // Empty field\n\t                    if (!value) {\n\t                        ngModel.$setValidity('lpFutureTime', true);\n\t                        return null;\n\t                    }\n\n\t                    date = Date.parse(value);\n\n\t                    // Unparsable date\n\t                    if (isNaN(date) || date < 0) {\n\t                        ngModel.$setValidity('lpFutureTime', false);\n\t                        return value;\n\t                    }\n\n\t                    // Valid date, but in the past or present\n\t                    if (date <= now) {\n\t                        ngModel.$setValidity('lpFutureTime', false);\n\t                        return value;\n\t                    }\n\n\t                    // Future Date\n\t                    ngModel.$setValidity('lpFutureTime', true);\n\t                    return value;\n\t                });\n\t            }\n\t        };\n\t    };\n\n\t    // @ngInject\n\t    exports.lpSmartsuggest = function (lpCoreUtils, ContactsModel, SmartSuggestEngine, SmartSuggestFormatter) {\n\n\t        return {\n\t            restrict: 'A',\n\t            scope: {\n\t                'lpSmartsuggestSelect': '&',\n\t                'lpSmartsuggestClear': '&',\n\t                'contacts': '=lpContacts',\n\t                'accounts': '=lpAccounts',\n\t                'model': '=ngModel'\n\t            },\n\t            link: function link(scope, element, attrs) {\n\n\t                //setup the smart suggest engine\n\t                var smartSuggest = new SmartSuggestEngine({\n\t                    showTitles: true\n\t                });\n\t                smartSuggest.addSuggester({\n\t                    data: [],\n\t                    suggest: SmartSuggestEngine.builtIn.getContactSuggestions\n\t                });\n\n\t                scope.$watch('accounts', function (accounts) {\n\t                    smartSuggest.addSuggester({\n\t                        data: accounts,\n\t                        suggest: SmartSuggestEngine.builtIn.getAccountSuggestions,\n\t                        type: SmartSuggestEngine.types.ACCOUNT,\n\t                        options: {\n\t                            showAll: true\n\t                        }\n\t                    });\n\t                });\n\n\t                scope.$watch('contacts', function (contacts) {\n\t                    //TODO: why is this not an empty array when empty?\n\t                    if (lpCoreUtils.isArray(contacts)) {\n\t                        smartSuggest.addSuggester({\n\t                            data: contacts,\n\t                            suggest: SmartSuggestEngine.builtIn.getContactSuggestions,\n\t                            type: SmartSuggestEngine.types.CONTACT,\n\t                            options: {\n\t                                showAll: true\n\t                            }\n\t                        });\n\t                    }\n\t                });\n\n\t                var formatter = new SmartSuggestFormatter({\n\t                    locale: 'en-US'\n\t                });\n\n\t                // https://github.com/angular/angular.js/issues/1924\n\t                scope.$watch('model', function () {\n\t                    scope.$eval(attrs.ngModel + ' = model');\n\t                });\n\n\t                scope.$watch(attrs.ngModel, function (val) {\n\t                    scope.model = val;\n\t                });\n\n\t                $(element).autosuggest({\n\t                    lookup: function lookup(q) {\n\t                        var suggs = smartSuggest.getSuggestions(q);\n\t                        suggs = suggs.map(function (suggestion) {\n\t                            var values = formatter.format(suggestion);\n\n\t                            var displayValue;\n\t                            if (suggestion.contact) {\n\t                                displayValue = suggestion.contact.name;\n\t                            } else if (values.length === 2) {\n\t                                displayValue = values[0] + ' to ' + values[1];\n\t                            } else {\n\t                                displayValue = values[0];\n\t                            }\n\n\t                            return {\n\t                                data: suggestion,\n\t                                value: displayValue\n\t                            };\n\t                        });\n\t                        return suggs;\n\t                    },\n\t                    onSelect: function onSelect(suggestion) {\n\t                        var account, name;\n\n\t                        if (suggestion.data.type === SmartSuggestEngine.types.TITLE) {\n\t                            return false;\n\t                        }\n\n\t                        switch (suggestion.data.type) {\n\t                            case SmartSuggestEngine.types.CONTACT:\n\t                                name = suggestion.data.contact.name;\n\t                                account = suggestion.data.contact.account;\n\t                                break;\n\t                            case SmartSuggestEngine.types.ACCOUNT:\n\t                                name = suggestion.data.account.name;\n\t                                account = suggestion.data.account.iban;\n\t                                break;\n\t                        }\n\t                        scope.model = name;\n\t                        scope.lpSmartsuggestSelect({ account: account });\n\t                        return false;\n\t                    },\n\t                    onClear: function onClear() {\n\t                        scope.lpSmartsuggestClear();\n\t                    },\n\t                    formatResult: function formatResult(suggestion) {\n\t                        return formatter.getSuggestionHtml(suggestion.data);\n\t                    },\n\t                    autoSelectFirst: false,\n\t                    minChars: 0\n\t                });\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** scripts/main.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 5031e299ef87f9d7f75b\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    module.name = 'widgets-new-transfer';\n\n    var base = require('base');\n    var core = require('core');\n    var ui = require('ui');\n    var accounts = require('module-accounts');\n    var contacts = require('module-contacts');\n    var p2p = require('module-p2p');\n    var payments = require('module-payments');\n    var transactions = require('module-transactions');\n    var users = require('module-users');\n\n    var deps = [\n        core.name,\n        ui.name,\n        accounts.name,\n        payments.name,\n        p2p.name,\n        transactions.name,\n        contacts.name,\n        users.name\n    ];\n\n    // @ngInject\n    function run(lpWidget, lpPayments, lpCoreBus) {\n        lpPayments.setConfig({\n            'paymentsEndpoint': lpWidget.getPreference('paymentOrdersDataSrc')\n        });\n        if(lpWidget && lpWidget.model && lpWidget.model.name){\n            lpCoreBus.publish('cxp.item.loaded', { id: lpWidget.model.name });\n        }\n    }\n\n    module.exports = base.createModule(module.name, deps)\n        .factory(require('./form-data-persistence'))\n        .controller(require('./controllers'))\n        .directive(require('./directives'))\n        .run(run);\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/main.js\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"base\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"core\"\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ui\"\n ** module id = 5\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-accounts\"\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-contacts\"\n ** module id = 7\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-p2p\"\n ** module id = 8\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-payments\"\n ** module id = 9\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-transactions\"\n ** module id = 10\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-users\"\n ** module id = 11\n ** module chunks = 0\n **/","define(function(require, exports, module) {\n\n    'use strict';\n\n    var base = require('base');\n\n    // @ngInject\n    exports.formDataPersistence = function() {\n\n        function hasStorage() {\n            var uid = new Date().getTime().toString();\n            var storage;\n            var result;\n            try {\n                (storage = window.localStorage).setItem(uid, uid);\n                result = storage.getItem(uid) === uid;\n                storage.removeItem(uid);\n                return result && storage;\n            } catch (err) {\n                base.log.warn(err);\n            }\n        }\n\n\n        /**\n         * Creates a new FormDataPersistenceController instance\n         * @constructor\n         */\n        var FormDataPersistenceController = function() {\n        };\n\n        /**\n         * Save the form data in session storage with the form name as the key\n         * @param formName a string value of the form/widget name\n         * @param a JS object representing the values of the form\n         */\n        FormDataPersistenceController.prototype.saveFormData = function(formName, formObject) {\n            if (hasStorage()) {\n\t\tvar stringifiedFormObject = JSON.stringify(formObject);\n\t\twindow.sessionStorage.setItem(formName, stringifiedFormObject);\n            }\n        };\n\n        /**\n         * Removes saved data from session storage by form name\n         * @param formName the name of the widget form to remove\n         */\n        FormDataPersistenceController.prototype.removeFormData = function(formName) {\n            if (hasStorage()) {\n                window.sessionStorage.removeItem(formName);\n            }\n        };\n\n        /**\n         * Return the stored string of the form object\n         * @param widget form name\n         */\n        FormDataPersistenceController.prototype.getFormData = function(formName) {\n\n            try {\n                var widgetForm = JSON.parse(window.sessionStorage.getItem(formName));\n            } catch (err) {\n                base.log.warn('Can\\'t parse form\\'s stored storage data.');\n            }\n\n            var formatObject = function(thisObject) {\n                for (var key in thisObject) {\n                    if (thisObject.hasOwnProperty(key)) {\n                        if (key.toLowerCase().indexOf('date') > -1 && typeof thisObject[key] !== 'boolean') {\n                            var testDate = new Date(thisObject[key]);\n                            //TODO: investigate better approach\n                            if (!isNaN(testDate.getTime())) {\n                                //a valid date\n                                thisObject[key] = testDate;\n                            }\n                        }\n\n                        if (thisObject[key] instanceof Object) {\n                            formatObject(thisObject[key]);\n                        }\n                    }\n                }\n\n                return thisObject;\n            };\n\n            formatObject(widgetForm);\n\n            return widgetForm;\n        };\n\n        /**\n         * Returns a flag if the form is currently saved\n         * @formName the name of the widget form to check\n         */\n        FormDataPersistenceController.prototype.isFormSaved = function(formName) {\n            var saved = window.sessionStorage.getItem(formName);\n            return saved === null ? false : true;\n        };\n\n        return {\n            getInstance: function() {\n                return new FormDataPersistenceController();\n            }\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/form-data-persistence.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    function applyScope($scope) {\n        if (!$scope.$$phase) {\n            $scope.$apply();\n        }\n    }\n\n    function generateUUID() {\n        var d = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = (d + Math.random() * 16) % 16 | 0;\n            d = Math.floor(d / 16);\n            return (c === 'x' ? r : (r & 0x7 | 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    var $ = window.jQuery;\n\n    // @ngInject\n    exports.NewTransferController = function($scope, $rootScope, $rootElement, $timeout, lpCoreUtils, lpCoreBus, AccountsModel, ContactsModel, lpTransactionsCurrency, IbanModel, lpWidget, customerId, formDataPersistence, lpP2P, transferTypes, lpPayments, lpUIResponsive, lpCoreUpdate, lpUsersPreference, lpUserDetails) {\n        $scope.errors = {};\n\n        var widget = lpWidget;\n        var PaymentOrderModel = lpPayments.api();\n        // Wheter to auto save new contacts\n        var autoSave = widget.getPreference('autosaveContactsPreference');\n\n        var formName = 'new-transfer-form';\n\n        var paymentIntervals = {\n            RECURRING: 'RECURRING',\n            NON_RECURRING: 'NON_RECURRING'\n        };\n\n        /**\n         * Regular function\n         */\n\n        //is the recipient a new contact?\n        var isNewContact = function() {\n            if ($scope.contactsModel.findByName($scope.paymentOrder.counterpartyName)) {\n                return false;\n            }\n            return (!$scope.paymentOrder.selectedCounter ||\n                $scope.paymentOrder.selectedCounter.name !== $scope.paymentOrder.counterpartyName ||\n                $scope.paymentOrder.selectedCounter.account !== $scope.paymentOrder.counterpartyIban);\n        };\n\n        // Create a contact if this user's preference\n        var createContact = function() {\n\n            var contact = {\n                name: $scope.paymentOrder.counterpartyName\n            };\n\n            if($scope.paymentOrder.type === $scope.poTypeEnum.bank) {\n                contact.account = $scope.usTransfer ? $scope.paymentOrder.counterpartyAccount : $scope.paymentOrder.counterpartyIban;\n            } else if($scope.paymentOrder.type === $scope.poTypeEnum.p2pEmail) {\n                contact.email = $scope.paymentOrder.counterpartyEmail;\n            }\n\n            $scope.contactsModel.currentContact = contact;\n\n            $scope.contactsModel.createCounterParty(true);\n            lpCoreBus.publish('launchpad.contacts.load');\n        };\n\n        //reset the payment order model\n        var resetModel = function() {\n\n            //fix to reset isScheduledTransfer to correct value\n            var scheduledTransfer = $scope.paymentOrder ? $scope.paymentOrder.isScheduledTransfer : false;\n\n            $scope.paymentOrder = {\n                update: false,\n                uuid: generateUUID(),\n                dateAllOptions: [\n                    { id: 'today', label: 'Transfer today' },\n                    { id: 'date', label: 'Scheduled transfer' }\n                ],\n                dateOptions: 'today',\n                isScheduledTransfer: scheduledTransfer,\n                scheduledTransfer: {\n                    frequency: '',\n                    every: 1,\n                    intervals: [],\n                    startDate: new Date(),\n                    endDate: new Date(),\n                    timesToRepeat: 1\n                },\n                urgentTransfer: false,\n                scheduleDate: new Date(),\n                isOpenDate: false,\n                instructedCurrency: '',\n                counterpartyIban: '',\n                counterpartyAccount: '',\n                counterpartyEmail: '',\n                counterpartyAddress: '',\n                instructedAmount: '',\n                paymentReference: '',\n                paymentDescription: '',\n                counterpartyName: '',\n                date: '',\n                saveContact: autoSave === '' ? false : lpCoreUtils.parseBoolean(autoSave),\n                type: $scope.poTypeEnum.bank,\n                dirty: false\n            };\n        };\n\n        //set which transfer tab is currently active\n        var setActiveTransferTabs = function() {\n\n            //set all tabs active to false\n            for(var tab in $scope.activeTransferTab) {\n                if($scope.activeTransferTab.hasOwnProperty(tab)) {\n                    $scope.activeTransferTab[tab] = false;\n                }\n            }\n\n            var found = false;\n\n            for(var item in $scope.poTypeEnum) {\n                if($scope.poTypeEnum.hasOwnProperty(item)) {\n                    if($scope.poTypeEnum[item] === $scope.paymentOrder.type) {\n                        $scope.activeTransferTab[item] = true;\n                        found = true;\n                    }\n                }\n            }\n\n            if(!found) {\n                $scope.activeTransferTab.bank = true;\n            }\n        };\n\n        //broadcaste a message for child scopes to reset their properties\n        var resetChildScopes = function() {\n            $scope.$broadcast('reset', {});\n        };\n\n        var checkValidAccounts = function() {\n\n            if($scope.paymentOrderForm.counterpartyIban && $scope.paymentOrder.type === $scope.poTypeEnum.bank) {\n                $scope.paymentOrderForm.counterpartyIban.$setValidity('notEqual', $scope.notEqualAccounts());\n            }\n        };\n\n\n        //build the payment order with details needed for a bank transaction\n        var buildBankPaymentOrder = function(paymentOrder) {\n            paymentOrder.type = $scope.poTypeEnum.bank;\n\n            if($scope.usTransfer) {\n\n                paymentOrder.counterpartyAccount = $scope.paymentOrder.counterpartyAccount;\n\n                if ($scope.paymentOrder.paymentDescription !== '') {\n                    paymentOrder.paymentDescription = $scope.paymentOrder.paymentDescription;\n                }\n            } else {\n                paymentOrder.counterpartyIban = $scope.paymentOrder.counterpartyIban;\n\n                //set payment reference OR payment description\n                if ($scope.paymentOrder.paymentReference === '' && $scope.paymentOrder.paymentDescription !== '') {\n                    paymentOrder.paymentDescription = $scope.paymentOrder.paymentDescription;\n                } else if ($scope.paymentOrder.paymentDescription === '' && $scope.paymentOrder.paymentReference !== '') {\n                    paymentOrder.paymentReference = $scope.paymentOrder.paymentReference;\n                }\n            }\n\n            //handle scheduled transfer\n            if($scope.paymentOrder.isScheduledTransfer) {\n                paymentOrder.scheduledTransfer = {};\n\n                //add relevent scheduledTransfer fields\n                paymentOrder.scheduledTransfer.frequency = $scope.paymentOrder.scheduledTransfer.frequency;\n                paymentOrder.scheduledTransfer.every = $scope.paymentOrder.scheduledTransfer.every;\n\n                //send array as comma-delimited string to the backend service (due to issue with camel mashup)\n                paymentOrder.scheduledTransfer.intervals = $scope.paymentOrder.scheduledTransfer.intervals.join(',');\n                paymentOrder.scheduledTransfer.startDate = +(new Date($scope.paymentOrder.scheduledTransfer.startDate));\n                paymentOrder.scheduledTransfer.endDate = +(new Date($scope.paymentOrder.scheduledTransfer.endDate));\n                paymentOrder.paymentMode = paymentIntervals.RECURRING;\n            } else {\n                paymentOrder.onDate = +(new Date($scope.paymentOrder.scheduleDate));\n                paymentOrder.paymentMode = paymentIntervals.NON_RECURRING;\n                paymentOrder.urgentTransfer = $scope.paymentOrder.urgentTransfer;\n            }\n\n            return paymentOrder;\n        };\n\n        //build the payment order with details needed for a P2P transfer\n        var buildP2PEmailPaymentOrder = function(paymentOrder) {\n            paymentOrder.type = $scope.poTypeEnum.p2pEmail;\n            paymentOrder.onDate = +(new Date($scope.paymentOrder.scheduleDate));\n            paymentOrder.paymentMode = paymentIntervals.NON_RECURRING;\n            paymentOrder.counterpartyEmail = $scope.paymentOrder.counterpartyEmail;\n\n            return paymentOrder;\n        };\n\n        //build the payment order with details needed for a P2P address transfer\n        var buildP2PAddressPaymentOrder = function(paymentOrder) {\n            paymentOrder.type = $scope.poTypeEnum.p2pAddress;\n            paymentOrder.onDate = +(new Date($scope.paymentOrder.scheduleDate));\n            paymentOrder.paymentMode = paymentIntervals.NON_RECURRING;\n            paymentOrder.counterpartyAddress = $scope.paymentOrder.counterpartyAddress;\n\n            return paymentOrder;\n        };\n\n        var initialize = function() {\n\n            $scope.mediaDir = lpCoreUtils.getWidgetBaseUrl(widget) + '/media';\n\n            $scope.todaysDate = new Date();\n\n            $scope.hideFooter = lpCoreUtils.parseBoolean(widget.getPreference('hideFooter'));\n            /**\n             * Manage transfer type to hide/show certain parts of the form\n             */\n            $scope.poTypeEnum = transferTypes;\n\n            $scope.p2pService = lpP2P.api('enroll-service')\n                .setConfig({\n                    url: lpCoreUtils.resolvePortalPlaceholders(lpWidget.getPreference('p2pEnrollmentEndpoint'))\n                });\n\n\n            $scope.p2pService.getAll().then(function(response) {\n                $scope.userEnrolledForP2P = true;\n            }, function(response) {\n\n                lpCoreBus.subscribe('launchpad-retail.userP2PEnrolled', function(data) {\n                    $scope.userEnrolledForP2P = data.enrolled;\n                });\n\n                if(response.status === 404) {\n                    //user not enrolled\n                    $scope.userEnrolledForP2P = false;\n                    $scope.p2pUserEnrollment = {\n                        email: '',\n                        mobile: '',\n                        receivingAccountNumber: '',\n                        customerId: ''\n                    };\n                }\n            });\n\n\n            $scope.urgentTranfer = false;\n\n            $scope.locale = widget.getPreference('locale');\n\n            //flag for which kind of transfer this is\n            $scope.usTransfer = $scope.locale === 'en-US';\n\n            $scope.title = widget.getPreference('title');\n\n            $scope.accountsTopBalance = widget.getPreferenceFromParents('defaultBalanceView') || 'current';\n            $scope.disableCurrencySelection = widget.getPreference('disableCurrencySelection');\n\n            $scope.modalShown = false;\n            $scope.exchangeRateModalShown = false;\n            $scope.ibanModalShown = false;\n            $scope.routingModalShown = false;\n\n            $scope.templates = {\n                saveContacts: 'templates/save-contacts.html',\n                urgentTransfer: 'templates/urgent-transfer.html',\n                exchangeRate: 'templates/exchange-rate.html',\n                iban: 'templates/iban.html',\n                routingAndAccount: 'templates/routing-and-account-number.html'\n            };\n\n            $scope.accountsModel = AccountsModel;\n            $scope.accountsModel.setConfig({\n                accountsEndpoint: widget.getPreference('accountsDataSrc')\n            });\n\n            $scope.paymentOrderModel = PaymentOrderModel.createModel();\n\n            $scope.dateOptions = {\n                'show-button-bar': false,\n                'show-weeks': false\n            };\n\n            $scope.selectAccount = function(params) {\n                if (!$scope.accountsModel.accounts) {\n                    return;\n                }\n\n                $.each($scope.accountsModel.accounts, function(index, account){\n                    if(params.accountId === account.id){\n                        $scope.accountsModel.selected = account;\n                    }\n                });\n                applyScope($scope);\n            };\n\n            var promise = $scope.accountsModel.load();\n\n            promise.then(function() {\n\n                if (lpCoreUtils.parseBoolean(widget.getPreference('forceAccountSelection'))) {\n                    return;\n                }\n\n                if(!$scope.accountsModel.selected && $scope.accountsModel.accounts && $scope.accountsModel.accounts.length > 0) {\n                    var defaultAccount = widget.getPreferenceFromParents('defaultAccount');\n                    if(defaultAccount) {\n                        $scope.accountsModel.selected = $scope.accountsModel.findByAccountNumber(defaultAccount);\n                    }\n\n                    if($scope.accountsModel.selected){\n                        return;\n                    }\n\n                    return lpUsersPreference.read().then(function(prefs) {\n                        $scope.accountsModel.selected = $scope.accountsModel.accounts.filter(function(account){\n                            return account.identifier === prefs.data.defaultAccount;\n                        })[0] || $scope.accountsModel.accounts[0];\n                    });\n                }\n\n                //now safe to listen for account Select message\n                lpCoreBus.subscribe('launchpad-retail.accountSelected', $scope.selectAccount);\n\n            })['catch'](function() {\n                $scope.accountsModel.error = 'accountsLoadFailed';\n            });\n\n            lpUserDetails.get(lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('profileDetailsEndpoint'))).then(function(userDetails) {\n                $scope.userDetails = userDetails;\n            });\n\n            $scope.currencyModel = lpTransactionsCurrency.api();\n\n            lpTransactionsCurrency.setConfig({\n                defaultCurrencyEndpoint: lpWidget.getPreference('defaultCurrencyEndpoint'),\n                currencyListEndpoint: lpWidget.getPreference('currencyListEndpoint')\n            });\n\n            $scope.currencyModel.loadDefaultCurrency().then(function(data) {\n                $scope.currencyModel.configureDefaultCurrency(data);\n\n                $scope.paymentOrder.instructedCurrency = $scope.paymentOrder.instructedCurrency === '' ? $scope.currencyModel.defaultCurrency.currency_code : $scope.paymentOrder.instructedCurrency;\n                $scope.currencyModel.loadOtherCurrencies().then(function() {\n\n                    //if there is payment order data saved, select the appropriate currency\n                    var currency = $scope.paymentOrder.instructedCurrency === '' ? $scope.currencyModel.defaultCurrency.currency_code : $scope.paymentOrder.instructedCurrency;\n                    $scope.currencyModel.selectCurrency(currency);\n                });\n            });\n\n            $scope.contactsModel = new ContactsModel({\n                contacts: lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('contactListDataSrc')),\n                contactData: lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('contactDataSrc')),\n                contactDetails: lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('contactDetailsDataSrc'))\n\n            });\n            $scope.contactsModel.loadContacts();\n\n            $scope.ibanModel = IbanModel.getInstance({\n                countryListEndpoint: widget.getPreference('ibanDataSrc'),\n                enableCountrySearch: lpCoreUtils.parseBoolean(widget.getPreference('enableIbanCountrySearch'))\n            });\n            $scope.ibanModel.loadCountryList().then(function(response) {\n                $scope.ibanModel.validate();\n            });\n\n            resetModel();\n\n            $scope.toggleTabs = {\n                oneTime: $scope.paymentOrder.isScheduledTransfer ? false : true,\n                scheduled: $scope.paymentOrder.isScheduledTransfer ? true : false\n            };\n\n            $scope.activeTransferTab = {\n                bank: true,\n                p2pEmail: false,\n                p2pAddress: false\n            };\n\n            //persisting form data that has been filled in but not processed\n            $scope.persistenceManager = formDataPersistence.getInstance();\n\n            //reload previously saved form data\n            if($scope.persistenceManager.isFormSaved(formName)) {\n\n                var newPaymentOrder = $scope.persistenceManager.getFormData(formName);\n\n                var excludedProperties = [\n                    'uuid',\n                    'scheduleDate',\n                    'update'\n                ];\n\n                //extend the properties of the new payment order to the one on the scope\n                for(var key in newPaymentOrder) {\n                    if(newPaymentOrder.hasOwnProperty(key) && excludedProperties.indexOf(key) === -1) {\n                        $scope.paymentOrder[key] = newPaymentOrder[key];\n                    }\n                }\n\n                //reset active transfer tabs\n                setActiveTransferTabs();\n            }\n\n            // close all modal popups when the widget is closed (perspective minimized on launcher container and widget on springboard)\n            widget.addEventListener('PerspectiveModified', function(event) {\n                if (event.newValue === 'Minimized' || event.newValue === 'Widget') {\n                    $scope.hideAllModals();\n                }\n            });\n\n            //deep watch the payment order object, save form data when object changes\n            $scope.$watch('paymentOrder', function(newValue, oldValue) {\n\n                if(newValue !== oldValue) {\n                    $scope.persistenceManager.saveFormData(formName, $scope.paymentOrder);\n\n                    if(newValue && newValue.type !== $scope.poTypeEnum.bank) {\n                        $scope.setScheduledTransfer('one-time');\n                    }\n                }\n            }, true);\n\n            lpCoreBus.subscribe('launchpad-retail.requestMoneyTransfer.setTab', function(data) {\n                if(data.tab) {\n                    $scope.paymentOrder.type = data.tab;\n                    setActiveTransferTabs();\n                }\n            });\n\n            // UPDATE: if we want to update a transfer order\n            lpCoreBus.subscribe('lpMoneyTransfer.update', function(form) {\n                $scope.paymentOrder = form;\n                $scope.currencyModel.selectCurrency($scope.paymentOrder.instructedCurrency);\n                $timeout(function() { $scope.selectAccount(form); });\n            });\n\n            applyScope($scope);\n        };\n\n        /**\n         * Scope functions\n         */\n\n        $scope.openCalendar = function($event) {\n            //open calendar on click event or \"enter\" and \"space\" key press events\n            if ($event.type === 'click' || $event.which === 32 || $event.which === 13) {\n                $event.preventDefault();\n                $event.stopPropagation();\n\n                $scope.paymentOrder.isOpenDate = true;\n            }\n        };\n\n        //sets the payment orders transfer type\n        $scope.setPaymentOrderType = function(paymentOrderType) {\n            $scope.paymentOrder.type = paymentOrderType;\n        };\n\n        $scope.submitForm = function(event) {\n            var xhr;\n\n            if(event && event.preventDefault){\n                event.preventDefault();\n            }\n\n            $scope.persistenceManager.removeFormData(formName);\n\n            checkValidAccounts();\n\n            var processPaymentOrder = true;\n\n            $scope.paymentOrderForm.submitted = true;\n            if($scope.paymentOrderForm.$invalid) {\n                $scope.$broadcast('lp.retail.new-transfer.errors');\n                return false;\n            }\n\n            var paymentOrder = PaymentOrderModel.createModel();\n            var selectedAccount = $scope.accountsModel.selected;\n\n            //add relevent fields to payment order object\n            paymentOrder.uuid = $scope.paymentOrder.uuid;\n            paymentOrder.counterpartyName = $scope.paymentOrder.counterpartyName;\n            paymentOrder.instructedAmount = $scope.paymentOrder.instructedAmount;\n            paymentOrder.instructedCurrency = $scope.paymentOrder.instructedCurrency;\n            //if for some reason the instructed currency has been set blank it defaults to account default\n            if(paymentOrder.instructedCurrency === '') {\n                paymentOrder.instructedCurrency = selectedAccount.currency;\n            }\n            paymentOrder.accountId = selectedAccount.id;\n            paymentOrder.accountName = selectedAccount.alias;\n\n            switch($scope.paymentOrder.type) {\n                //BANK TRANSFER\n                case $scope.poTypeEnum.bank:\n                    paymentOrder = buildBankPaymentOrder(paymentOrder);\n                    break;\n                //P2P Email Transfer\n                case $scope.poTypeEnum.p2pEmail:\n                    //enroll user if not already enrolled\n                    if(!$scope.userEnrolledForP2P) {\n                        $scope.p2pService.enroll({\n                            email: $scope.p2pUserEnrollment.email,\n                            accountNumber: $scope.p2pUserEnrollment.receivingAccountNumber\n                        }).then(function(response) {\n\n                            lpCoreBus.publish('launchpad-retail.userP2PEnrolled', {\n                                enrolled: true\n                            });\n\n                            lpCoreBus.publish('launchpad-retail.p2pEnrollmentComplete', {\n                                verified: true\n                            });\n\n                        }, function(response) {\n                            $scope.p2pService.error = 'An error occurred while connecting to the P2P Service';\n                            processPaymentOrder = false;\n                        });\n                    }\n\n                    paymentOrder = buildP2PEmailPaymentOrder(paymentOrder);\n                    break;\n                case $scope.poTypeEnum.p2pAddress:\n                    if(!$scope.userEnrolledForP2P) {\n                        $scope.p2pService.enroll({\n                            email: $scope.p2pUserEnrollment.email,\n                            accountNumber: $scope.p2pUserEnrollment.receivingAccountNumber\n                        }).then(function(response) {\n\n                        }, function(response) {\n                            $scope.p2pService.error = 'An error occurred while connecting to the P2P Service';\n                            processPaymentOrder = false;\n                        });\n                    }\n\n                    paymentOrder = buildP2PAddressPaymentOrder(paymentOrder);\n                    break;\n                default:\n                    paymentOrder = buildBankPaymentOrder(paymentOrder);\n                    break;\n            }\n\n            // Autosave contact if not an existing one\n            if ($scope.paymentOrder.saveContact && isNewContact()) {\n                createContact();\n            }\n\n            if(processPaymentOrder) {\n                xhr = paymentOrder.createOrder(paymentOrder); // Creates or updates payemnt model\n\n                //on success\n                xhr.then(function(res) {\n                    lpCoreUpdate.trigger('newPaymentOrderInitiated'); // update models on demand\n                    lpCoreBus.publish('Launcher:openWidget', { widgetName: 'review-transfers-v1' });\n                    lpCoreBus.publish('launchpad-retail.paymentOrderInitiated', {paymentId: paymentOrder.id});\n                    $scope.resetForm();\n                }, function(err) {\n                    $scope.errors.updateServerError = true;\n                    $timeout(function () { $scope.errors.updateServerError = false; }, 5000);\n                    console.log('Server error: ' + err.statusText);\n                });\n            }\n\n        };\n\n        if($scope.hideFooter){\n            lpCoreBus.subscribe('transfer:submit', $scope.submitForm);\n        }\n\n        $scope.onSaveContactsChange = function() {\n            if (autoSave === '' && $scope.paymentOrder.saveContact) {\n                $scope.toggleModal(); // Show\n            }\n        };\n\n        $scope.setContactPreference = function(response) {\n            // Call backend service to store this preference\n            autoSave = !!response;\n            widget.model.setPreference('autosaveContactsPreference', '' + autoSave);\n            widget.model.save();\n\n            $scope.toggleModal(); // Hide\n        };\n\n        $scope.showContactsInfo = function() {\n            $scope.showContactsOptions = false;\n            $scope.toggleModal(); // Hide\n        };\n\n        $scope.toggleSaveToContactsModal = function() {\n            $scope.showContactsOptions = !$scope.showContactsOptions;\n        };\n\n        $scope.toggleAutosuggest = function() {\n            $(widget.body).find('[name=counterpartyName]').trigger('toggle.autosuggest');\n        };\n\n        $scope.cancelForm = function() {\n            lpCoreBus.publish('launchpad-retail.closeActivePanel');\n        };\n\n        $scope.resetForm = function() {\n\n            resetModel();\n            resetChildScopes();\n            setActiveTransferTabs();\n\n            $scope.currencyModel.selectCurrency($scope.currencyModel.defaultCurrency.currency_code);\n\n            $scope.paymentOrderForm.submitted = false;\n            $scope.paymentOrderForm.$setPristine();\n\n            $scope.persistenceManager.removeFormData(formName);\n        };\n\n        $scope.resetCounterparty = function() {\n            $scope.$apply(function(){\n                $scope.paymentOrder.counterpartyIban = '';\n            });\n        };\n\n        $scope.updateCounterparty = function(accountDetails) {\n            // Store the selection as reference, to compare\n            // later if the contact is a new one or not.\n            if (accountDetails === null || accountDetails === undefined) {\n                $scope.paymentOrder.counterpartyIban = '';\n\n                if($scope.paymentOrder.type === $scope.poTypeEnum.bank) {\n                    if($scope.usTransfer) {\n                        $scope.paymentOrder.counterpartyAccount = '';\n                    } else {\n                        $scope.paymentOrder.counterpartyIban = '';\n                    }\n                } else if($scope.paymentOrder.type === $scope.poTypeEnum.p2pEmail) {\n                    $scope.paymentOrder.counterpartyEmail = '';\n                }\n\n                $scope.paymentOrderForm.$setDirty();\n\n                return;\n            }\n\n            $scope.paymentOrder.selectedCounter = {\n                name: $scope.paymentOrder.counterpartyName,\n                account: accountDetails.account\n            };\n\n            $scope.paymentOrder.type = accountDetails.type;\n            setActiveTransferTabs();\n\n\n            if($scope.paymentOrder.type === $scope.poTypeEnum.bank) {\n                if($scope.usTransfer) {\n                    $scope.paymentOrder.counterpartyAccount = accountDetails.account;\n                } else {\n                    $scope.paymentOrder.counterpartyIban = accountDetails.account;\n                }\n            } else if($scope.paymentOrder.type === $scope.poTypeEnum.p2pEmail) {\n                $scope.paymentOrder.counterpartyEmail = accountDetails.account;\n            }\n\n            $scope.paymentOrderForm.$setDirty();\n        };\n\n        // Validate that accounts ( from / to ) are not equal\n        $scope.notEqualAccounts = function() {\n            if (!$scope.accountsModel.selected) {\n                return false;\n            }\n\n            return $scope.accountsModel.selected.iban !== $scope.paymentOrder.counterpartyIban;\n        };\n\n        $scope.onAccountChange = function() {\n            checkValidAccounts();\n        };\n\n        $scope.toggleModal = function() {\n            $scope.showContactsOptions = !$scope.showContactsOptions;\n        };\n\n        //close the exchange rate modal\n        $scope.toggleExchangeRateModal = function() {\n            $scope.exchangeRateModalShown = !$scope.exchangeRateModalShown;\n        };\n\n        $scope.toggleSaveContactDetailsModal = function() {\n            $scope.modalShown = !$scope.modalShown;\n        };\n\n        $scope.toggleIbanModal = function() {\n            $scope.ibanModalShown = !$scope.ibanModalShown;\n        };\n\n        $scope.toggleRoutingNumberModal = function() {\n            $scope.routingModalShown = !$scope.routingModalShown;\n        };\n\n        $scope.hideAllModals = function() {\n            $scope.urgentTransferModalShown = false;\n            $scope.exchangeRateModalShown = false;\n            $scope.ibanModalShown = false;\n            $scope.modalShown = false;\n        };\n\n        $scope.toggleUrgentTransferModal = function() {\n            $scope.urgentTransferModalShown = !$scope.urgentTransferModalShown;\n        };\n\n        $scope.setScheduledTransfer = function(value) {\n\n            if(value === 'scheduled') {\n                $scope.paymentOrder.isScheduledTransfer = true;\n                $scope.toggleTabs.oneTime = false;\n                $scope.toggleTabs.scheduled = true;\n            } else if(value === 'one-time') {\n                $scope.paymentOrder.isScheduledTransfer = false;\n                $scope.toggleTabs.oneTime = true;\n                $scope.toggleTabs.scheduled = false;\n            }\n        };\n\n        $scope.$on('reset', function() {\n            $scope.paymentOrder.isScheduledTransfer = false;\n            $scope.toggleTabs.oneTime = true;\n            $scope.toggleTabs.scheduled = false;\n        });\n\n\n        /**\n         * Other set up\n         */\n\n        widget.addEventListener('preferencesSaved', function () {\n            widget.refreshHTML();\n            initialize();\n        });\n\n        initialize();\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/controllers.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    var $ = window.jQuery;\n\n    /**\n     * UPDATE: special ugly directive which should modify widget's layout\n     *         in order to provide update functionality (and remove those\n     *         changes on the widget's exit.\n     */\n    // @ngInject\n    exports.lpTransactionUpdateLayout = function(lpCoreBus, $timeout) {\n        return {\n            restrict: 'A',\n            scope: {\n                paymentOrder: '=lpTransactionUpdateLayout'\n            },\n            link: function(scope, el, attrs, ngModel) {\n                // sorry for this jQuery ugliness :(\n                var $launcher = $(el[0]).closest('.lp-launcher-area');\n                var $close = $launcher.find('.close');\n                var $title = $launcher.find('.widget-title span');\n                var defaultTitle = $title.text();\n\n                scope.$watch('paymentOrder.update', function(update) {\n                    if (update) {\n                        $timeout(function() { $title.text('Update Transfer'); });\n                    } else {\n                        $timeout(function() { $title.text(defaultTitle); });\n                    }\n                });\n\n                $close.click(function() {\n                    // on exit we should remove 'signs' of updating process\n                    scope.paymentOrder.update = false;\n                });\n\n                lpCoreBus.subscribe('launchpad-retail.closeActivePanel', function() {\n                    // on exit we should remove 'signs' of updating process\n                    scope.paymentOrder.update = false;\n                });\n            }\n        };\n    };\n\n    // @ngInject\n    exports.lpFutureTime = function() {\n        return {\n\n            require: '?ngModel',\n\n            link: function(scope, elm, attrs, ngModel) {\n\n                var now = new Date();\n                now.setDate(now.getDate() - 1);\n                now = now.getTime();\n\n                ngModel.$parsers.unshift(function(value) {\n                    var date;\n\n                    // Empty field\n                    if (!value) {\n                        ngModel.$setValidity('lpFutureTime', true);\n                        return null;\n                    }\n\n                    date = Date.parse(value);\n\n                    // Unparsable date\n                    if (isNaN(date) || date < 0) {\n                        ngModel.$setValidity('lpFutureTime', false);\n                        return value;\n                    }\n\n                    // Valid date, but in the past or present\n                    if (date <= now) {\n                        ngModel.$setValidity('lpFutureTime', false);\n                        return value;\n                    }\n\n                    // Future Date\n                    ngModel.$setValidity('lpFutureTime', true);\n                    return value;\n                });\n            }\n        };\n    };\n\n    // @ngInject\n    exports.lpSmartsuggest = function(lpCoreUtils, ContactsModel, SmartSuggestEngine, SmartSuggestFormatter) {\n\n        return {\n            restrict: 'A',\n            scope: {\n                'lpSmartsuggestSelect': '&',\n                'lpSmartsuggestClear': '&',\n                'contacts': '=lpContacts',\n                'accounts': '=lpAccounts',\n                'model': '=ngModel'\n            },\n            link: function(scope, element, attrs){\n\n                //setup the smart suggest engine\n                var smartSuggest = new SmartSuggestEngine({\n                    showTitles: true\n                });\n                smartSuggest.addSuggester({\n                    data: [],\n                    suggest: SmartSuggestEngine.builtIn.getContactSuggestions\n                });\n\n                scope.$watch('accounts', function(accounts) {\n                    smartSuggest.addSuggester({\n                        data: accounts,\n                        suggest: SmartSuggestEngine.builtIn.getAccountSuggestions,\n                        type: SmartSuggestEngine.types.ACCOUNT,\n                        options: {\n                            showAll: true\n                        }\n                    });\n                });\n\n                scope.$watch('contacts', function(contacts) {\n                    //TODO: why is this not an empty array when empty?\n                    if(lpCoreUtils.isArray(contacts)) {\n                        smartSuggest.addSuggester({\n                            data: contacts,\n                            suggest: SmartSuggestEngine.builtIn.getContactSuggestions,\n                            type: SmartSuggestEngine.types.CONTACT,\n                            options: {\n                                showAll: true\n                            }\n                        });\n                    }\n                });\n\n\n                var formatter = new SmartSuggestFormatter({\n                    locale: 'en-US'\n                });\n\n                // https://github.com/angular/angular.js/issues/1924\n                scope.$watch('model', function() {\n                    scope.$eval(attrs.ngModel + ' = model');\n                });\n\n                scope.$watch(attrs.ngModel, function(val) {\n                    scope.model = val;\n                });\n\n                $(element).autosuggest({\n                    lookup: function(q) {\n                        var suggs = smartSuggest.getSuggestions(q);\n                        suggs = suggs.map(function(suggestion) {\n                            var values = formatter.format(suggestion);\n\n                            var displayValue;\n                            if(suggestion.contact) {\n                                displayValue = suggestion.contact.name;\n                            } else if(values.length === 2) {\n                                displayValue = values[0] + ' to ' + values[1];\n                            } else {\n                                displayValue = values[0];\n                            }\n\n                            return {\n                                data: suggestion,\n                                value: displayValue\n                            };\n                        });\n                        return suggs;\n                    },\n                    onSelect: function (suggestion) {\n                        var account,\n                            name;\n\n                        if (suggestion.data.type === SmartSuggestEngine.types.TITLE) {\n                            return false;\n                        }\n\n                        switch (suggestion.data.type) {\n                            case SmartSuggestEngine.types.CONTACT:\n                                name = suggestion.data.contact.name;\n                                account = suggestion.data.contact.account;\n                                break;\n                            case SmartSuggestEngine.types.ACCOUNT:\n                                name = suggestion.data.account.name;\n                                account = suggestion.data.account.iban;\n                                break;\n                        }\n                        scope.model = name;\n                        scope.lpSmartsuggestSelect({account: account});\n                        return false;\n                    },\n                    onClear: function() {\n                        scope.lpSmartsuggestClear();\n                    },\n                    formatResult: function(suggestion) {\n                        return formatter.getSuggestionHtml(suggestion.data);\n                    },\n                    autoSelectFirst: false,\n                    minChars: 0\n                });\n            }\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/directives.js\n **/"],"sourceRoot":""}