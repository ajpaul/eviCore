{"version":3,"sources":["webpack:///widget-addressbook/webpack/universalModuleDefinition","webpack:///widget-addressbook/scripts/main.js","webpack:///widget-addressbook/webpack/bootstrap 78c77ebf72f609423280","webpack:///widget-addressbook/./scripts/main.js","webpack:///widget-addressbook/(webpack)/buildin/module.js","webpack:///widget-addressbook/external \"base\"","webpack:///widget-addressbook/external \"core\"","webpack:///widget-addressbook/external \"ui\"","webpack:///widget-addressbook/external \"module-contacts\"","webpack:///widget-addressbook/external \"module-payments\"","webpack:///widget-addressbook/external \"module-transactions\"","webpack:///widget-addressbook/external \"module-accounts\"","webpack:///widget-addressbook/./scripts/controllers.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_3__","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_5__","__WEBPACK_EXTERNAL_MODULE_6__","__WEBPACK_EXTERNAL_MODULE_7__","__WEBPACK_EXTERNAL_MODULE_8__","__WEBPACK_EXTERNAL_MODULE_9__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","run","lpWidget","lpCoreUtils","lpPayments","lpTransactions","lpCoreBus","lpAccounts","setConfig","paymentsEndpoint","getPreference","transactionsEndpoint","resolvePortalPlaceholders","pageSize","model","publish","name","accountsEndpoint","filter","$inject","base","core","ui","contacts","payments","transactions","accounts","deps","createModule","controller","undefined","webpackPolyfill","deprecate","paths","children","ContactsController","$scope","$timeout","ContactsModel","AccountsModel","$filter","i18nUtils","customerId","ALERT_TIMEOUT","bus","widget","loadContacts","contactsModel","error","addAlert","initialize","pref","contactData","contactDetails","locale","lazyload","loadMessages","success","bundle","messages","disableSelection","title","subscribe","initializeTransactions","accountsModel","api","resetAvailableFormFields","contactFields","currentDetails","forEach","allContactFields","field","key","hasOwnProperty","push","contactChangeView","view","moduleState","addContact","uuid","generateUUID","self","selected","copyCurrentContact","currentContact","photoUrl","partyId","account","isNew","contactSelected","contact","accountsModelCollection","defaultAccount","findByAccountNumber","getPreferenceFromParents","length","setFilters","loadTransactions","$broadcast","showTransactionsForContact","accountsPromise","load","then","selectContact","email","clearTransactionsList","launchTransactionsForContact","contactName","filters","validateDetails","valid","errors","value","validate","alert","SAVED_SUCCESSFULLY","SAVED_ERROR","SERVICE_UNAVAILABLE","alerts","code","type","timeout","msg","closeAlert","indexOf","index","splice","clearAlerts","submitContact","isFormValid","xhr","createContact","updateContact","response","data","resetDetailsData","i","n","contactDetailsData","details","clone","cancelForm","originalContact","originalDetails","idx","refreshModel","editContact","addFormField","deleteFormField","canAddFields","filterContactData","obj","result","detailFields","fieldName","text","phoneno","match","$watch","template","waitToLoadContactPromise","cancel","widgetSize","decodePhotoUrl","decodeURIComponent","defaultProfileImage","filteredContacts","searchString","toLowerCase","isString","accountNumber","responsiveRules","max","size","min","addEventListener","refreshHTML","widgetReset","widgetName","search","disableEnterSubmit","$event","which","preventDefault","ContactsPaymentController","PaymentOrderModel","paymentOrder","createModel","resetPaymentOrder","counterpartyName","counterpartyIban","paymentOrderForm","submitted","dateOptions","paymentMode","onDate","Date","counterpartyAccount","accountName","$on","event","submitPayment","selectedAccount","$invalid","accountId","instructedCurrency","currency","createOrder","res","paymentId","err","console","log","statusText"],"mappings":"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","file":"scripts/main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-contacts\"), require(\"module-payments\"), require(\"module-transactions\"), require(\"module-accounts\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"core\", \"ui\", \"module-contacts\", \"module-payments\", \"module-transactions\", \"module-accounts\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-addressbook\"] = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-contacts\"), require(\"module-payments\"), require(\"module-transactions\"), require(\"module-accounts\"));\n\telse\n\t\troot[\"widget-addressbook\"] = factory(root[\"base\"], root[\"core\"], root[\"ui\"], root[\"module-contacts\"], root[\"module-payments\"], root[\"module-transactions\"], root[\"module-accounts\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-contacts\"), require(\"module-payments\"), require(\"module-transactions\"), require(\"module-accounts\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"core\", \"ui\", \"module-contacts\", \"module-payments\", \"module-transactions\", \"module-accounts\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-addressbook\"] = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-contacts\"), require(\"module-payments\"), require(\"module-transactions\"), require(\"module-accounts\"));\n\telse\n\t\troot[\"widget-addressbook\"] = factory(root[\"base\"], root[\"core\"], root[\"ui\"], root[\"module-contacts\"], root[\"module-payments\"], root[\"module-transactions\"], root[\"module-accounts\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/_karma_webpack_//\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n\t/**\n\t *  ----------------------------------------------------------------\n\t *  Copyright © Backbase B.V.\n\t *  ----------------------------------------------------------------\n\t *  Author : Backbase R&D - Amsterdam - New York\n\t *  Filename : main.js\n\t *  Description: Offer users single location to manage and interact with their (finance related) contacts.\n\t *  ----------------------------------------------------------------\n\t */\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\n\t    'use strict';\n\n\t    module.name = 'widget-addressbook';\n\n\t    var base = __webpack_require__(3);\n\t    var core = __webpack_require__(4);\n\t    var ui = __webpack_require__(5);\n\n\t    //#TODO Move to UI\n\t    //require('launchpad/support/jquery/placeholder');\n\n\t    var contacts = __webpack_require__(6);\n\t    var payments = __webpack_require__(7);\n\t    var transactions = __webpack_require__(8);\n\t    var accounts = __webpack_require__(9);\n\n\t    var deps = [core.name, ui.name, contacts.name, payments.name, accounts.name, transactions.name];\n\n\t    // @ngInject\n\t    function run(lpWidget, lpCoreUtils, lpPayments, lpTransactions, lpCoreBus, lpAccounts) {\n\t        lpPayments.setConfig({\n\t            'paymentsEndpoint': lpWidget.getPreference('paymentOrdersDataSrc')\n\t        });\n\n\t        lpTransactions.setConfig({\n\t            'transactionsEndpoint': lpWidget.getPreference('transactionsEndpoint') || lpCoreUtils.resolvePortalPlaceholders('$(contextPath)/services/rest/v1/current-accounts/$(accountId)/transactions'),\n\t            'pageSize': 5\n\t        });\n\n\t        if (lpWidget.model) {\n\t            lpCoreBus.publish('cxp.item.loaded', { id: lpWidget.model.name });\n\t        }\n\n\t        lpAccounts.setConfig({\n\t            'accountsEndpoint': lpWidget.getPreference('accountsDataSrc'),\n\t            'filter': 'cards'\n\t        });\n\t    }\n\n\t    module.exports = base.createModule(module.name, deps).controller(__webpack_require__(10)).run(run);\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    exports.ContactsController = function ($scope, $timeout, lpWidget, ContactsModel, AccountsModel, lpTransactions, $filter, i18nUtils, customerId, lpCoreBus, lpCoreUtils, lpAccounts) {\n\t        var ALERT_TIMEOUT = 3000;\n\n\t        var bus = lpCoreBus;\n\t        var widget = lpWidget;\n\n\t        var loadContacts = function loadContacts() {\n\t            $scope.contactsModel.loadContacts().error(function () {\n\t                $scope.addAlert('SERVICE_UNAVAILABLE', 'error', false);\n\t            });\n\t        };\n\n\t        // Initialize\n\t        var initialize = function initialize() {\n\t            var pref = {\n\t                contacts: lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('contactListDataSrc')),\n\t                contactData: lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('contactDataSrc')),\n\t                contactDetails: lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('contactDetailsDataSrc')),\n\t                locale: widget.getPreference('locale'),\n\t                lazyload: true // Load manually later, so we can observe for failures\n\t            };\n\t            $scope.contactsModel = new ContactsModel(pref);\n\n\t            i18nUtils.loadMessages(widget, $scope.locale).success(function (bundle) {\n\t                $scope.messages = bundle.messages;\n\t            });\n\n\t            $scope.contactsModel.disableSelection = false;\n\t            $scope.title = widget.getPreference('title');\n\n\t            loadContacts();\n\n\t            bus.subscribe('launchpad.contacts.load', function () {\n\t                $timeout(function () {\n\t                    loadContacts();\n\t                });\n\t            });\n\t        };\n\n\t        //this is only called lazily when required\n\t        var initializeTransactions = function initializeTransactions() {\n\n\t            if (!$scope.accountsModel) {\n\t                $scope.accountsModel = lpAccounts;\n\t            }\n\n\t            if (!$scope.lpTransactions) {\n\t                $scope.lpTransactions = lpTransactions.api();\n\t            }\n\t        };\n\n\t        // View helpers\n\t        var resetAvailableFormFields = function resetAvailableFormFields() {\n\t            $scope.contactFields = [];\n\t            var model = $scope.contactsModel.currentDetails;\n\n\t            lpCoreUtils.forEach($scope.allContactFields, function (field) {\n\t                var key = field.key;\n\t                if (!model.hasOwnProperty(key) || model[key] === null) {\n\t                    $scope.contactFields.push(field);\n\t                }\n\t            });\n\t        };\n\n\t        // Switch to contactsView, contactsEdit, contactsAdd\n\t        $scope.contactChangeView = function (view) {\n\t            if ($scope.contactsModel.moduleState !== view) {\n\t                $scope.contactsModel.moduleState = view;\n\n\t                if (view === 'contactsEdit' || view === 'contactsAdd') {\n\t                    resetAvailableFormFields();\n\t                }\n\t            }\n\t            // disable the ability to switch contacts while editing or adding\n\t            $scope.contactsModel.disableSelection = view !== 'contactsView' ? true : false;\n\t        };\n\n\t        // Add Contact Button\n\t        $scope.addContact = function () {\n\n\t            if (!$scope.contactsModel.disableSelection) {\n\n\t                var uuid = lpCoreUtils.generateUUID();\n\t                var self = $scope.contactsModel;\n\n\t                self.selected = null;\n\n\t                $scope.copyCurrentContact();\n\n\t                initializeTransactions();\n\n\t                // create empty contact\n\t                self.currentContact = { 'photoUrl': null, 'partyId': customerId, 'id': uuid, 'name': '', 'account': '', isNew: true };\n\t                self.currentDetails = { 'id': uuid };\n\n\t                $scope.contactChangeView('contactsAdd');\n\t            }\n\t        };\n\n\t        var contactSelected = function contactSelected(contact) {\n\t            var accountsModel = $scope.accountsModel;\n\t            var accountsModelCollection = accountsModel.accounts;\n\t            var defaultAccount = accountsModel.findByAccountNumber(widget.getPreferenceFromParents('defaultAccount'));\n\n\t            //if default account hasn't already been set, set them now\n\t            if ($scope.defaultAccount === undefined) {\n\t                $scope.defaultAccount = defaultAccount ? defaultAccount : accountsModelCollection[0];\n\t                accountsModel.selected = defaultAccount ? defaultAccount : accountsModelCollection[0];\n\t            }\n\n\t            //Filter out transactions for this particular contact\n\t            if (accountsModelCollection && accountsModelCollection.length > 0) {\n\t                $scope.lpTransactions.setFilters({\n\t                    contact: contact.account\n\t                });\n\t                $scope.lpTransactions.loadTransactions($scope.defaultAccount);\n\t            }\n\t            $scope.$broadcast('contactSelected', contact);\n\t        };\n\n\t        var showTransactionsForContact = function showTransactionsForContact(contact) {\n\n\t            //show trannsaction details\n\t            initializeTransactions();\n\t            if (!$scope.accountsModel.accounts.length) {\n\t                var accountsPromise = $scope.accountsModel.load();\n\t                accountsPromise.then(function () {\n\t                    contactSelected(contact);\n\t                });\n\t            } else {\n\t                contactSelected(contact);\n\t            }\n\t        };\n\n\t        $scope.selectContact = function (contact) {\n\t            $scope.contactsModel.selectContact(contact);\n\t            // new contacts without an account are possible here\n\t            // initializeTransactions(); //fix one error for LPES-3489\n\t            if (contact.account || contact.email) {\n\t                showTransactionsForContact(contact);\n\t            } else {\n\t                $scope.lpTransactions.clearTransactionsList();\n\t            }\n\t            $scope.$broadcast('contactSelected', contact);\n\t        };\n\n\t        $scope.launchTransactionsForContact = function (contact) {\n\n\t            bus.publish('launchpad-retail.transactions.applyFilter', {\n\t                contactName: contact.name,\n\t                filters: {\n\t                    contact: contact.account\n\t                }\n\t            });\n\t        };\n\n\t        var validateDetails = function validateDetails(model) {\n\t            var valid = true;\n\t            $scope.errors = {};\n\n\t            lpCoreUtils.forEach($scope.allContactFields, function (field) {\n\t                var key = field.key,\n\t                    value = model[key];\n\n\t                if (field.validate && value) {\n\t                    var error = field.validate(value);\n\t                    if (error) {\n\t                        $scope.errors[key] = error;\n\t                        valid = false;\n\t                    }\n\t                }\n\t            });\n\n\t            return valid;\n\t        };\n\n\t        $scope.alert = {\n\t            messages: {\n\t                SAVED_SUCCESSFULLY: 'Contact was saved successfully.',\n\t                SAVED_ERROR: 'There was an error while saving contact.',\n\t                SERVICE_UNAVAILABLE: 'Unfortunately, this service is unavailable.'\n\t            }\n\t        };\n\n\t        /**\n\t         * Alerts\n\t         */\n\t        $scope.alerts = [];\n\n\t        $scope.addAlert = function (code, type, timeout) {\n\t            var alert = {\n\t                type: type || 'error',\n\t                msg: $scope.alert.messages[code]\n\t            };\n\n\t            $scope.alerts.push(alert);\n\n\t            if (timeout !== false) {\n\t                $timeout(function () {\n\t                    $scope.closeAlert($scope.alerts.indexOf(alert));\n\t                }, ALERT_TIMEOUT);\n\t            }\n\t        };\n\n\t        // Remove specific alert\n\t        $scope.closeAlert = function (index) {\n\t            $scope.alerts.splice(index, 1);\n\t        };\n\n\t        // Clear arr alert messages\n\t        $scope.clearAlerts = function () {\n\t            $scope.alerts = [];\n\t        };\n\n\t        $scope.submitContact = function (isFormValid) {\n\t            if (!validateDetails($scope.contactsModel.currentDetails) || !isFormValid) {\n\t                return false;\n\t            }\n\n\t            var xhr;\n\t            if ($scope.contactsModel.currentContact.isNew) {\n\t                xhr = $scope.contactsModel.createContact(isFormValid);\n\t            } else {\n\t                xhr = $scope.contactsModel.updateContact(isFormValid);\n\t            }\n\n\t            xhr.success(function (response) {\n\t                $scope.contactsModel.currentContact.isNew = false;\n\t                showTransactionsForContact($scope.contactsModel.currentContact);\n\t                $scope.addAlert('SAVED_SUCCESSFULLY', 'success');\n\t            }).error(function (data) {\n\t                $scope.addAlert('SAVED_ERROR', 'error');\n\t            });\n\t        };\n\n\t        var resetDetailsData = function resetDetailsData(data) {\n\t            var index = -1;\n\n\t            for (var i = 0, n = $scope.contactsModel.contactDetailsData.length; i < n; i++) {\n\t                var details = $scope.contactsModel.contactDetailsData[i];\n\t                if (details.id === data.id) {\n\t                    index = i;\n\t                    break;\n\t                }\n\t            }\n\n\t            if (index > -1) {\n\t                $scope.contactsModel.contactDetailsData[i] = lpCoreUtils.clone(data);\n\t            }\n\t        };\n\n\t        $scope.cancelForm = function () {\n\n\t            if ($scope.contactsModel.moduleState === 'contactsAdd') {\n\t                if ($scope.contactsModel.originalContact) {\n\t                    $scope.contactsModel.currentContact = $scope.contactsModel.originalContact;\n\t                } else {\n\t                    $scope.contactsModel.currentContact = null;\n\t                }\n\t                $scope.contactChangeView('contactsView');\n\t            } else if ($scope.contactsModel.moduleState === 'contactsEdit') {\n\t                $scope.contactsModel.currentContact = $scope.contactsModel.originalContact;\n\t                resetDetailsData($scope.contactsModel.originalDetails);\n\n\t                $scope.contactsModel.contacts[$scope.contactsModel.idx] = $scope.contactsModel.originalContact;\n\t                $scope.contactChangeView('contactsView');\n\t            } else {\n\t                $scope.contactChangeView('contactsNone');\n\t            }\n\t            $scope.contactsModel.refreshModel();\n\t        };\n\n\t        // Edit Contact Button\n\t        $scope.editContact = function () {\n\t            $scope.copyCurrentContact();\n\t            $scope.contactChangeView('contactsEdit');\n\t        };\n\n\t        // Add form field\n\t        $scope.addFormField = function (key) {\n\t            if (!$scope.contactsModel.currentDetails) {\n\t                $scope.contactsModel.currentDetails = { 'id': $scope.contactsModel.currentContact.id };\n\t            }\n\t            if (!$scope.contactsModel.currentDetails[key]) {\n\t                $scope.contactsModel.currentDetails[key] = '';\n\t            }\n\t            resetAvailableFormFields();\n\t        };\n\n\t        // remove a form field\n\t        $scope.deleteFormField = function (field) {\n\t            delete $scope.contactsModel.currentDetails[field];\n\t            resetAvailableFormFields();\n\t        };\n\n\t        $scope.canAddFields = function () {\n\t            return $scope.contactFields.length > 0;\n\t        };\n\n\t        // move to controller\n\t        $scope.copyCurrentContact = function () {\n\t            $scope.contactsModel.originalContact = lpCoreUtils.clone($scope.contactsModel.currentContact);\n\t            $scope.contactsModel.originalDetails = lpCoreUtils.clone($scope.contactsModel.currentDetails);\n\t        };\n\n\t        $scope.filterContactData = function (obj) {\n\t            var result = {};\n\t            var detailFields = ['address', 'city', 'state', 'dateOfBirth', 'email', 'phone'];\n\n\t            lpCoreUtils.forEach(obj, function (value, key) {\n\t                if (value !== null) {\n\t                    detailFields.forEach(function (fieldName) {\n\t                        if (fieldName === key) {\n\t                            result[key] = value;\n\t                        }\n\t                    });\n\t                }\n\t            });\n\t            return result;\n\t        };\n\n\t        // list of fields to appear in dropdown\n\t        // TODO: populate list from metadata API\n\t        $scope.allContactFields = [{ 'text': 'Phone', 'key': 'phone', validate: function validate(value) {\n\t                // Allow phone numbers in these formats: +XX-XXXX-XXXX, +XX.XXXX.XXXX, +XX XXXX XXXX\n\t                var phoneno = /^\\+?([0-9]{2})\\)?[\\-. ]?([0-9]{4})[\\-. ]?([0-9]{4})$/;\n\t                return value.match(phoneno) ? false : 'Phone number must have 10 digits.';\n\t            } }, { 'text': 'E-mail', 'key': 'email' }, { 'text': 'Birthday', 'key': 'dateOfBirth' }, { 'text': 'Address', 'key': 'address' }, { 'text': 'City', 'key': 'city' }, { 'text': 'State', 'key': 'state' }];\n\t        $scope.contactFields = [];\n\n\t        $scope.$watch('contactsModel.moduleState', function (value) {\n\t            if (value) {\n\t                $scope.contactsModel.template = 'templates/' + value + '.html';\n\t            }\n\t        });\n\n\t        $scope.$watch('contactsModel.contacts', function (value) {\n\t            if (value.length > 0) {\n\t                $scope.contactsModel.moduleState = 'contactsView';\n\n\t                if ($scope.waitToLoadContactPromise) {\n\t                    $timeout.cancel($scope.waitToLoadContactPromise);\n\t                }\n\n\t                if ($scope.widgetSize === 'large') {\n\t                    $scope.waitToLoadContactPromise = $timeout(function () {\n\t                        if ($scope.contactsModel.currentContact) {\n\t                            $scope.selectContact($scope.contactsModel.currentContact);\n\t                        } else {\n\t                            $scope.selectContact($scope.contactsModel.contacts[0]);\n\t                        }\n\t                    }, 300);\n\t                }\n\t            } else {\n\t                $scope.contactsModel.moduleState = 'contactsNone';\n\t            }\n\t        });\n\n\t        /*$scope.$watch('contactsModel.currentContact', function(value) {\n\t            if(value) {\n\t                if($scope.waitToLoadContactPromise) {\n\t                    $timeout.cancel($scope.waitToLoadContactPromise);\n\t                }\n\t                $scope.waitToLoadContactPromise = $timeout(function() {\n\t                    console.log(\"in this strange watcher\");\n\t                    $scope.selectContact($scope.contactsModel.currentContact);\n\t                }, 300);\n\t            }\n\t        });*/\n\n\t        $scope.decodePhotoUrl = function (photoUrl) {\n\t            return photoUrl ? decodeURIComponent(photoUrl) : lpCoreUtils.defaultProfileImage;\n\t        };\n\n\t        // Search by name and account number\n\t        $scope.$watch('search', function (value) {\n\n\t            $scope.filteredContacts = [];\n\n\t            if (value) {\n\n\t                $scope.filter = true;\n\t                var searchString = value.toLowerCase();\n\n\t                lpCoreUtils.forEach($scope.contactsModel.contacts, function (contact) {\n\t                    if (lpCoreUtils.isString(contact.name)) {\n\t                        var contactName = contact.name.toLowerCase();\n\t                        var accountNumber = lpCoreUtils.isString(contact.account) ? contact.account.toLowerCase() : '';\n\n\t                        if (contactName.indexOf(searchString) !== -1 || accountNumber.indexOf(searchString) !== -1) {\n\t                            $scope.filteredContacts.push(contact);\n\t                        }\n\t                    }\n\t                });\n\n\t                // select top contact when filtering\n\t                if ($scope.widgetSize === 'large') {\n\t                    if ($scope.waitToLoadContactPromise) {\n\t                        $timeout.cancel($scope.waitToLoadContactPromise);\n\t                    }\n\t                    $scope.waitToLoadContactPromise = $timeout(function () {\n\t                        if ($scope.filteredContacts.length) {\n\t                            $scope.selectContact($scope.filteredContacts[0]);\n\t                        }\n\t                    }, 300);\n\t                }\n\t            } else {\n\t                $scope.filter = false;\n\t                if ($scope.contactsModel.contacts.length && $scope.widgetSize === 'large') {\n\t                    $scope.selectContact($scope.contactsModel.contacts[0]);\n\t                }\n\t            }\n\t        }, true);\n\n\t        // Responsive\n\t        $scope.responsiveRules = [{ max: 200, size: 'tile' }, { min: 201, max: 400, size: 'small' }, { min: 401, size: 'large' }];\n\n\t        widget.addEventListener('preferencesSaved', function () {\n\t            widget.refreshHTML();\n\t            initialize();\n\t        });\n\n\t        $scope.widgetReset = function (widgetName) {\n\t            if ($scope.search) {\n\t                $scope.search = '';\n\t            }\n\t            if ($scope.contactsModel.moduleState === 'contactsEdit' || $scope.contactsModel.moduleState === 'contactsAdd') {\n\t                $scope.cancelForm();\n\t            }\n\t        };\n\n\t        $scope.disableEnterSubmit = function ($event) {\n\t            if ($event && $event.which === 13) {\n\t                $event.preventDefault();\n\t                return;\n\t            }\n\t        };\n\n\t        initialize();\n\t    };\n\n\t    // @ngInject\n\t    exports.ContactsPaymentController = function ($scope, lpPayments, lpCoreBus, lpCoreUtils) {\n\t        var bus = lpCoreBus;\n\t        var PaymentOrderModel = lpPayments.api();\n\t        $scope.paymentOrder = PaymentOrderModel.createModel();\n\n\t        $scope.resetPaymentOrder = function (contact) {\n\t            //This function is called when a new contact is added, when a new contact is selected, and when a transfer is complete\n\t            var name, account;\n\t            if (contact !== undefined) {\n\t                name = contact.name;\n\t                account = contact.account;\n\t            } else {\n\t                //if no contact has been passed, use original values for name and account.\n\t                //they will either stay the same or they will change when another contact is selected\n\t                name = $scope.paymentOrder.counterpartyName;\n\t                account = $scope.paymentOrder.counterpartyIban;\n\t            }\n\n\t            // when a new contact is added, there is not a payment order form in the page\n\t            // so we have to check if it is present before resetting the submited property\n\t            if ($scope.paymentOrderForm) {\n\t                $scope.paymentOrderForm.submitted = false;\n\t            }\n\n\t            $scope.paymentOrder.uuid = lpCoreUtils.generateUUID();\n\t            $scope.paymentOrder.dateOptions = 'today';\n\t            $scope.paymentOrder.paymentMode = 'NON_RECURRING';\n\t            $scope.paymentOrder.onDate = +new Date();\n\t            $scope.paymentOrder.counterpartyIban = account;\n\t            $scope.paymentOrder.counterpartyAccount = name;\n\t            $scope.paymentOrder.counterpartyName = name;\n\t            $scope.paymentOrder.accountName = name;\n\t            $scope.paymentOrder.type = 'INTERNAL';\n\t        };\n\n\t        $scope.$on('contactSelected', function (event, contact) {\n\t            $scope.resetPaymentOrder(contact);\n\t        });\n\n\t        $scope.submitPayment = function () {\n\t            var xhr, paymentOrder, selectedAccount;\n\n\t            $scope.paymentOrderForm.submitted = true;\n\t            if ($scope.paymentOrderForm.$invalid) {\n\t                return false;\n\t            }\n\n\t            paymentOrder = $scope.paymentOrder;\n\t            selectedAccount = $scope.accountsModel.selected;\n\n\t            $scope.resetPaymentOrder();\n\n\t            $scope.paymentOrder.accountId = selectedAccount.id;\n\t            $scope.paymentOrder.instructedCurrency = selectedAccount.currency;\n\n\t            xhr = paymentOrder.createOrder(paymentOrder);\n\n\t            xhr.then(function (res) {\n\t                bus.publish('launchpad-retail.paymentOrderInitiated', { paymentId: paymentOrder.id });\n\t            }, function (err) {\n\t                console.log('Server error: ' + err.statusText);\n\t            });\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** scripts/main.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/_karma_webpack_//\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 78c77ebf72f609423280\n **/","/**\n *  ----------------------------------------------------------------\n *  Copyright © Backbase B.V.\n *  ----------------------------------------------------------------\n *  Author : Backbase R&D - Amsterdam - New York\n *  Filename : main.js\n *  Description: Offer users single location to manage and interact with their (finance related) contacts.\n *  ----------------------------------------------------------------\n */\ndefine(function(require, exports, module){\n\n    'use strict';\n\n    module.name = 'widget-addressbook';\n\n    var base = require('base');\n    var core = require('core');\n    var ui = require('ui');\n\n    //#TODO Move to UI\n    //require('launchpad/support/jquery/placeholder');\n\n    var contacts = require('module-contacts');\n    var payments = require('module-payments');\n    var transactions = require('module-transactions');\n    var accounts = require('module-accounts');\n\n    var deps = [\n        core.name,\n        ui.name,\n        contacts.name,\n        payments.name,\n        accounts.name,\n        transactions.name\n    ];\n\n    // @ngInject\n    function run(lpWidget, lpCoreUtils, lpPayments, lpTransactions, lpCoreBus, lpAccounts) {\n        lpPayments.setConfig({\n            'paymentsEndpoint': lpWidget.getPreference('paymentOrdersDataSrc')\n        });\n\n        lpTransactions.setConfig({\n            'transactionsEndpoint': lpWidget.getPreference('transactionsEndpoint') ||\n                lpCoreUtils.resolvePortalPlaceholders('$(contextPath)/services/rest/v1/current-accounts/$(accountId)/transactions'),\n            'pageSize': 5\n        });\n\n        if (lpWidget.model) {\n            lpCoreBus.publish('cxp.item.loaded', {id: lpWidget.model.name});\n        }\n\n        lpAccounts.setConfig({\n            'accountsEndpoint': lpWidget.getPreference('accountsDataSrc'),\n            'filter': 'cards'\n        });\n    }\n\n    module.exports = base.createModule(module.name, deps)\n        .controller(require('./controllers'))\n        .run(run);\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/main.js\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"base\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"core\"\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ui\"\n ** module id = 5\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-contacts\"\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-payments\"\n ** module id = 7\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-transactions\"\n ** module id = 8\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-accounts\"\n ** module id = 9\n ** module chunks = 0\n **/","define(function(require, exports, module) {\n\n    'use strict';\n\n    // @ngInject\n    exports.ContactsController = function($scope, $timeout, lpWidget, ContactsModel, AccountsModel, lpTransactions, $filter, i18nUtils, customerId, lpCoreBus, lpCoreUtils, lpAccounts) {\n        var ALERT_TIMEOUT = 3000;\n\n        var bus = lpCoreBus;\n        var widget = lpWidget;\n\n        var loadContacts = function() {\n            $scope.contactsModel.loadContacts().error(function() {\n                $scope.addAlert('SERVICE_UNAVAILABLE', 'error', false);\n            });\n        };\n\n        // Initialize\n        var initialize = function() {\n            var pref = {\n                contacts: lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('contactListDataSrc')),\n                contactData: lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('contactDataSrc')),\n                contactDetails: lpCoreUtils.resolvePortalPlaceholders(widget.getPreference('contactDetailsDataSrc')),\n                locale: widget.getPreference('locale'),\n                lazyload: true // Load manually later, so we can observe for failures\n            };\n            $scope.contactsModel = new ContactsModel(pref);\n\n            i18nUtils.loadMessages(widget, $scope.locale).success(function(bundle) {\n                $scope.messages = bundle.messages;\n            });\n\n            $scope.contactsModel.disableSelection = false;\n            $scope.title = widget.getPreference('title');\n\n            loadContacts();\n\n            bus.subscribe('launchpad.contacts.load', function(){\n                $timeout(function() {\n                    loadContacts();\n                });\n            });\n        };\n\n        //this is only called lazily when required\n        var initializeTransactions = function() {\n\n            if(!$scope.accountsModel) {\n                $scope.accountsModel = lpAccounts;\n            }\n\n            if(!$scope.lpTransactions) {\n                $scope.lpTransactions = lpTransactions.api();\n            }\n\n        };\n\n        // View helpers\n        var resetAvailableFormFields = function() {\n            $scope.contactFields = [];\n            var model = $scope.contactsModel.currentDetails;\n\n            lpCoreUtils.forEach($scope.allContactFields, function(field) {\n                var key = field.key;\n                if ( !model.hasOwnProperty(key) || model[key] === null ) {\n                    $scope.contactFields.push(field);\n                }\n            });\n        };\n\n        // Switch to contactsView, contactsEdit, contactsAdd\n        $scope.contactChangeView = function(view) {\n            if($scope.contactsModel.moduleState !== view) {\n                $scope.contactsModel.moduleState = view;\n\n                if ( view === 'contactsEdit' || view === 'contactsAdd' ) {\n                    resetAvailableFormFields();\n                }\n            }\n            // disable the ability to switch contacts while editing or adding\n            $scope.contactsModel.disableSelection = view !== 'contactsView' ? true : false;\n        };\n\n        // Add Contact Button\n        $scope.addContact = function() {\n\n            if (!$scope.contactsModel.disableSelection) {\n\n                var uuid = lpCoreUtils.generateUUID();\n                var self = $scope.contactsModel;\n\n                self.selected = null;\n\n                $scope.copyCurrentContact();\n\n                initializeTransactions();\n\n                // create empty contact\n                self.currentContact = { 'photoUrl': null, 'partyId': customerId, 'id': uuid, 'name': '', 'account': '', isNew: true };\n                self.currentDetails = { 'id': uuid };\n\n                $scope.contactChangeView('contactsAdd');\n            }\n        };\n\n        var contactSelected = function(contact) {\n            var accountsModel = $scope.accountsModel;\n            var accountsModelCollection = accountsModel.accounts;\n            var defaultAccount = accountsModel.findByAccountNumber(widget.getPreferenceFromParents('defaultAccount'));\n\n            //if default account hasn't already been set, set them now\n            if($scope.defaultAccount === undefined) {\n                $scope.defaultAccount = defaultAccount ? defaultAccount : accountsModelCollection[0];\n                accountsModel.selected = defaultAccount ? defaultAccount : accountsModelCollection[0];\n            }\n\n            //Filter out transactions for this particular contact\n            if(accountsModelCollection && accountsModelCollection.length > 0) {\n                $scope.lpTransactions.setFilters({\n                    contact: contact.account\n                });\n                $scope.lpTransactions.loadTransactions($scope.defaultAccount);\n            }\n            $scope.$broadcast('contactSelected', contact);\n        };\n\n        var showTransactionsForContact = function(contact) {\n\n            //show trannsaction details\n            initializeTransactions();\n            if (!$scope.accountsModel.accounts.length) {\n                var accountsPromise = $scope.accountsModel.load();\n                accountsPromise.then(function() {\n                    contactSelected(contact);\n                });\n            } else {\n                contactSelected(contact);\n            }\n        };\n\n        $scope.selectContact = function(contact) {\n            $scope.contactsModel.selectContact(contact);\n            // new contacts without an account are possible here\n            // initializeTransactions(); //fix one error for LPES-3489\n            if(contact.account || contact.email) {\n                showTransactionsForContact(contact);\n            } else {\n                $scope.lpTransactions.clearTransactionsList();\n            }\n            $scope.$broadcast('contactSelected', contact);\n        };\n\n        $scope.launchTransactionsForContact = function(contact) {\n\n            bus.publish('launchpad-retail.transactions.applyFilter', {\n                contactName: contact.name,\n                filters: {\n                    contact: contact.account\n                }\n            });\n        };\n\n        var validateDetails = function(model) {\n            var valid = true;\n            $scope.errors = {};\n\n            lpCoreUtils.forEach($scope.allContactFields, function(field) {\n                var key = field.key,\n                    value = model[key];\n\n                if (field.validate && value) {\n                    var error = field.validate(value);\n                    if ( error ) {\n                        $scope.errors[key] = error;\n                        valid = false;\n                    }\n                }\n            });\n\n            return valid;\n        };\n\n        $scope.alert = {\n            messages: {\n                SAVED_SUCCESSFULLY: 'Contact was saved successfully.',\n                SAVED_ERROR: 'There was an error while saving contact.',\n                SERVICE_UNAVAILABLE: 'Unfortunately, this service is unavailable.'\n            }\n        };\n\n        /**\n         * Alerts\n         */\n        $scope.alerts = [];\n\n        $scope.addAlert = function(code, type, timeout) {\n            var alert = {\n                type: type || 'error',\n                msg: $scope.alert.messages[code]\n            };\n\n            $scope.alerts.push(alert);\n\n            if (timeout !== false) {\n                $timeout(function() {\n                    $scope.closeAlert($scope.alerts.indexOf(alert));\n                }, ALERT_TIMEOUT);\n            }\n        };\n\n        // Remove specific alert\n        $scope.closeAlert = function(index) {\n            $scope.alerts.splice(index, 1);\n        };\n\n        // Clear arr alert messages\n        $scope.clearAlerts = function() {\n            $scope.alerts = [];\n        };\n\n        $scope.submitContact = function(isFormValid) {\n            if (!validateDetails($scope.contactsModel.currentDetails) || !isFormValid) {\n                return false;\n            }\n\n            var xhr;\n            if ($scope.contactsModel.currentContact.isNew) {\n                xhr = $scope.contactsModel.createContact(isFormValid);\n            } else {\n                xhr = $scope.contactsModel.updateContact(isFormValid);\n            }\n\n            xhr.success(function(response) {\n                $scope.contactsModel.currentContact.isNew = false;\n                showTransactionsForContact($scope.contactsModel.currentContact);\n                $scope.addAlert('SAVED_SUCCESSFULLY', 'success');\n            }).error(function(data) {\n                $scope.addAlert('SAVED_ERROR', 'error');\n            });\n\n        };\n\n        var resetDetailsData = function(data) {\n            var index = -1;\n\n            for (var i = 0, n = $scope.contactsModel.contactDetailsData.length; i < n; i++) {\n                var details = $scope.contactsModel.contactDetailsData[i];\n                if (details.id === data.id) {\n                    index = i;\n                    break;\n                }\n            }\n\n            if (index > -1) {\n                $scope.contactsModel.contactDetailsData[i] = lpCoreUtils.clone(data);\n            }\n        };\n\n        $scope.cancelForm = function() {\n\n            if ($scope.contactsModel.moduleState === 'contactsAdd') {\n                if($scope.contactsModel.originalContact) {\n                    $scope.contactsModel.currentContact = $scope.contactsModel.originalContact;\n                } else {\n                    $scope.contactsModel.currentContact = null;\n                }\n                $scope.contactChangeView('contactsView');\n            } else if ($scope.contactsModel.moduleState === 'contactsEdit') {\n                $scope.contactsModel.currentContact = $scope.contactsModel.originalContact;\n                resetDetailsData($scope.contactsModel.originalDetails);\n\n                $scope.contactsModel.contacts[$scope.contactsModel.idx] = $scope.contactsModel.originalContact;\n                $scope.contactChangeView('contactsView');\n            } else {\n                $scope.contactChangeView('contactsNone');\n            }\n            $scope.contactsModel.refreshModel();\n        };\n\n        // Edit Contact Button\n        $scope.editContact = function() {\n            $scope.copyCurrentContact();\n            $scope.contactChangeView('contactsEdit');\n        };\n\n        // Add form field\n        $scope.addFormField = function(key) {\n            if (!$scope.contactsModel.currentDetails) {\n                $scope.contactsModel.currentDetails = { 'id': $scope.contactsModel.currentContact.id };\n            }\n            if (!$scope.contactsModel.currentDetails[key]) {\n                $scope.contactsModel.currentDetails[key] = '';\n           }\n           resetAvailableFormFields();\n        };\n\n        // remove a form field\n        $scope.deleteFormField = function(field) {\n            delete $scope.contactsModel.currentDetails[field];\n            resetAvailableFormFields();\n        };\n\n        $scope.canAddFields = function() {\n            return $scope.contactFields.length > 0;\n        };\n\n        // move to controller\n        $scope.copyCurrentContact = function() {\n            $scope.contactsModel.originalContact = lpCoreUtils.clone($scope.contactsModel.currentContact);\n            $scope.contactsModel.originalDetails = lpCoreUtils.clone($scope.contactsModel.currentDetails);\n        };\n\n        $scope.filterContactData = function(obj) {\n            var result = {};\n            var detailFields = [\n                'address',\n                'city',\n                'state',\n                'dateOfBirth',\n                'email',\n                'phone'\n            ];\n\n            lpCoreUtils.forEach(obj, function(value, key){\n                if (value !== null) {\n                    detailFields.forEach( function(fieldName) {\n                        if (fieldName === key) {\n                            result[key] = value;\n                        }\n                    });\n                }\n            });\n            return result;\n        };\n\n        // list of fields to appear in dropdown\n        // TODO: populate list from metadata API\n        $scope.allContactFields = [\n            { 'text': 'Phone', 'key': 'phone', validate: function(value) {\n                // Allow phone numbers in these formats: +XX-XXXX-XXXX, +XX.XXXX.XXXX, +XX XXXX XXXX\n                var phoneno = /^\\+?([0-9]{2})\\)?[\\-. ]?([0-9]{4})[\\-. ]?([0-9]{4})$/;\n                return value.match(phoneno) ? false : 'Phone number must have 10 digits.';\n            }},\n            { 'text': 'E-mail', 'key': 'email' },\n            { 'text': 'Birthday', 'key': 'dateOfBirth' },\n            { 'text': 'Address', 'key': 'address' },\n            { 'text': 'City', 'key': 'city' },\n            { 'text': 'State', 'key': 'state' }\n        ];\n        $scope.contactFields = [];\n\n        $scope.$watch('contactsModel.moduleState', function(value) {\n            if(value) {\n                $scope.contactsModel.template = 'templates/' + value + '.html';\n            }\n        });\n\n        $scope.$watch('contactsModel.contacts', function(value) {\n            if (value.length > 0) {\n                $scope.contactsModel.moduleState = 'contactsView';\n\n                if($scope.waitToLoadContactPromise) {\n                    $timeout.cancel($scope.waitToLoadContactPromise);\n                }\n\n                if ($scope.widgetSize === 'large') {\n                    $scope.waitToLoadContactPromise = $timeout(function() {\n                        if ($scope.contactsModel.currentContact) {\n                            $scope.selectContact($scope.contactsModel.currentContact);\n                        } else {\n                            $scope.selectContact($scope.contactsModel.contacts[0]);\n                        }\n                    }, 300);\n                }\n            } else {\n                $scope.contactsModel.moduleState = 'contactsNone';\n            }\n        });\n\n        /*$scope.$watch('contactsModel.currentContact', function(value) {\n            if(value) {\n                if($scope.waitToLoadContactPromise) {\n                    $timeout.cancel($scope.waitToLoadContactPromise);\n                }\n                $scope.waitToLoadContactPromise = $timeout(function() {\n                    console.log(\"in this strange watcher\");\n                    $scope.selectContact($scope.contactsModel.currentContact);\n                }, 300);\n            }\n        });*/\n\n        $scope.decodePhotoUrl = function(photoUrl) {\n            return photoUrl ? decodeURIComponent(photoUrl) : lpCoreUtils.defaultProfileImage;\n        };\n\n        // Search by name and account number\n        $scope.$watch('search', function(value){\n\n            $scope.filteredContacts = [];\n\n            if (value) {\n\n                $scope.filter = true;\n                var searchString = value.toLowerCase();\n\n                lpCoreUtils.forEach($scope.contactsModel.contacts, function(contact) {\n                    if (lpCoreUtils.isString(contact.name)) {\n                        var contactName = contact.name.toLowerCase();\n                        var accountNumber = lpCoreUtils.isString(contact.account) ? contact.account.toLowerCase() : '';\n\n                        if(contactName.indexOf(searchString) !== -1 || accountNumber.indexOf(searchString) !== -1) {\n                            $scope.filteredContacts.push(contact);\n                        }\n                    }\n                });\n\n                // select top contact when filtering\n                if ($scope.widgetSize === 'large') {\n                    if($scope.waitToLoadContactPromise) {\n                        $timeout.cancel($scope.waitToLoadContactPromise);\n                    }\n                    $scope.waitToLoadContactPromise = $timeout(function() {\n                        if ($scope.filteredContacts.length){\n                            $scope.selectContact($scope.filteredContacts[0]);\n                        }\n                    }, 300);\n                }\n            } else {\n                $scope.filter = false;\n                if ($scope.contactsModel.contacts.length && $scope.widgetSize === 'large') {\n                    $scope.selectContact($scope.contactsModel.contacts[0]);\n                }\n            }\n        }, true);\n\n        // Responsive\n        $scope.responsiveRules = [\n            { max: 200, size: 'tile' },\n            { min: 201, max: 400, size: 'small' },\n            { min: 401, size: 'large' }\n        ];\n\n        widget.addEventListener('preferencesSaved', function () {\n            widget.refreshHTML();\n            initialize();\n        });\n\n        $scope.widgetReset = function(widgetName) {\n            if($scope.search) {\n                $scope.search = '';\n            }\n            if ($scope.contactsModel.moduleState === 'contactsEdit' || $scope.contactsModel.moduleState === 'contactsAdd') {\n                $scope.cancelForm();\n            }\n        };\n\n        $scope.disableEnterSubmit = function($event) {\n            if($event && $event.which === 13) {\n                $event.preventDefault();\n                return;\n            }\n        };\n\n        initialize();\n    };\n\n\n    // @ngInject\n    exports.ContactsPaymentController = function($scope, lpPayments, lpCoreBus, lpCoreUtils) {\n        var bus = lpCoreBus;\n        var PaymentOrderModel = lpPayments.api();\n        $scope.paymentOrder = PaymentOrderModel.createModel();\n\n        $scope.resetPaymentOrder = function(contact) {\n            //This function is called when a new contact is added, when a new contact is selected, and when a transfer is complete\n            var name, account;\n            if(contact !== undefined) {\n                name = contact.name;\n                account = contact.account;\n            } else {\n                //if no contact has been passed, use original values for name and account.\n                //they will either stay the same or they will change when another contact is selected\n                name = $scope.paymentOrder.counterpartyName;\n                account = $scope.paymentOrder.counterpartyIban;\n            }\n\n            // when a new contact is added, there is not a payment order form in the page\n            // so we have to check if it is present before resetting the submited property\n            if ($scope.paymentOrderForm) {\n                $scope.paymentOrderForm.submitted = false;\n            }\n\n            $scope.paymentOrder.uuid = lpCoreUtils.generateUUID();\n            $scope.paymentOrder.dateOptions = 'today';\n            $scope.paymentOrder.paymentMode = 'NON_RECURRING';\n            $scope.paymentOrder.onDate = +(new Date());\n            $scope.paymentOrder.counterpartyIban = account;\n            $scope.paymentOrder.counterpartyAccount = name;\n            $scope.paymentOrder.counterpartyName = name;\n            $scope.paymentOrder.accountName = name;\n            $scope.paymentOrder.type = 'INTERNAL';\n        };\n\n        $scope.$on('contactSelected', function(event, contact) {\n            $scope.resetPaymentOrder(contact);\n        });\n\n        $scope.submitPayment = function() {\n            var xhr, paymentOrder, selectedAccount;\n\n            $scope.paymentOrderForm.submitted = true;\n            if($scope.paymentOrderForm.$invalid) {\n                return false;\n            }\n\n            paymentOrder = $scope.paymentOrder;\n            selectedAccount = $scope.accountsModel.selected;\n\n            $scope.resetPaymentOrder();\n\n            $scope.paymentOrder.accountId = selectedAccount.id;\n            $scope.paymentOrder.instructedCurrency = selectedAccount.currency;\n\n            xhr = paymentOrder.createOrder(paymentOrder);\n\n            xhr.then(function(res) {\n                bus.publish('launchpad-retail.paymentOrderInitiated', {paymentId: paymentOrder.id});\n            }, function(err) {\n                console.log('Server error: ' + err.statusText);\n            });\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/controllers.js\n **/"],"sourceRoot":""}