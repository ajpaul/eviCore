{"version":3,"sources":["webpack:///widget-accounts/webpack/universalModuleDefinition","webpack:///widget-accounts/scripts/main.js","webpack:///widget-accounts/webpack/bootstrap 239647ee4f324bc0f536","webpack:///widget-accounts/./scripts/main.js","webpack:///widget-accounts/(webpack)/buildin/module.js","webpack:///widget-accounts/external \"base\"","webpack:///widget-accounts/external \"core\"","webpack:///widget-accounts/external \"ui\"","webpack:///widget-accounts/./scripts/directives/assets-group.js","webpack:///widget-accounts/./scripts/directives/assets-list.js","webpack:///widget-accounts/./scripts/directives/assets-account.js","webpack:///widget-accounts/./scripts/directives/on-select.js","webpack:///widget-accounts/./scripts/model.js","webpack:///widget-accounts/./scripts/utils.js","webpack:///widget-accounts/./scripts/controllers.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_3__","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_5__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","run","lpCoreBus","lpWidget","model","publish","name","$inject","base","core","ui","deps","createModule","directive","service","controller","undefined","webpackPolyfill","deprecate","paths","children","lpAccountsAssetsGroup","lpAccountsUtils","getTemplate","element","attrs","accordionEnabled","join","accordionDisabled","linkFn","scope","groupTotal","getGroupTotal","group","preferences","defaultBalance","restrict","selectedAccountId","selectAccount","template","link","lpAccountsAssetsList","lpAccountsAssetsAccount","account","onSelect","$parse","compile","el","attr","fn","on","event","type","which","preventDefault","stopPropagation","$apply","$event","utils","isExternalAccount","accountServicer","isNotHiddenExternalAccount","display","parseAccountBalances","result","clone","availableBalance","parseFloat","bookedBalance","getProcessedAccounts","accounts","resultAccounts","cloneDeep","forEach","index","chain","filter","map","value","isOpen","getAccountsSplittedByInternalExternal","accountsCollection","internal","external","forOwn","push","groupAccounts","groups","accountCollection","foundAccounts","find","key","code","title","defaultTitle","isCollapsed","remove","length","flattenAccounts","reduce","prev","curr","i","groupTitle","groupAccountsCount","concat","AssetsModel","$resource","bus","resource","assetCollection","error","subscribe","response","load","bind","prototype","config","assetsEndpoint","resolvePortalPlaceholders","assetsResource","groupsEnabled","groupsEndpoint","groupByInternalExternal","groupsResource","filterByGroupCode","groupCodeFilter","first","assetCollectionFlat","get","$promise","then","query","splittedAccounts","internalCollection","externalCollection","configurePreviousBalanceDelta","findAccountById","findWhere","getPending","previousBalances","delta","hasExternalAccounts","values","pluck","flatten","balanceType","currency","totalBalance","MainCtrl","$scope","$rootElement","lpUIResponsive","layout","getPreference","defaultBalanceMapped","widget","addEventListener","refreshWidget","safeApply","params","selected","accountId","setDefaultAccountId","enable","rule","max-width","responsiveCallback","min-width","className","responsiveClass","balanceMap","current","available","defaultAccount","setPreference","save","defaultAccountId","selectDefaultAccount","openDefaultAccountGroup","showGroups","parseBoolean","showTotals","showAccountHolderName","showAccountType","showAccountHolderCategory","showAllFinances","getPreferenceFromParents","internalIsOpen","externalIsOpen","getResolvedPreference","firstAccount","loadingNow","noAccountsAvailable","card","isPlainObject","updateAccountDetails","refreshHTML","updatedAccount","assign","groupCode","originType","payForAccount","openAllFinances"],"mappings":"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","file":"scripts/main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"core\"), require(\"ui\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"core\", \"ui\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-accounts\"] = factory(require(\"base\"), require(\"core\"), require(\"ui\"));\n\telse\n\t\troot[\"widget-accounts\"] = factory(root[\"base\"], root[\"core\"], root[\"ui\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"core\"), require(\"ui\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"core\", \"ui\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-accounts\"] = factory(require(\"base\"), require(\"core\"), require(\"ui\"));\n\telse\n\t\troot[\"widget-accounts\"] = factory(root[\"base\"], root[\"core\"], root[\"ui\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n\t/**\n\t *  ----------------------------------------------------------------\n\t *  Copyright © Backbase B.V.\n\t *  ----------------------------------------------------------------\n\t *  Author : Backbase R&D - Amsterdam - New York\n\t *  Filename : main.js\n\t *  Description: ${widget.description}\n\t *  ----------------------------------------------------------------\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\n\t    'use strict';\n\n\t    module.name = 'widget-accounts';\n\n\t    var base = __webpack_require__(3);\n\t    var core = __webpack_require__(4);\n\t    var ui = __webpack_require__(5);\n\n\t    var deps = [core.name, ui.name];\n\n\t    // @ngInject\n\t    function run(lpCoreBus, lpWidget) {\n\t        if (lpWidget && lpWidget.model) {\n\t            lpCoreBus.publish('cxp.item.loaded', {\n\t                id: lpWidget.model.name\n\t            });\n\t        }\n\t    }\n\n\t    module.exports = base.createModule(module.name, deps).directive(__webpack_require__(6)).directive(__webpack_require__(7)).directive(__webpack_require__(8)).directive(__webpack_require__(9)).service(__webpack_require__(10)).factory(__webpack_require__(11)).controller(__webpack_require__(12)).run(run);\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    exports.lpAccountsAssetsGroup = function (lpAccountsUtils) {\n\t        function getTemplate(element, attrs) {\n\t            var accordionEnabled = ['<div accordion-group=\"accordion-group\" is-open=\"group.isOpen\" ng-show=\"preferences.showGroups && group.accounts.length > 0\">', '<div accordion-heading=\"accordion-heading\">', '<span lp-i18n=\"{{ group.title }}\"></span>', '<i class=\"fa\" ng-class=\"{ \\'fa-caret-up\\': group.isOpen, \\'fa-caret-down\\': !group.isOpen }\"></i>', '<span ng-show=\"preferences.showTotals\" class=\"group-totals pull-right\"', 'lp-amount=\"groupTotal.totalBalance\"', 'hide-trailing-zeroes=\"true\"', 'lp-amount-currency=\"groupTotal.currency\"></span>', '</div>', '<div lp-accounts-assets-list=\"\"', ' select-account=\"selectAccount({account: account, groupCode: group.code})\"', ' group=\"group\"', ' preferences=\"preferences\"', ' selected-account-id=\"selectedAccountId\">', '</div>', '</div>'].join('');\n\n\t            var accordionDisabled = ['<div class=\"panel-heading panel-round clearfix cursor-pointer\"', 'ng-show=\"preferences.showGroups && group.accounts.length > 0\" tabindex=\"0\"', 'ng-click=\"group.isCollapsed = !group.isCollapsed\">', '<span class=\"pull-left\" lp-i18n=\"{{ group.title }}\"></span>', '<span class=\"pull-right caret\"></span>', '<span ng-show=\"preferences.showTotals\" class=\"group-totals pull-right\"', 'lp-amount=\"groupTotal.totalBalance\"', 'hide-trailing-zeroes=\"true\"', 'lp-amount-currency=\"groupTotal.currency\"></span>', '</div>', '<div lp-accounts-assets-list=\"\"' + ' select-account=\"selectAccount({account: account, groupCode: group.code})\"', ' group=\"group\"', ' preferences=\"preferences\"', ' selected-account-id=\"selectedAccountId\"', ' ng-hide=\"group.isCollapsed\">', '</div>'].join('');\n\n\t            return attrs && attrs.accordionEnabled === 'true' ? accordionEnabled : accordionDisabled;\n\t        }\n\n\t        function linkFn(scope) {\n\t            scope.groupTotal = lpAccountsUtils.getGroupTotal(scope.group, scope.preferences.defaultBalance);\n\t        }\n\n\t        return {\n\t            restrict: 'AE',\n\t            scope: {\n\t                group: '=',\n\t                preferences: '=',\n\t                selectedAccountId: '=',\n\t                selectAccount: '&'\n\t            },\n\t            template: getTemplate,\n\t            link: linkFn\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    exports.lpAccountsAssetsList = function () {\n\t        function getTemplate() {\n\t            return ['<ul class=\"list-group\">', '<li class=\"list-group-item panel-body cursor-pointer\"', 'tabindex=\"0\" role=\"button\"', 'ng-repeat=\"account in group.accounts\"', 'on-select=\"selectAccount({account: account, groupCode: group.code})\"', 'ng-class=\"{ selected: selectedAccountId == account.id }\">', '<span class=\"lp-line-item-arrow\">', '<i class=\"lp-icon lp-icon-angle-right\"></i>', '</span>', '<div lp-accounts-assets-account=\"\" ', ' account=\"account\"', ' group=\"group\"', ' selected-account-id=\"selectedAccountId\"', ' preferences=\"preferences\">', '</div>', '</li>', '</ul>'].join('');\n\t        }\n\n\t        return {\n\t            restrict: 'AE',\n\t            scope: {\n\t                group: '=',\n\t                selectedAccountId: '=',\n\t                preferences: '=',\n\t                selectAccount: '&'\n\t            },\n\t            template: getTemplate\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    exports.lpAccountsAssetsAccount = function () {\n\t        function getTemplate() {\n\t            return ['<div class=\"grouped-account clearfix\" ng-class=\"{ \\'bg-danger\\': account.alerts }\">', '<span ng-if=\"group.code === \\'card\\'\"', 'class=\"account-icon lp-icon lp-icon-credit-card pull-left\"', 'ng-style=\"{ color: account.iconColor }\"></span>', '<p ng-if=\"group.code !== \\'card\\'\" ng-show=\"preferences.showAccountHolderName\">{{ account.holder }}</p>', '<p class=\"pull-left\">', '<span>', '{{ account.alias }} <span ng-if=\"account.shortReferenceId\">({{ account.shortReferenceId }})</span>', '</span>', '</p>', '<span ng-if=\"preferences.defaultBalance !== \\'current\\'\" class=\"account-balance pull-right\"', 'lp-amount=\"account.availableBalance\" lp-amount-currency=\"account.currency\"', 'hide-trailing-zeroes=\"true\" ng-model=\"account\"></span>', '<span ng-if=\"preferences.defaultBalance === \\'current\\'\" class=\"account-balance pull-right\"', 'lp-amount=\"account.bookedBalance\" lp-amount-currency=\"account.currency\"', 'hide-trailing-zeroes=\"true\" ng-model=\"account\"></span>', '<p ng-if=\"group.code !== \\'card\\'\" ng-show=\"preferences.showAccountType\">{{ account.product }}</p>', '<p ng-if=\"group.code !== \\'card\\'\" ng-show=\"preferences.showAccountHolderCategory\">', '{{ account.relationship }}', '</p>', '</div>'].join('');\n\t        }\n\n\t        function linkFn(scope, element, attrs) {}\n\n\t        return {\n\t            restrict: 'AE',\n\t            scope: {\n\t                account: '=',\n\t                group: '=',\n\t                selectedAccountId: '=',\n\t                preferences: '='\n\t            },\n\t            template: getTemplate,\n\t            link: linkFn\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    /**\n\t     * @ngdoc directive\n\t     * @module ui.on-select\n\t     * @name onSelect\n\t     *\n\t     * @restrict A\n\t     *\n\t     * @description\n\t     * The `onSelect` directive binds both click and keydown events to\n\t     *\n\t     * @usage\n\t     *   <div tabindex=\"0\" on-select=\"selectAccount(account)\"></div>\n\t     *\n\t     * @ngInject\n\t     */\n\n\t    exports.onSelect = function ($parse) {\n\t        return {\n\t            restrict: 'A',\n\t            compile: function compile(el, attr) {\n\t                var fn = $parse(attr.onSelect);\n\t                return function ngEventHandler(scope, element) {\n\t                    element.on('click keydown', function (event) {\n\t                        if (event.type === 'click' || event.which === 13 || event.which === 32) {\n\t                            event.preventDefault();\n\t                            event.stopPropagation();\n\t                            scope.$apply(function () {\n\t                                fn(scope, { $event: event });\n\t                            });\n\t                        }\n\t                    });\n\t                };\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    var utils = __webpack_require__(3).utils;\n\n\t    /**\n\t     * Check if the account is external\n\t     * @param  {object}  account The object with the account information\n\t     * @return {Boolean}         True if is external false if internal\n\t     */\n\t    var isExternalAccount = function isExternalAccount(account) {\n\t        return account.accountServicer && account.accountServicer.id;\n\t    };\n\n\t    /**\n\t     * Check if external account should be displayed\n\t     * @param  {object}  account The object with the account information\n\t     * @return {Boolean}         True if visible false if should be hidden\n\t     */\n\t    var isNotHiddenExternalAccount = function isNotHiddenExternalAccount(account) {\n\t        return !isExternalAccount(account) || account.accountServicer.display;\n\t    };\n\n\t    /**\n\t     * Update account balances to be float. The `account` object is not modified,\n\t     * a new object with updated balances is returned.\n\t     * @param  {object} account The object with the account information\n\t     * @return {object}         A new updated account object\n\t     */\n\t    var parseAccountBalances = function parseAccountBalances(account) {\n\t        var result = utils.clone(account);\n\t        result.availableBalance = parseFloat(account.availableBalance);\n\t        result.bookedBalance = parseFloat(account.bookedBalance);\n\n\t        return result;\n\t    };\n\n\t    /**\n\t     * Remove not displayable external accounts and update balances of a list of\n\t     * accounts. Returns a new account collection.\n\t     * @param  {collection} accounts List of accounts\n\t     * @return {collection}          A newly created list of accounts\n\t     */\n\t    var getProcessedAccounts = function getProcessedAccounts(accounts) {\n\t        var resultAccounts = utils.cloneDeep(accounts);\n\t        utils.forEach(resultAccounts, function (group, index) {\n\t            group.accounts = utils(group.accounts).chain().filter(isNotHiddenExternalAccount).map(parseAccountBalances).value();\n\t            // Open first group by default\n\t            group.isOpen = !index;\n\t        });\n\n\t        return resultAccounts;\n\t    };\n\n\t    /**\n\t     * Split a collection of accounts in two collections, internal and external.\n\t     * @param  {object} accountsCollection An object with accounts sorted by group\n\t     * @return {object}                    An object containing accounts splitted by internal\n\t     * and external\n\t     */\n\t    var getAccountsSplittedByInternalExternal = function getAccountsSplittedByInternalExternal(accountsCollection) {\n\t        var result = {\n\t            internal: {},\n\t            external: {}\n\t        };\n\n\t        utils.forOwn(accountsCollection, function (accounts, group) {\n\t            result.internal[group] = [];\n\t            result.external[group] = [];\n\t            utils.forEach(accounts, function (account) {\n\t                if (!isExternalAccount(account)) {\n\t                    result.internal[group].push(account);\n\t                } else {\n\t                    result.external[group].push(account);\n\t                }\n\t            });\n\t        });\n\n\t        return result;\n\t    };\n\n\t    /**\n\t     * Creates a collection of groups with the accounts related\n\t     * @param  {array} groups            Collection of groups and its information\n\t     * @param  {object} accountCollection Collection of grouped accounts\n\t     * @return {array}                   List of groups filled with accounts\n\t     */\n\t    var groupAccounts = function groupAccounts(groups, accountCollection) {\n\t        return utils.chain(groups).map(function (group, index) {\n\t            var foundAccounts = utils.find(accountCollection, function (accounts, key) {\n\t                return group.code === key;\n\t            });\n\n\t            return {\n\t                title: group.defaultTitle,\n\t                code: group.code,\n\t                accounts: foundAccounts || [],\n\t                isCollapsed: false,\n\t                // Open first group\n\t                isOpen: false\n\t            };\n\t        }).remove(function (group) {\n\t            return group.accounts.length;\n\t        }).value();\n\t    };\n\n\t    var flattenAccounts = function flattenAccounts(accounts) {\n\t        return utils(accounts).reduce(function (prev, curr) {\n\t            curr.accounts.forEach(function (account, i) {\n\t                account.code = curr.code;\n\t                if (i === 0) {\n\t                    account.groupTitle = curr.title;\n\t                    account.groupAccountsCount = curr.accounts.length;\n\t                }\n\t            });\n\t            return prev.concat(curr.accounts);\n\t        }, []);\n\t    };\n\n\t    /**\n\t     * Assets service constructor\n\t     * @constructor\n\t     * @ngInject\n\t     */\n\t    var AssetsModel = function AssetsModel(lpCoreBus, $resource) {\n\t        this.bus = lpCoreBus;\n\t        this.resource = $resource;\n\n\t        this.accounts = null;\n\t        this.groups = null;\n\t        this.assetCollection = [];\n\t        this.error = false;\n\n\t        this.bus.subscribe('launchpad-retail:ACCOUNT_BALANCE_CHANGED', function (response) {\n\t            if (this.accounts !== null) {\n\t                this.load();\n\t            }\n\t        }.bind(this));\n\t    };\n\n\t    /**\n\t     * Configure model\n\t     * @param {object} config Preferences from widget\n\t     */\n\t    AssetsModel.prototype.config = function (config) {\n\t        config.assetsEndpoint = utils.resolvePortalPlaceholders(config.assetsEndpoint);\n\n\t        this.assetsResource = this.resource(config.assetsEndpoint);\n\n\t        this.groupsEnabled = !!config.groupsEndpoint;\n\t        this.groupByInternalExternal = !!config.groupByInternalExternal;\n\n\t        if (this.groupsEnabled) {\n\t            config.groupsEndpoint = utils.resolvePortalPlaceholders(config.groupsEndpoint);\n\t            this.groupsResource = this.resource(config.groupsEndpoint);\n\t        }\n\n\t        this.filterByGroupCode = config.groupCodeFilter;\n\t    };\n\n\t    AssetsModel.prototype.first = function () {\n\t        var accounts = this.groupsEnabled ? this.assetCollectionFlat : this.assetCollection;\n\n\t        return accounts.length > 0 && accounts[0];\n\t    };\n\n\t    /**\n\t     * Load data from server\n\t     */\n\t    AssetsModel.prototype.load = function () {\n\t        return this.assetsResource.get().$promise.then(function (accounts) {\n\t            this.accounts = accounts;\n\t            this.bus.publish('launchpad-retail.accountsLoaded', accounts['current-account']);\n\n\t            if (this.groupsEnabled) {\n\t                return this.groupsResource.query().$promise.then(function (groups) {\n\t                    this.groups = groups;\n\t                    if (!this.groupByInternalExternal) {\n\t                        this.assetCollection = getProcessedAccounts(groupAccounts(this.groups, this.accounts));\n\t                        this.assetCollectionFlat = flattenAccounts(this.assetCollection);\n\t                    } else {\n\t                        var splittedAccounts = getAccountsSplittedByInternalExternal(this.accounts);\n\t                        this.internalCollection = getProcessedAccounts(groupAccounts(this.groups, splittedAccounts.internal));\n\t                        this.externalCollection = getProcessedAccounts(groupAccounts(this.groups, splittedAccounts.external));\n\t                        this.assetCollection = this.internalCollection.concat(this.externalCollection);\n\t                        this.assetCollectionFlat = flattenAccounts(this.assetCollection);\n\t                    }\n\n\t                    return this.accounts;\n\t                }.bind(this));\n\t            } else {\n\t                if (!this.groupByInternalExternal) {\n\t                    this.assetCollection = getProcessedAccounts(this.accounts);\n\t                } else {\n\t                    var splittedAccounts = getAccountsSplittedByInternalExternal(this.accounts);\n\t                    this.internalCollection = getProcessedAccounts(splittedAccounts.internal);\n\t                    this.externalCollection = getProcessedAccounts(splittedAccounts.external);\n\t                    this.assetCollection = this.internalCollection.concat(this.externalCollection);\n\t                }\n\t            }\n\n\t            utils.forEach(this.accounts, this.configurePreviousBalanceDelta);\n\n\t            return this.accounts;\n\t        }.bind(this));\n\t    };\n\n\t    AssetsModel.prototype.findAccountById = function (id) {\n\t        return utils(this.assetCollectionFlat).findWhere({ id: id });\n\t    };\n\n\t    /**\n\t     * Calculate pending\n\t     * @param account\n\t     * @returns {number}\n\t     */\n\t    AssetsModel.prototype.getPending = function (account) {\n\t        return account.bookedBalance - account.availableBalance;\n\t    };\n\n\t    /**\n\t     * Sets up a delta on individual account\n\t     * @param listOfAccounts a list of the new accounts to load\n\t     */\n\t    AssetsModel.prototype.configurePreviousBalanceDelta = function (account) {\n\t        if (!this.previousBalances) {\n\t            //initial load - initialize array\n\t            this.previousBalances = [];\n\n\t            account.delta = 0;\n\t            this.previousBalances[account.id] = account.availableBalance;\n\t        } else {\n\n\t            if (this.previousBalances[account.id] > account.availableBalance) {\n\t                //new balance has decreased\n\t                account.delta = -1;\n\t            } else if (this.previousBalances[account.id] < account.availableBalance) {\n\t                //new balance has increased\n\t                account.delta = 1;\n\t            } else {\n\t                account.delta = 0;\n\t            }\n\n\t            this.previousBalances[account.id] = account.availableBalance;\n\t        }\n\t    };\n\n\t    AssetsModel.prototype.hasExternalAccounts = function () {\n\t        return !!(this.externalCollection && utils(this.externalCollection).chain().values().pluck('accounts').flatten().value().length);\n\t    };\n\n\t    exports.AssetsModel = AssetsModel;\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    var utils = __webpack_require__(3).utils;\n\n\t    exports.lpAccountsUtils = function () {\n\t        return {\n\t            /**\n\t             * Calculate group total balance\n\t             * @param group\n\t             * @returns {{totalBalance: number, currency: *}}\n\t             * @param balanceType {String} available, booked.\n\t             */\n\t            getGroupTotal: function getGroupTotal(group, balanceType) {\n\n\t                var totalBalance = 0,\n\t                    currency;\n\n\t                utils.forEach(group.accounts, function (account) {\n\t                    totalBalance += account[balanceType + 'Balance'];\n\t                    currency = account.currency;\n\t                });\n\n\t                return {\n\t                    totalBalance: totalBalance,\n\t                    currency: currency\n\t                };\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\n\t    'use strict';\n\n\t    var utils = __webpack_require__(3).utils;\n\n\t    var responsiveCallback = function responsiveCallback(scope, className) {\n\t        return function () {\n\t            utils.safeApply(scope, function () {\n\t                scope.responsiveClass = className;\n\t            });\n\t        };\n\t    };\n\n\t    var balanceMap = { current: 'booked', available: 'available' };\n\n\t    /**\n\t     * Main Controller\n\t     * @ngInject\n\t     */\n\t    function MainCtrl($scope, $rootElement, lpWidget, AssetsModel, lpUIResponsive, lpCoreBus, lpAccountsUtils) {\n\n\t        this.layout = lpWidget.getPreference('widgetLayout');\n\n\t        this.getGroupTotal = function (group) {\n\t            return lpAccountsUtils.getGroupTotal(group, this.preferences.defaultBalanceMapped);\n\t        };\n\n\t        this.scope = $scope;\n\t        this.bus = lpCoreBus;\n\t        this.widget = lpWidget;\n\t        this.model = AssetsModel;\n\n\t        // Events\n\t        this.widget.addEventListener('preferencesSaved', this.refreshWidget.bind(this));\n\n\t        // Refresh accounts if 'data freshness' flag changes from 'updating' to 'actual'\n\t        this.bus.subscribe('lpDataFreshnessRefresh', function () {\n\t            utils.safeApply(this.scope, this.load.bind(this));\n\t        }.bind(this));\n\n\t        this.bus.subscribe('launchpad-retail.accountSelected', function (params) {\n\t            utils.safeApply($scope, function () {\n\t                this.model.selected = params.accountId;\n\t            }.bind(this));\n\t        }.bind(this));\n\n\t        // Check default account\n\t        this.bus.subscribe('widget-account-details:default-account:set', this.setDefaultAccountId.bind(this));\n\n\t        // Responsive\n\t        lpUIResponsive.enable($rootElement).rule({\n\t            'max-width': 200,\n\t            then: responsiveCallback($scope, 'lp-tile-size')\n\t        }).rule({\n\t            'min-width': 201,\n\t            'max-width': 350,\n\t            then: responsiveCallback($scope, 'lp-small-size')\n\t        }).rule({\n\t            'min-width': 351,\n\t            'max-width': 600,\n\t            then: responsiveCallback($scope, 'lp-normal-size')\n\t        }).rule({\n\t            'min-width': 601,\n\t            then: responsiveCallback($scope, 'lp-large-size')\n\t        });\n\n\t        this.config();\n\t        this.load();\n\t    }\n\n\t    /**\n\t     * Save default account id widget preference\n\t     * @param {object} defaultAccount An account object\n\t     */\n\t    MainCtrl.prototype.setDefaultAccountId = function (defaultAccount) {\n\t        var id = defaultAccount && defaultAccount.id || '';\n\t        this.widget.setPreference('defaultAccountId', id);\n\t        this.widget.model.save();\n\t        if (this.preferences) {\n\t            this.preferences.defaultAccountId = id;\n\t        }\n\t        this.bus.publish('widget-accounts:default-account:select', defaultAccount);\n\t    };\n\n\t    /**\n\t     * Make default account be selected in the accounts list\n\t     */\n\t    MainCtrl.prototype.selectDefaultAccount = function () {\n\t        if (!this.preferences.selectDefaultAccount) {\n\t            return true;\n\t        }\n\n\t        if (this.preferences.defaultAccountId) {\n\t            var defaultAccount = this.model.findAccountById(this.preferences.defaultAccountId);\n\t            this.selectAccount(defaultAccount, defaultAccount.code);\n\t            this.openDefaultAccountGroup(defaultAccount);\n\t            this.bus.publish('widget-accounts:default-account:select', defaultAccount);\n\t        }\n\n\t        // Return if default account was set\n\t        return !!this.preferences.defaultAccountId;\n\t    };\n\n\t    /**\n\t     * Check which is the group that contains default account and opens it closing others.\n\t     * @param  {object} defaultAccount Current default account\n\t     */\n\t    MainCtrl.prototype.openDefaultAccountGroup = function (defaultAccount) {\n\t        var groups = this.model.groupByInternalExternal ? this.model.internalCollection : this.assetCollection;\n\t        utils.forEach(groups, function (group) {\n\t            group.isOpen = defaultAccount.code === group.code;\n\t        });\n\t    };\n\n\t    MainCtrl.prototype.config = function () {\n\t        this.title = this.widget.getPreference('title');\n\t        this.preferences = {\n\t            showGroups: utils.parseBoolean(this.widget.getPreference('showGroups')),\n\t            showTotals: utils.parseBoolean(this.widget.getPreference('showGroupTotals')),\n\t            showAccountHolderName: utils.parseBoolean(this.widget.getPreference('showAccountHolderName')),\n\t            showAccountType: utils.parseBoolean(this.widget.getPreference('showAccountType')),\n\t            showAccountHolderCategory: utils.parseBoolean(this.widget.getPreference('showAccountHolderCategory')),\n\t            selectDefaultAccount: utils.parseBoolean(this.widget.getPreference('selectDefaultAccount')),\n\t            groupByInternalExternal: utils.parseBoolean(this.widget.getPreference('groupByInternalExternal')),\n\t            showAllFinances: utils.parseBoolean(this.widget.getPreference('showAllFinances')),\n\t            defaultBalance: this.widget.getPreference('preferredBalanceView') || this.widget.getPreferenceFromParents('preferredBalanceView') || 'current',\n\t            defaultAccountId: this.widget.getPreference('defaultAccountId'),\n\t            internalIsOpen: true,\n\t            externalIsOpen: false\n\t        };\n\n\t        this.preferences.defaultBalanceMapped = balanceMap[this.preferences.defaultBalance] || this.preferences.defaultBalance;\n\n\t        this.model.config({\n\t            assetsEndpoint: this.widget.getResolvedPreference('accountsDataSrc'),\n\t            groupsEndpoint: this.widget.getResolvedPreference('groupsDataSrc'),\n\t            groupByInternalExternal: this.preferences.groupByInternalExternal\n\t        });\n\t    };\n\n\t    MainCtrl.prototype.load = function () {\n\t        var firstAccount;\n\n\t        this.model.loadingNow = true;\n\t        this.model.noAccountsAvailable = false;\n\t        this.model.load().then(function () {\n\t            this.model.loadingNow = false;\n\t            if (!this.model.accounts || !(this.model.accounts['current-account'] && this.model.accounts['current-account'].length) && !(this.model.accounts.card && this.model.accounts.card.length) && !(this.model.accounts['current-portfolio'] && this.model.accounts['current-portfolio'].length)) {\n\t                this.model.noAccountsAvailable = true;\n\t            }\n\n\t            if (!this.selectDefaultAccount()) {\n\t                firstAccount = this.model.first();\n\t                if (utils.isPlainObject(firstAccount)) {\n\t                    this.selectAccount(firstAccount, firstAccount.code);\n\t                }\n\t            }\n\n\t            // Subscribe to update account details\n\t            this.bus.subscribe('account-details:account:update', function (account) {\n\t                utils.safeApply(this.scope, this.updateAccountDetails.bind(this, account));\n\t            }.bind(this));\n\t        }.bind(this))['finally'](function () {\n\t            this.model.loadingNow = false;\n\t        }.bind(this))['catch'](function (error) {\n\t            throw this.model.error = 'Failed to load accounts.';\n\t        }.bind(this));\n\t    };\n\n\t    MainCtrl.prototype.refreshWidget = function () {\n\t        this.widget.refreshHTML();\n\t        this.load();\n\t    };\n\n\t    MainCtrl.prototype.updateAccountDetails = function (updatedAccount) {\n\t        var account = this.model.findAccountById(updatedAccount.id);\n\t        if (account) {\n\t            utils.assign(account, updatedAccount);\n\t        }\n\t    };\n\n\t    MainCtrl.prototype.selectAccount = function (account, groupCode) {\n\t        this.model.selected = account.id;\n\n\t        if (account.type === 'portfolio') {\n\t            this.bus.publish('launchpad-retail.portfolioSelected', account);\n\t        } else if (groupCode && groupCode === 'card') {\n\t            this.bus.publish('launchpad-retail.openCardManagement');\n\t            this.bus.publish('launchpad-retail.cardSelected', { account: account });\n\t        } else {\n\t            this.bus.publish('launchpad-retail.accountSelected', {\n\t                accountId: account.id,\n\t                originType: 'accounts'\n\t            }, true);\n\t        }\n\t    };\n\n\t    MainCtrl.prototype.payForAccount = function ($event, id) {\n\t        $event.stopPropagation();\n\t        this.bus.publish('launchpad-retail.requestMoneyTransfer', {\n\t            accountId: id\n\t        });\n\t    };\n\n\t    MainCtrl.prototype.openAllFinances = function () {\n\t        this.bus.publish('launchpad-retail.accountSelected', {\n\t            // Id for all accounts\n\t            accountId: '000-000-000',\n\t            originType: 'accounts'\n\t        });\n\t    };\n\n\t    exports.MainCtrl = MainCtrl;\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** scripts/main.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 239647ee4f324bc0f536\n **/","/**\n *  ----------------------------------------------------------------\n *  Copyright © Backbase B.V.\n *  ----------------------------------------------------------------\n *  Author : Backbase R&D - Amsterdam - New York\n *  Filename : main.js\n *  Description: ${widget.description}\n *  ----------------------------------------------------------------\n */\n\ndefine(function (require, exports, module) {\n\n    'use strict';\n\n    module.name = 'widget-accounts';\n\n    var base = require('base');\n    var core = require('core');\n    var ui = require('ui');\n\n    var deps = [\n        core.name,\n        ui.name\n    ];\n\n    // @ngInject\n    function run(lpCoreBus, lpWidget) {\n        if (lpWidget && lpWidget.model) {\n            lpCoreBus.publish('cxp.item.loaded', {\n                id: lpWidget.model.name\n            });\n        }\n    }\n\n    module.exports = base.createModule(module.name, deps)\n        .directive( require('./directives/assets-group') )\n        .directive( require('./directives/assets-list') )\n        .directive( require('./directives/assets-account') )\n        .directive( require('./directives/on-select') )\n        .service( require('./model') )\n        .factory( require('./utils') )\n        .controller( require('./controllers') )\n        .run( run );\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/main.js\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"base\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"core\"\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ui\"\n ** module id = 5\n ** module chunks = 0\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    // @ngInject\n    exports.lpAccountsAssetsGroup = function(lpAccountsUtils) {\n        function getTemplate(element, attrs) {\n            var accordionEnabled = [\n                '<div accordion-group=\"accordion-group\" is-open=\"group.isOpen\" ng-show=\"preferences.showGroups && group.accounts.length > 0\">',\n                    '<div accordion-heading=\"accordion-heading\">',\n                        '<span lp-i18n=\"{{ group.title }}\"></span>',\n                        '<i class=\"fa\" ng-class=\"{ \\'fa-caret-up\\': group.isOpen, \\'fa-caret-down\\': !group.isOpen }\"></i>',\n                        '<span ng-show=\"preferences.showTotals\" class=\"group-totals pull-right\"',\n                              'lp-amount=\"groupTotal.totalBalance\"',\n                              'hide-trailing-zeroes=\"true\"',\n                              'lp-amount-currency=\"groupTotal.currency\"></span>',\n                    '</div>',\n                    '<div lp-accounts-assets-list=\"\"',\n                        ' select-account=\"selectAccount({account: account, groupCode: group.code})\"',\n                        ' group=\"group\"',\n                        ' preferences=\"preferences\"',\n                        ' selected-account-id=\"selectedAccountId\">',\n                    '</div>',\n                '</div>'\n            ].join('');\n\n            var accordionDisabled = [\n                '<div class=\"panel-heading panel-round clearfix cursor-pointer\"',\n                     'ng-show=\"preferences.showGroups && group.accounts.length > 0\" tabindex=\"0\"',\n                     'ng-click=\"group.isCollapsed = !group.isCollapsed\">',\n                    '<span class=\"pull-left\" lp-i18n=\"{{ group.title }}\"></span>',\n                    '<span class=\"pull-right caret\"></span>',\n                    '<span ng-show=\"preferences.showTotals\" class=\"group-totals pull-right\"',\n                          'lp-amount=\"groupTotal.totalBalance\"',\n                          'hide-trailing-zeroes=\"true\"',\n                          'lp-amount-currency=\"groupTotal.currency\"></span>',\n                '</div>',\n                '<div lp-accounts-assets-list=\"\"' +\n                    ' select-account=\"selectAccount({account: account, groupCode: group.code})\"',\n                    ' group=\"group\"',\n                    ' preferences=\"preferences\"',\n                    ' selected-account-id=\"selectedAccountId\"',\n                    ' ng-hide=\"group.isCollapsed\">',\n                '</div>'\n            ].join('');\n\n            return attrs && attrs.accordionEnabled === 'true' ? accordionEnabled : accordionDisabled;\n        }\n\n        function linkFn(scope) {\n            scope.groupTotal = lpAccountsUtils.getGroupTotal(scope.group, scope.preferences.defaultBalance);\n        }\n\n        return {\n            restrict: 'AE',\n            scope: {\n                group: '=',\n                preferences: '=',\n                selectedAccountId: '=',\n                selectAccount: '&'\n            },\n            template: getTemplate,\n            link: linkFn\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/directives/assets-group.js\n **/","    define(function(require, exports, module) {\n        'use strict';\n\n        exports.lpAccountsAssetsList = function() {\n            function getTemplate() {\n                return [\n                    '<ul class=\"list-group\">',\n                        '<li class=\"list-group-item panel-body cursor-pointer\"',\n                            'tabindex=\"0\" role=\"button\"',\n                            'ng-repeat=\"account in group.accounts\"',\n                            'on-select=\"selectAccount({account: account, groupCode: group.code})\"',\n                            'ng-class=\"{ selected: selectedAccountId == account.id }\">',\n                                '<span class=\"lp-line-item-arrow\">',\n                                    '<i class=\"lp-icon lp-icon-angle-right\"></i>',\n                                '</span>',\n                            '<div lp-accounts-assets-account=\"\" ',\n                                ' account=\"account\"',\n                                ' group=\"group\"',\n                                ' selected-account-id=\"selectedAccountId\"',\n                                ' preferences=\"preferences\">',\n                            '</div>',\n                        '</li>',\n                    '</ul>'\n                ].join('');\n            }\n\n            return {\n                restrict: 'AE',\n                scope: {\n                    group: '=',\n                    selectedAccountId: '=',\n                    preferences: '=',\n                    selectAccount: '&'\n                },\n                template: getTemplate\n            };\n        };\n    });\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/directives/assets-list.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    // @ngInject\n    exports.lpAccountsAssetsAccount = function() {\n        function getTemplate() {\n            return [\n                '<div class=\"grouped-account clearfix\" ng-class=\"{ \\'bg-danger\\': account.alerts }\">',\n                    '<span ng-if=\"group.code === \\'card\\'\"',\n                          'class=\"account-icon lp-icon lp-icon-credit-card pull-left\"',\n                          'ng-style=\"{ color: account.iconColor }\"></span>',\n                    '<p ng-if=\"group.code !== \\'card\\'\" ng-show=\"preferences.showAccountHolderName\">{{ account.holder }}</p>',\n                    '<p class=\"pull-left\">',\n                        '<span>',\n                            '{{ account.alias }} <span ng-if=\"account.shortReferenceId\">({{ account.shortReferenceId }})</span>',\n                        '</span>',\n                    '</p>',\n                    '<span ng-if=\"preferences.defaultBalance !== \\'current\\'\" class=\"account-balance pull-right\"',\n                          'lp-amount=\"account.availableBalance\" lp-amount-currency=\"account.currency\"',\n                          'hide-trailing-zeroes=\"true\" ng-model=\"account\"></span>',\n                    '<span ng-if=\"preferences.defaultBalance === \\'current\\'\" class=\"account-balance pull-right\"',\n                          'lp-amount=\"account.bookedBalance\" lp-amount-currency=\"account.currency\"',\n                          'hide-trailing-zeroes=\"true\" ng-model=\"account\"></span>',\n                    '<p ng-if=\"group.code !== \\'card\\'\" ng-show=\"preferences.showAccountType\">{{ account.product }}</p>',\n                    '<p ng-if=\"group.code !== \\'card\\'\" ng-show=\"preferences.showAccountHolderCategory\">',\n                        '{{ account.relationship }}',\n                    '</p>',\n                '</div>'\n            ].join('');\n        }\n\n        function linkFn(scope, element, attrs) {\n\n        }\n\n        return {\n            restrict: 'AE',\n            scope: {\n                account: '=',\n                group: '=',\n                selectedAccountId: '=',\n                preferences: '='\n            },\n            template: getTemplate,\n            link: linkFn\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/directives/assets-account.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    /**\n     * @ngdoc directive\n     * @module ui.on-select\n     * @name onSelect\n     *\n     * @restrict A\n     *\n     * @description\n     * The `onSelect` directive binds both click and keydown events to\n     *\n     * @usage\n     *   <div tabindex=\"0\" on-select=\"selectAccount(account)\"></div>\n     *\n     * @ngInject\n     */\n    exports.onSelect = function($parse) {\n        return {\n            restrict: 'A',\n            compile: function(el, attr) {\n                var fn = $parse(attr.onSelect);\n                return function ngEventHandler(scope, element) {\n                    element.on('click keydown', function(event) {\n                        if (event.type === 'click' || event.which === 13 || event.which === 32) {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            scope.$apply(function() {\n                                fn(scope, {$event: event});\n                            });\n                        }\n                    });\n                };\n            }\n        };\n\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/directives/on-select.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    var utils = require('base').utils;\n\n    /**\n     * Check if the account is external\n     * @param  {object}  account The object with the account information\n     * @return {Boolean}         True if is external false if internal\n     */\n    var isExternalAccount = function(account) {\n        return account.accountServicer && account.accountServicer.id;\n    };\n\n    /**\n     * Check if external account should be displayed\n     * @param  {object}  account The object with the account information\n     * @return {Boolean}         True if visible false if should be hidden\n     */\n    var isNotHiddenExternalAccount = function(account) {\n        return !isExternalAccount(account) || account.accountServicer.display;\n    };\n\n    /**\n     * Update account balances to be float. The `account` object is not modified,\n     * a new object with updated balances is returned.\n     * @param  {object} account The object with the account information\n     * @return {object}         A new updated account object\n     */\n    var parseAccountBalances = function(account) {\n        var result = utils.clone(account);\n        result.availableBalance = parseFloat(account.availableBalance);\n        result.bookedBalance = parseFloat(account.bookedBalance);\n\n        return result;\n    };\n\n    /**\n     * Remove not displayable external accounts and update balances of a list of\n     * accounts. Returns a new account collection.\n     * @param  {collection} accounts List of accounts\n     * @return {collection}          A newly created list of accounts\n     */\n    var getProcessedAccounts = function(accounts) {\n        var resultAccounts = utils.cloneDeep(accounts);\n        utils.forEach(resultAccounts, function(group, index) {\n            group.accounts = utils(group.accounts)\n                .chain()\n                .filter(isNotHiddenExternalAccount)\n                .map(parseAccountBalances)\n                .value();\n            // Open first group by default\n            group.isOpen = !index;\n        });\n\n        return resultAccounts;\n    };\n\n    /**\n     * Split a collection of accounts in two collections, internal and external.\n     * @param  {object} accountsCollection An object with accounts sorted by group\n     * @return {object}                    An object containing accounts splitted by internal\n     * and external\n     */\n    var getAccountsSplittedByInternalExternal = function(accountsCollection) {\n        var result = {\n            internal: {},\n            external: {}\n        };\n\n        utils.forOwn(accountsCollection, function(accounts, group) {\n            result.internal[group] = [];\n            result.external[group] = [];\n            utils.forEach(accounts, function(account) {\n                if (!isExternalAccount(account)) {\n                    result.internal[group].push(account);\n                } else {\n                    result.external[group].push(account);\n                }\n            });\n        });\n\n        return result;\n    };\n\n    /**\n     * Creates a collection of groups with the accounts related\n     * @param  {array} groups            Collection of groups and its information\n     * @param  {object} accountCollection Collection of grouped accounts\n     * @return {array}                   List of groups filled with accounts\n     */\n    var groupAccounts = function(groups, accountCollection) {\n        return utils.chain(groups)\n        .map(function(group, index) {\n            var foundAccounts = utils.find(accountCollection, function(accounts, key) {\n                return group.code === key;\n            });\n\n            return {\n                title: group.defaultTitle,\n                code: group.code,\n                accounts: foundAccounts || [],\n                isCollapsed: false,\n                // Open first group\n                isOpen: false\n            };\n        })\n        .remove(function(group) {\n            return group.accounts.length;\n        })\n        .value();\n    };\n\n    var flattenAccounts = function(accounts) {\n        return utils(accounts).reduce(function(prev, curr) {\n            curr.accounts.forEach(function(account, i) {\n                account.code = curr.code;\n                if (i === 0) {\n                    account.groupTitle = curr.title;\n                    account.groupAccountsCount = curr.accounts.length;\n                }\n            });\n            return prev.concat(curr.accounts);\n        }, []);\n    };\n\n    /**\n     * Assets service constructor\n     * @constructor\n     * @ngInject\n     */\n    var AssetsModel = function(lpCoreBus, $resource) {\n        this.bus = lpCoreBus;\n        this.resource = $resource;\n\n        this.accounts = null;\n        this.groups = null;\n        this.assetCollection = [];\n        this.error = false;\n\n        this.bus.subscribe('launchpad-retail:ACCOUNT_BALANCE_CHANGED', function(response) {\n            if(this.accounts !== null) {\n                this.load();\n            }\n        }.bind(this));\n    };\n\n    /**\n     * Configure model\n     * @param {object} config Preferences from widget\n     */\n    AssetsModel.prototype.config = function(config) {\n        config.assetsEndpoint = utils.resolvePortalPlaceholders(config.assetsEndpoint);\n\n        this.assetsResource = this.resource(config.assetsEndpoint);\n\n        this.groupsEnabled = !!config.groupsEndpoint;\n        this.groupByInternalExternal = !!config.groupByInternalExternal;\n\n        if (this.groupsEnabled) {\n            config.groupsEndpoint = utils.resolvePortalPlaceholders(config.groupsEndpoint);\n            this.groupsResource = this.resource(config.groupsEndpoint);\n        }\n\n        this.filterByGroupCode = config.groupCodeFilter;\n    };\n\n    AssetsModel.prototype.first = function() {\n        var accounts = this.groupsEnabled ? this.assetCollectionFlat : this.assetCollection;\n\n        return accounts.length > 0 && accounts[0];\n    };\n\n    /**\n     * Load data from server\n     */\n    AssetsModel.prototype.load = function() {\n        return this.assetsResource.get().$promise.then(function(accounts) {\n            this.accounts = accounts;\n            this.bus.publish('launchpad-retail.accountsLoaded', accounts['current-account']);\n\n            if (this.groupsEnabled) {\n                return this.groupsResource.query().$promise.then(function(groups) {\n                    this.groups = groups;\n                    if (!this.groupByInternalExternal){\n                        this.assetCollection = getProcessedAccounts(groupAccounts(this.groups, this.accounts));\n                        this.assetCollectionFlat = flattenAccounts(this.assetCollection);\n                    } else {\n                        var splittedAccounts = getAccountsSplittedByInternalExternal(this.accounts);\n                        this.internalCollection = getProcessedAccounts(groupAccounts(this.groups, splittedAccounts.internal));\n                        this.externalCollection = getProcessedAccounts(groupAccounts(this.groups, splittedAccounts.external));\n                        this.assetCollection = this.internalCollection.concat(this.externalCollection);\n                        this.assetCollectionFlat = flattenAccounts(this.assetCollection);\n                    }\n\n                    return this.accounts;\n                }.bind(this));\n            } else {\n                if (!this.groupByInternalExternal) {\n                    this.assetCollection = getProcessedAccounts(this.accounts);\n                } else {\n                    var splittedAccounts = getAccountsSplittedByInternalExternal(this.accounts);\n                    this.internalCollection = getProcessedAccounts(splittedAccounts.internal);\n                    this.externalCollection = getProcessedAccounts(splittedAccounts.external);\n                    this.assetCollection = this.internalCollection.concat(this.externalCollection);\n                }\n\n            }\n\n            utils.forEach(this.accounts, this.configurePreviousBalanceDelta);\n\n            return this.accounts;\n        }.bind(this));\n    };\n\n    AssetsModel.prototype.findAccountById = function(id) {\n        return utils(this.assetCollectionFlat).findWhere({ id: id });\n    };\n\n    /**\n     * Calculate pending\n     * @param account\n     * @returns {number}\n     */\n    AssetsModel.prototype.getPending = function(account) {\n        return account.bookedBalance - account.availableBalance;\n    };\n\n    /**\n     * Sets up a delta on individual account\n     * @param listOfAccounts a list of the new accounts to load\n     */\n    AssetsModel.prototype.configurePreviousBalanceDelta = function(account) {\n        if (!this.previousBalances) {\n            //initial load - initialize array\n            this.previousBalances = [];\n\n            account.delta = 0;\n            this.previousBalances[account.id] = account.availableBalance;\n        } else {\n\n            if (this.previousBalances[account.id] > account.availableBalance) {\n                //new balance has decreased\n                account.delta = -1;\n            } else if (this.previousBalances[account.id] < account.availableBalance) {\n                //new balance has increased\n                account.delta = 1;\n            } else {\n                account.delta = 0;\n            }\n\n            this.previousBalances[account.id] = account.availableBalance;\n        }\n    };\n\n    AssetsModel.prototype.hasExternalAccounts = function() {\n        return !!(this.externalCollection && utils(this.externalCollection)\n            .chain()\n            .values()\n            .pluck('accounts')\n            .flatten()\n            .value()\n            .length);\n    };\n\n    exports.AssetsModel = AssetsModel;\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/model.js\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    var utils = require('base').utils;\n\n    exports.lpAccountsUtils = function() {\n        return {\n            /**\n             * Calculate group total balance\n             * @param group\n             * @returns {{totalBalance: number, currency: *}}\n             * @param balanceType {String} available, booked.\n             */\n            getGroupTotal: function(group, balanceType) {\n\n                var totalBalance = 0,\n                    currency;\n\n                utils.forEach(group.accounts, function(account) {\n                    totalBalance += account[balanceType + 'Balance'];\n                    currency = account.currency;\n                });\n\n                return {\n                    totalBalance: totalBalance,\n                    currency: currency\n                };\n            }\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/utils.js\n **/","define(function (require, exports, module) {\n\n    'use strict';\n\n    var utils = require('base').utils;\n\n    var responsiveCallback = function(scope, className) {\n        return function() {\n            utils.safeApply(scope, function() {\n                scope.responsiveClass = className;\n            });\n        };\n    };\n\n    var balanceMap = {current: 'booked', available: 'available'};\n\n    /**\n     * Main Controller\n     * @ngInject\n     */\n    function MainCtrl($scope, $rootElement, lpWidget, AssetsModel, lpUIResponsive, lpCoreBus, lpAccountsUtils) {\n\n        this.layout = lpWidget.getPreference('widgetLayout');\n\n        this.getGroupTotal = function(group) {\n            return lpAccountsUtils.getGroupTotal(group, this.preferences.defaultBalanceMapped);\n        };\n\n        this.scope = $scope;\n        this.bus = lpCoreBus;\n        this.widget = lpWidget;\n        this.model = AssetsModel;\n\n        // Events\n        this.widget.addEventListener('preferencesSaved', this.refreshWidget.bind(this));\n\n        // Refresh accounts if 'data freshness' flag changes from 'updating' to 'actual'\n        this.bus.subscribe('lpDataFreshnessRefresh', function () {\n            utils.safeApply(this.scope, this.load.bind(this));\n        }.bind(this));\n\n        this.bus.subscribe('launchpad-retail.accountSelected', function(params) {\n            utils.safeApply($scope, function() {\n                this.model.selected = params.accountId;\n            }.bind(this));\n        }.bind(this));\n\n        // Check default account\n        this.bus.subscribe('widget-account-details:default-account:set', this.setDefaultAccountId.bind(this));\n\n        // Responsive\n        lpUIResponsive.enable($rootElement)\n            .rule({\n                'max-width': 200,\n                then: responsiveCallback($scope, 'lp-tile-size')\n            })\n            .rule({\n                'min-width': 201,\n                'max-width': 350,\n                then: responsiveCallback($scope, 'lp-small-size')\n            }).rule({\n                'min-width': 351,\n                'max-width': 600,\n                then: responsiveCallback($scope, 'lp-normal-size')\n            }).rule({\n                'min-width': 601,\n                then: responsiveCallback($scope, 'lp-large-size')\n            });\n\n            this.config();\n            this.load();\n    }\n\n    /**\n     * Save default account id widget preference\n     * @param {object} defaultAccount An account object\n     */\n    MainCtrl.prototype.setDefaultAccountId = function(defaultAccount) {\n        var id = (defaultAccount && defaultAccount.id) || '';\n        this.widget.setPreference('defaultAccountId', id);\n        this.widget.model.save();\n        if (this.preferences) {\n            this.preferences.defaultAccountId = id;\n        }\n        this.bus.publish('widget-accounts:default-account:select', defaultAccount);\n    };\n\n    /**\n     * Make default account be selected in the accounts list\n     */\n    MainCtrl.prototype.selectDefaultAccount = function() {\n        if (!this.preferences.selectDefaultAccount) {\n            return true;\n        }\n\n        if (this.preferences.defaultAccountId) {\n            var defaultAccount = this.model.findAccountById(this.preferences.defaultAccountId);\n            this.selectAccount(defaultAccount, defaultAccount.code);\n            this.openDefaultAccountGroup(defaultAccount);\n            this.bus.publish('widget-accounts:default-account:select', defaultAccount);\n        }\n\n        // Return if default account was set\n        return !!this.preferences.defaultAccountId;\n    };\n\n    /**\n     * Check which is the group that contains default account and opens it closing others.\n     * @param  {object} defaultAccount Current default account\n     */\n    MainCtrl.prototype.openDefaultAccountGroup = function(defaultAccount) {\n        var groups = this.model.groupByInternalExternal ? this.model.internalCollection : this.assetCollection;\n        utils.forEach(groups, function(group) {\n            group.isOpen = defaultAccount.code === group.code;\n        });\n    };\n\n    MainCtrl.prototype.config = function() {\n        this.title = this.widget.getPreference('title');\n        this.preferences = {\n            showGroups: utils.parseBoolean(this.widget.getPreference('showGroups')),\n            showTotals: utils.parseBoolean(this.widget.getPreference('showGroupTotals')),\n            showAccountHolderName: utils.parseBoolean(this.widget.getPreference('showAccountHolderName')),\n            showAccountType: utils.parseBoolean(this.widget.getPreference('showAccountType')),\n            showAccountHolderCategory: utils.parseBoolean(this.widget.getPreference('showAccountHolderCategory')),\n            selectDefaultAccount: utils.parseBoolean(this.widget.getPreference('selectDefaultAccount')),\n            groupByInternalExternal: utils.parseBoolean(this.widget.getPreference('groupByInternalExternal')),\n            showAllFinances: utils.parseBoolean(this.widget.getPreference('showAllFinances')),\n            defaultBalance: this.widget.getPreference('preferredBalanceView') ||\n                this.widget.getPreferenceFromParents('preferredBalanceView') ||\n                'current',\n            defaultAccountId: this.widget.getPreference('defaultAccountId'),\n            internalIsOpen: true,\n            externalIsOpen: false\n        };\n\n        this.preferences.defaultBalanceMapped = balanceMap[this.preferences.defaultBalance] || this.preferences.defaultBalance;\n\n        this.model.config({\n            assetsEndpoint: this.widget.getResolvedPreference('accountsDataSrc'),\n            groupsEndpoint: this.widget.getResolvedPreference('groupsDataSrc'),\n            groupByInternalExternal: this.preferences.groupByInternalExternal\n        });\n    };\n\n    MainCtrl.prototype.load = function () {\n        var firstAccount;\n\n        this.model.loadingNow = true;\n        this.model.noAccountsAvailable = false;\n        this.model.load().then(function() {\n            this.model.loadingNow = false;\n            if (!this.model.accounts || (\n                !(this.model.accounts['current-account'] && this.model.accounts['current-account'].length) &&\n                !(this.model.accounts.card && this.model.accounts.card.length) &&\n                !(this.model.accounts['current-portfolio'] && this.model.accounts['current-portfolio'].length)\n                )\n            ) {\n                this.model.noAccountsAvailable = true;\n            }\n\n            if(!this.selectDefaultAccount()) {\n                firstAccount = this.model.first();\n                if (utils.isPlainObject(firstAccount)) {\n                    this.selectAccount(firstAccount, firstAccount.code);\n                }\n            }\n\n            // Subscribe to update account details\n            this.bus.subscribe('account-details:account:update', function(account) {\n                utils.safeApply(this.scope, this.updateAccountDetails.bind(this, account));\n            }.bind(this));\n        }.bind(this))\n        ['finally'](function() {\n            this.model.loadingNow = false;\n        }.bind(this))\n        ['catch'](function(error) {\n            throw this.model.error = 'Failed to load accounts.';\n        }.bind(this));\n    };\n\n    MainCtrl.prototype.refreshWidget = function() {\n        this.widget.refreshHTML();\n        this.load();\n    };\n\n    MainCtrl.prototype.updateAccountDetails = function(updatedAccount) {\n        var account = this.model.findAccountById(updatedAccount.id);\n        if (account) {\n            utils.assign(account, updatedAccount);\n        }\n    };\n\n     MainCtrl.prototype.selectAccount = function(account, groupCode) {\n         this.model.selected = account.id;\n\n         if (account.type === 'portfolio') {\n             this.bus.publish('launchpad-retail.portfolioSelected', account);\n         }\n         else if (groupCode && groupCode === 'card') {\n             this.bus.publish('launchpad-retail.openCardManagement');\n             this.bus.publish('launchpad-retail.cardSelected', {account: account});\n         }\n         else {\n             this.bus.publish('launchpad-retail.accountSelected', {\n                 accountId: account.id,\n                 originType: 'accounts'\n             }, true);\n         }\n     };\n\n    MainCtrl.prototype.payForAccount = function ($event, id) {\n        $event.stopPropagation();\n        this.bus.publish('launchpad-retail.requestMoneyTransfer', {\n            accountId: id\n        });\n    };\n\n    MainCtrl.prototype.openAllFinances = function() {\n        this.bus.publish('launchpad-retail.accountSelected', {\n            // Id for all accounts\n            accountId: '000-000-000',\n            originType: 'accounts'\n        });\n    };\n\n    exports.MainCtrl = MainCtrl;\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/controllers.js\n **/"],"sourceRoot":""}