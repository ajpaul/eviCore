{"version":3,"sources":["webpack:///widget-alert-messages/webpack/universalModuleDefinition","webpack:///widget-alert-messages/scripts/main.js","webpack:///widget-alert-messages/webpack/bootstrap 0a36af825627ed79afb4","webpack:///widget-alert-messages/./scripts/main.js","webpack:///widget-alert-messages/(webpack)/buildin/module.js","webpack:///widget-alert-messages/external \"base\"","webpack:///widget-alert-messages/external \"core\"","webpack:///widget-alert-messages/external \"ui\"","webpack:///widget-alert-messages/external \"module-accounts\"","webpack:///widget-alert-messages/external \"module-automation\"","webpack:///widget-alert-messages/./scripts/controllers.js","webpack:///widget-alert-messages/./scripts/directives.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_3__","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_5__","__WEBPACK_EXTERNAL_MODULE_6__","__WEBPACK_EXTERNAL_MODULE_7__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","run","lpWidget","lpAccounts","lpAutomation","lpCoreBus","setConfig","accountsEndpoint","getPreference","automationsEndpoint","automationEndpoint","automationsActivationEndpoint","automationsDeactivationEndpoint","recipesEndpoint","locale","title","publish","model","name","$inject","base","core","ui","accounts","automation","deps","createModule","controller","directive","undefined","webpackPolyfill","deprecate","paths","children","MainCtrl","$scope","$window","lpCoreUtils","ctrl","initialModel","filters","counterForSelectors","counterForTriggers","counterForActions","channelSelected","goTo","stepName","currentStep","selectStep","hideStep","stepsToHide","split","forEach","step","getTriggerName","trigger","triggerDefinition","isCurrentStep","backStep","inputModel","isListedStep","stepsObj","initialize","getAttribute","currencySymbol","accountsModel","automationsModel","automations","recipes","amountDirection","value","load","then","loadAutomations","loadRecipes","implementedSelectors","currentAutomationObject","cancelAddingNewAutomation","selected","fillingAutomationProgress","$broadcast","updateAutomation","justPrefill","isNew","parent","myRecipe","clone","find","recipe","clearFilters","assign","updateBackup","selectedTriggerId","account","selectors","accountId","filter","index","f","key","keys","Number","condition","dir","data","actions","action","pluck","indexOf","type","push","a","enable","isActive","automationName","current","createAutomation","selectTrigger","clickSelected","newTriggerSelected","normalizeTrigger","listOfAllowedSelectors","intersection","length","goToFilters","selectAccount","selectFilterValue","form","$invalid","form3submitInvalid","selectChannel","isAddedActionIndex","act","splice","goToTransport","location","selectLocation","isInvalid","form5submitInvalid","saveAutomation","enabled","create","response","result","unshift","update","auto","i","deleteAutomation","remove","toggleAutomationStatus","toggleAutomationStatusHideButton","toggleStatus","composeAutomationDetails","preFill","label","alias","identifier","filtersLayout","filtersData","fl","fName","fd","cond","val","values","lpAutomationsNewButton","$templateCache","put","restrict","template","get","lpAutomationsList","$modal","link","direction","show","hideList","showList","toggleListView","$on","automationShowDetails","scope","layout","showAutomationDetails","$watch","details","lpConfirmDelete","callback","lpCreateNewAutomation","selectAutomationTrigger","selectAutomationSelectors","selectAutomationSelectorsAccount","selectAutomationFilters","selectAutomationFilterAmount","selectAutomationFilterString","selectAutomationChannel","markChannelSelected","selectAutomationTransport","selectAutomationTransportEmail","selectAutomationTransportPhone","automationSave"],"mappings":"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","file":"scripts/main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-accounts\"), require(\"module-automation\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"core\", \"ui\", \"module-accounts\", \"module-automation\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-alert-messages\"] = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-accounts\"), require(\"module-automation\"));\n\telse\n\t\troot[\"widget-alert-messages\"] = factory(root[\"base\"], root[\"core\"], root[\"ui\"], root[\"module-accounts\"], root[\"module-automation\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-accounts\"), require(\"module-automation\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"core\", \"ui\", \"module-accounts\", \"module-automation\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-alert-messages\"] = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-accounts\"), require(\"module-automation\"));\n\telse\n\t\troot[\"widget-alert-messages\"] = factory(root[\"base\"], root[\"core\"], root[\"ui\"], root[\"module-accounts\"], root[\"module-automation\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/_karma_webpack_//\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n\t/**\n\t * @module widget-alert-messages\n\t * @version 1.0.0\n\t * @file ng-widget-sample description\n\t * @copyright Backbase Amsterdam\n\t * @requires module:lp/main\n\t * @requires module:lp/modules/core\n\t * @requires interact\n\t *\n\t * @example Require Widget\n\t * // add this in the index.html\n\t * window.requireWidget( __WIDGET__ ,'scripts/index');\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\n\t    'use strict';\n\n\t    module.name = 'widget-automation-alerts';\n\n\t    var base = __webpack_require__(3);\n\t    var core = __webpack_require__(4);\n\t    var ui = __webpack_require__(5);\n\n\t    var accounts = __webpack_require__(6);\n\t    var automation = __webpack_require__(7);\n\n\t    var deps = [core.name, ui.name, accounts.name, automation.name];\n\n\t    // @ngInject\n\t    function run(lpWidget, lpAccounts, lpAutomation, lpCoreBus) {\n\n\t        lpAccounts.setConfig({\n\t            'accountsEndpoint': lpWidget.getPreference('accountsEndpoint')\n\t        });\n\n\t        lpAutomation.setConfig({\n\t            'automationsEndpoint': lpWidget.getPreference('automationsEndpoint'),\n\t            'automationEndpoint': lpWidget.getPreference('automationEndpoint'),\n\t            'automationsActivationEndpoint': lpWidget.getPreference('automationsActivationEndpoint'),\n\t            'automationsDeactivationEndpoint': lpWidget.getPreference('automationsDeactivationEndpoint'),\n\t            'recipesEndpoint': lpWidget.getPreference('recipesEndpoint'),\n\t            'locale': lpWidget.getPreference('locale'),\n\t            'title': lpWidget.getPreference('title')\n\t        });\n\n\t        lpCoreBus.publish('cxp.item.loaded', { id: lpWidget.model.name });\n\t    }\n\n\t    module.exports = base.createModule(module.name, deps).controller(__webpack_require__(8)).directive(__webpack_require__(9)).run(run);\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t/**\n\t * Controllers\n\t * @module controllers\n\t */\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {\n\n\t    'use strict';\n\n\t    /**\n\t     * MainCtrl description.\n\t     */\n\t    // @ngInject\n\n\t    exports.MainCtrl = function ($scope, $window, lpAccounts, lpAutomation, lpCoreUtils) {\n\n\t        var ctrl = this;\n\t        var initialModel = function initialModel() {\n\t            return { filters: [], counterForSelectors: 0, counterForTriggers: 0, counterForActions: 0, channelSelected: [] };\n\t        };\n\n\t        /**\n\t         * Go to step, defined with stepName\n\t         *\n\t         * @param stepName\n\t         */\n\t        ctrl.goTo = function (stepName) {\n\t            $scope.currentStep = stepName;\n\t            $scope.selectStep[$scope.currentStep] = 1;\n\t        };\n\n\t        /**\n\t         * Hiding a step or several steps (if stepName is a comma-separated list of step names)\n\t         *\n\t         * @param stepName\n\t         */\n\t        ctrl.hideStep = function (stepsToHide) {\n\t            if (typeof stepsToHide === 'string') {\n\t                stepsToHide.split(',').forEach(function (step) {\n\t                    $scope.selectStep[step] = false;\n\t                });\n\t            }\n\t        };\n\n\t        /**\n\t         * Get trigger name\n\t         *\n\t         * @param trigger\n\t         * @returns {AutomationModel.recipes.triggerDefinition.name|*|string}\n\t         */\n\t        $scope.getTriggerName = function (trigger) {\n\t            if (!trigger || !trigger.triggerDefinition) {\n\t                return false;\n\t            } else {\n\t                return trigger.triggerDefinition.name;\n\t            }\n\t        };\n\n\t        /**\n\t         * Helper function to know if the given number is the last step\n\t         * of filling the form\n\t         *\n\t         * @param stepsArr\n\t         * @param currentStep\n\t         * @returns {boolean}\n\t         */\n\t        $scope.isCurrentStep = function (currentStep) {\n\t            return $scope.currentStep === currentStep;\n\t        };\n\n\t        /**\n\t         * get the form back to specified step\n\t         *\n\t         * @param step\n\t         * @param stepsToHide\n\t         */\n\t        $scope.backStep = function (step, stepsToHide) {\n\t            if (step && stepsToHide) {\n\n\t                // exception for selectors step\n\t                if (step === 'chooseSelectors' && $scope.inputModel.counterForSelectors < 1) {\n\t                    step = 'selectTrigger';\n\t                }\n\n\t                ctrl.hideStep(stepsToHide);\n\t                ctrl.goTo(step);\n\t            }\n\t        };\n\n\t        /**\n\t         * Helper function to know if the given number is listed in the array\n\t         *\n\t         * @param stepsArr\n\t         * @param currentStep\n\t         * @returns {boolean}\n\t         */\n\t        $scope.isListedStep = function (stepsObj, currentStep) {\n\t            return stepsObj[currentStep] === 1;\n\t        };\n\n\t        // Pre-fill initial structure\n\t        var initialize = function initialize() {\n\t            $scope.locale = lpAutomation.getAttribute('locale');\n\t            $scope.title = lpAutomation.getAttribute('title');\n\t            $scope.currencySymbol = $scope.locale === 'en-US' ? '$' : '€';\n\n\t            $scope.accountsModel = {};\n\t            $scope.automationsModel = {\n\t                automations: [],\n\t                recipes: [],\n\t                amountDirection: [{\n\t                    'name': 'Less than',\n\t                    'value': 'lt'\n\t                }, {\n\t                    'name': 'Less than or Equal',\n\t                    'value': 'lte'\n\t                }, {\n\t                    'name': 'Equal',\n\t                    'value': 'eq'\n\t                }, {\n\t                    'name': 'More than or Equal',\n\t                    'value': 'gte'\n\t                }, {\n\t                    'name': 'More than',\n\t                    'value': 'gt'\n\t                }]\n\t            };\n\n\t            // Load accounts to be used in selectors\n\t            lpAccounts.load().then(function (accounts) {\n\t                $scope.accountsModel.accounts = accounts;\n\t            });\n\n\t            // Get stored automations list\n\t            lpAutomation.loadAutomations().then(function (automations) {\n\t                $scope.automationsModel.automations = automations;\n\t            });\n\n\t            // Get recipes list\n\t            lpAutomation.loadRecipes().then(function (recipes) {\n\t                $scope.automationsModel.recipes = recipes;\n\t            });\n\n\t            // pre-configs\n\t            $scope.implementedSelectors = ['accountId'];\n\n\t            // Steps list (named)\n\t            $scope.selectStep = {};\n\t            $scope.currentStep = '';\n\n\t            // Temporary model for input values\n\t            $scope.inputModel = initialModel();\n\n\t            // new automation container\n\t            $scope.currentAutomationObject = null;\n\t        };\n\n\t        // cancel the form\n\t        // -----------------------------------\n\t        // here we clear the all form fields\n\t        $scope.cancelAddingNewAutomation = function () {\n\t            $scope.selectStep = {};\n\t            $scope.currentStep = '';\n\t            $scope.counterForSelectors = 0;\n\t            $scope.accountsModel.selected = null;\n\t            $scope.inputModel = initialModel();\n\t            $scope.currentAutomationObject = null;\n\t            $scope.fillingAutomationProgress = false;\n\t            $scope.$broadcast('lpAutomationsShowList');\n\t        };\n\n\t        // Step 0: UPDATE automation\n\t        $scope.updateAutomation = function (automation, justPrefill) {\n\t            var inputModel = initialModel();\n\t            var currentAutomationObject = {\n\t                isNew: false,\n\t                id: automation.id,\n\t                parent: automation.parent\n\t            };\n\n\t            // PRE-FILL: get clear schemas\n\t            var myRecipe = lpCoreUtils.clone(lpCoreUtils.find($scope.automationsModel.recipes, function (recipe) {\n\t                return $scope.getTriggerName(recipe) === automation.trigger.id;\n\t            }));\n\t            var clearFilters = lpCoreUtils.clone(myRecipe.filters);\n\n\t            // PRE-FILL: trigger\n\t            currentAutomationObject.trigger = lpCoreUtils.assign(myRecipe, automation.trigger);\n\t            ctrl.updateBackup = {\n\t                selectedTriggerId: $scope.getTriggerName(currentAutomationObject.trigger),\n\t                automation: lpCoreUtils.clone(automation)\n\t            };\n\n\t            // PRE-FILL: selected account (if any)\n\t            $scope.accountsModel.selected = lpCoreUtils.find($scope.accountsModel.accounts, function (account) {\n\t                return account.id === automation.trigger.selectors.accountId;\n\t            });\n\n\t            // PRE-FILL: filters\n\t            lpCoreUtils.forEach(clearFilters, function (filter, index) {\n\t                inputModel.filters[index] = {};\n\n\t                lpCoreUtils.forEach(myRecipe.filters, function (f) {\n\t                    var key = lpCoreUtils.keys(f)[0];\n\t                    if (filter.name === key) {\n\t                        inputModel.filters[index][key] = {};\n\t                        inputModel.filters[index][key].value = key === 'paymentAmount' ? Number(f[key][0].value) : f[key][0].value;\n\t                        inputModel.filters[index][key].condition = lpCoreUtils.find($scope.automationsModel.amountDirection, function (dir) {\n\t                            return dir.value === f[key][0].condition;\n\t                        });\n\t                    }\n\t                });\n\t            });\n\t            currentAutomationObject.trigger.filters = clearFilters;\n\n\t            // PRE-FILL: actions\n\t            inputModel.channelSelected = [];\n\t            currentAutomationObject.data = { actions: [] };\n\t            lpCoreUtils.forEach(myRecipe.actions, function (action, index) {\n\t                var selected = lpCoreUtils.pluck(automation.actions, 'type');\n\t                if (lpCoreUtils.indexOf(selected, action.type) > -1) {\n\t                    inputModel.channelSelected[index] = true;\n\t                    currentAutomationObject.data.actions.push(lpCoreUtils.find(automation.actions, function (a) {\n\t                        return a.type === action.type;\n\t                    }));\n\t                } else {\n\t                    inputModel.channelSelected[index] = false;\n\t                }\n\t            });\n\n\t            // PRE-FILL: if active\n\t            inputModel.enable = automation.isActive;\n\n\t            // PRE-FILL: name\n\t            inputModel.automationName = automation.name;\n\n\t            if (justPrefill) {\n\t                // to display details we need just prefils\n\t                return {\n\t                    current: currentAutomationObject,\n\t                    model: inputModel\n\t                };\n\t            } else {\n\t                $scope.fillingAutomationProgress = true;\n\t                $scope.currentAutomationObject = currentAutomationObject;\n\t                $scope.inputModel = inputModel;\n\t                $scope.$broadcast('lpAutomationsHideList');\n\t                ctrl.goTo('selectTrigger');\n\t            }\n\t        };\n\n\t        // Step 0: create NEW automation\n\t        $scope.createAutomation = function () {\n\t            $scope.$broadcast('lpAutomationsHideList');\n\t            $scope.fillingAutomationProgress = true;\n\t            $scope.currentAutomationObject = {\n\t                isNew: true\n\t            };\n\n\t            ctrl.goTo('selectTrigger');\n\t        };\n\n\t        // Step 1: select trigger\n\t        $scope.selectTrigger = function (trigger, clickSelected) {\n\t            if (clickSelected) {\n\t                return;\n\t            }\n\t            var newTriggerSelected = !!trigger;\n\t            var automation = $scope.currentAutomationObject;\n\t            trigger = trigger || automation.trigger;\n\n\t            // if we select new trigger, we should clear filters, which are related to\n\t            // previous trigger and clear selectors counter\n\t            if (newTriggerSelected) {\n\t                $scope.inputModel.filters = [];\n\t                $scope.inputModel.counterForSelectors = 0;\n\n\t                // restore data if we selected 'ours' trigger again\n\t                if (!automation.isNew && ctrl.updateBackup.selectedTriggerId === $scope.getTriggerName(trigger)) {\n\t                    $scope.updateAutomation(ctrl.updateBackup.automation);\n\t                    return;\n\t                }\n\t            }\n\n\t            automation.trigger = lpAutomation.normalizeTrigger(trigger);\n\t            automation.data = automation.data || { actions: [] };\n\t            automation.parent = automation.parent || trigger.id;\n\t            $scope.inputModel.counterForTriggers = $scope.inputModel.counterForTriggers || 1;\n\t            $scope.inputModel.counterForSelectors = $scope.inputModel.counterForSelectors || 0;\n\n\t            // TRICK: check if we have selectors to be shown (decide to skip the 'selectors' step)\n\t            var listOfAllowedSelectors = lpCoreUtils.intersection(lpCoreUtils.pluck(automation.trigger.selectors, 'name'), $scope.implementedSelectors);\n\t            if (listOfAllowedSelectors.length > 0) {\n\t                ctrl.goTo('chooseSelectors');\n\t            } else {\n\t                ctrl.goTo('selectFilters');\n\t            }\n\t        };\n\n\t        // Step 2: leave Selectors\n\t        $scope.goToFilters = function () {\n\n\t            // Update: at least one selector chosen\n\t            if (!$scope.currentAutomationObject.isNew && $scope.accountsModel.selected) {\n\t                $scope.inputModel.counterForSelectors += 1;\n\t            }\n\n\t            ctrl.goTo('selectFilters');\n\t        };\n\n\t        // Step 2.1: select account\n\t        $scope.selectAccount = function () {\n\t            var automation = $scope.currentAutomationObject;\n\t            automation.data.accountId = $scope.accountsModel.selected.id;\n\t            $scope.inputModel.counterForSelectors += 1;\n\t        };\n\n\t        // Step 3: select filters\n\t        $scope.selectFilterValue = function (form) {\n\t            var automation = $scope.currentAutomationObject;\n\n\t            if (form.$invalid || automation === null) {\n\t                $scope.form3submitInvalid = true;\n\t                return;\n\t            } else {\n\t                $scope.form3submitInvalid = false;\n\t            }\n\n\t            automation.data.filters = $scope.inputModel.filters;\n\n\t            ctrl.goTo('selectChannel');\n\t        };\n\n\t        // Step 4: select channel\n\t        $scope.selectChannel = function (action) {\n\t            var automation = $scope.currentAutomationObject;\n\t            var actions = automation.data.actions;\n\t            var isAddedActionIndex = false;\n\n\t            actions.forEach(function (act, index) {\n\t                if (act.type === action.type) {\n\t                    isAddedActionIndex = index;\n\t                }\n\t            });\n\n\t            // add selected action to list (if not added before)\n\t            if (isAddedActionIndex === false) {\n\t                automation.data.actions.push(action);\n\t            } else {\n\t                actions.splice(isAddedActionIndex, 1);\n\t            }\n\t        };\n\n\t        // Step 4: go to next step\n\t        $scope.goToTransport = function () {\n\t            var automation = $scope.currentAutomationObject;\n\t            var actions = automation.data.actions;\n\n\t            // clear values\n\t            if (automation.isNew) {\n\t                actions.forEach(function (action, index) {\n\t                    var key = lpCoreUtils.keys(action.location)[0];\n\t                    action.location[key] = '';\n\t                });\n\t            }\n\n\t            ctrl.goTo('selectTransport');\n\t        };\n\n\t        // Step 5: select e-mail or phone number (or another transport)\n\t        $scope.selectLocation = function (isInvalid) {\n\t            if (isInvalid) {\n\t                $scope.form5submitInvalid = true;\n\t                return;\n\t            } else {\n\t                $scope.form5submitInvalid = false;\n\t            }\n\n\t            ctrl.goTo('saveAutomation');\n\t        };\n\n\t        // Step 6: saving automation\n\t        $scope.saveAutomation = function (isInvalid) {\n\t            var automation = $scope.currentAutomationObject;\n\n\t            automation.data.enabled = $scope.inputModel.enable;\n\t            automation.data.name = $scope.inputModel.automationName;\n\n\t            if (automation.isNew) {\n\t                lpAutomation.create(automation).then(function (response) {\n\n\t                    // success adding: add to list\n\t                    if (response && response.data.id) {\n\t                        response.result.id = response.data.id;\n\t                        $scope.automationsModel.automations.unshift(response.result);\n\t                    }\n\n\t                    // empty current model\n\t                    automation = null;\n\t                });\n\t            } else {\n\t                lpAutomation.update(automation).then(function (result) {\n\t                    lpCoreUtils.forEach($scope.automationsModel.automations, function (auto, i) {\n\t                        if (auto.id === result.id) {\n\t                            $scope.automationsModel.automations[i] = result;\n\t                        }\n\t                    });\n\t                    automation = null;\n\t                });\n\t            }\n\n\t            $scope.cancelAddingNewAutomation();\n\t        };\n\n\t        // Delete Automation\n\t        $scope.deleteAutomation = function (id, index) {\n\t            lpAutomation.remove(id).then(function (response) {\n\t                $scope.automationsModel.automations.splice(index, 1);\n\t            });\n\t        };\n\n\t        // Change status of the automation\n\t        $scope.toggleAutomationStatus = function (automation) {\n\t            $scope.toggleAutomationStatusHideButton = true;\n\t            lpAutomation.toggleStatus(automation).then(function (response) {\n\t                automation.isActive = !automation.isActive;\n\t                $scope.toggleAutomationStatusHideButton = false;\n\t            });\n\t        };\n\n\t        // Compose automation details object\n\t        $scope.composeAutomationDetails = function (automation) {\n\t            var result = [];\n\t            var preFill = $scope.updateAutomation(automation, true);\n\n\t            // trigger name\n\t            result.push({\n\t                label: 'Trigger name',\n\t                value: preFill.current.trigger.name\n\t            });\n\n\t            // Selectors (account)\n\t            var accountId = preFill.current.trigger.selectors.accountId;\n\t            if (accountId && $scope.accountsModel.selected) {\n\t                result.push({\n\t                    label: 'Account selected',\n\t                    value: $scope.accountsModel.selected.alias + ' (' + $scope.accountsModel.selected.identifier + ')'\n\t                });\n\t            }\n\n\t            // Filters\n\t            var filtersLayout = preFill.current.trigger.filters;\n\t            var filtersData = preFill.model.filters;\n\t            filtersLayout.forEach(function (fl) {\n\t                var fName = fl.name;\n\t                filtersData.forEach(function (fd) {\n\t                    if (fd[fName]) {\n\t                        var cond = fd[fName].condition && accountId ? fd[fName].condition : '';\n\t                        var val = fd[fName].value ? fd[fName].value : '';\n\n\t                        if (val) {\n\t                            result.push({\n\t                                label: fl.label || 'Filter',\n\t                                value: (cond.name ? cond.name : cond) + ' ' + val\n\t                            });\n\t                        }\n\t                    }\n\t                });\n\t            });\n\n\t            // Actions\n\t            var actions = preFill.current.data.actions;\n\t            actions.forEach(function (a) {\n\t                result.push({\n\t                    label: 'Action ' + a.type,\n\t                    value: lpCoreUtils.values(a.location)[0]\n\t                });\n\t            });\n\n\t            return result;\n\t        };\n\n\t        initialize();\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t/**\n\t * Directives\n\t * @module directives\n\t */\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\n\t    'use strict';\n\n\t    /**\n\t     * Directive to show the 'Create New' button\n\t     */\n\t    // @ngInject\n\n\t    exports.lpAutomationsNewButton = function ($templateCache) {\n\n\t        $templateCache.put('lp-automations-new-button.html', '<div class=\"lp-automations-new-button-wrapper text-right\">' + '<button class=\"btn btn-primary create-new-button\" ng-class=\"{\\'disabled ng-hide\\': fillingAutomationProgress, \\'disabled\\': !automationsModel.recipes.length}\" ng-click=\"createAutomation()\">' + '<div class=\"create-button-text-full-view\" lp-i18n=\"Create Alert\"></div>' + '<div class=\"create-button-text-mobile-view\"><span class=\"glyphicon glyphicon-plus\">&nbsp;</span></div>' + '</button>' + '</div>');\n\n\t        return {\n\t            restrict: 'A',\n\t            template: $templateCache.get('lp-automations-new-button.html')\n\t        };\n\t    };\n\n\t    /**\n\t     * Directive to show the list of saved automations\n\t     */\n\t    // @ngInject\n\t    exports.lpAutomationsList = function ($templateCache, $modal) {\n\n\t        $templateCache.put('lp-automations-current-list.html', '<div class=\"lp-automations-list-wrapper\" >' + '<div class=\"lp-automations-list-hide-show\" ng-click=\"toggleListView()\">' + '<div class=\"main-item\" lp-i18n=\"Toggle list\" translate-values=\"{action: model.action}\"></div>' + '<div class=\"secondary-item glyphicon glyphicon-chevron-{{ model.direction }}\"></div>' + '</div>' + '<div ng-show=\"model.show\" ng-if=\"!automationsModel.automations.length\" class=\"no-automations-stored\">' + '<span lp-i18n=\"No Automations Stored Yet...\"></span><button ng-click=\"createAutomation()\" ng-class=\"{\\'disabled\\': fillingAutomationProgress, \\'disabled\\': !automationsModel.recipes.length}\" class=\"btn btn-link\" lp-i18n=\"Create one!\"></button>' + '</div>' + '<div ng-show=\"model.show\">' + '<div ng-repeat=\"automation in automationsModel.automations track by $index\">' + '<div class=\"row automation-row\">' + '<div class=\"col-xs-2 col-sm-2 col-md-2 cell switcher\">' + '<div lp-enable-disable-toggle=\"automation.isActive\" ng-click=\"toggleAutomationStatus(automation)\"></div>' + '</div>' + '<div class=\"col-xs-6 col-sm-6 col-md-6 cell\" ng-click=\"(showAutomationDetails = !showAutomationDetails)\">' + '<div class=\"view-details-link\" title=\"{{\\'Click to view details\\'|translate}}\">{{ automation.name }}</div>' + '</div>' + '<div class=\"col-xs-2 col-sm-2 col-md-2 cell text-right\">' + '<div ng-click=\"updateAutomation(automation)\" class=\"btn btn-info glyphicon glyphicon-pencil\">' + '<div class=\"button-content\" lp-i18n=\"Update\"></div>' + '</div>' + '</div>' + '<div class=\"col-xs-2 col-sm-2 col-md-2 cell text-right\" ng-class=\"{\\'delete-cell\\': automation.deleteQuestionOn}\">' + '<div lp-confirm-delete=\"automation.deleteQuestionOn\" callback=\"deleteAutomation(automation.id, $index)\"></div>' + '</div>' + '<div ng-show=\"automation.deleteQuestionOn || toggleAutomationStatusHideButton\" class=\"step-overlay\"></div>' + '</div>' + '<div ng-show=\"showAutomationDetails\" automation-show-details=\"showAutomationDetails\" layout=\"composeAutomationDetails(automation)\"></div>' + '</div>' + '</div>' + '</div>');\n\n\t        return {\n\t            restrict: 'A',\n\t            template: $templateCache.get('lp-automations-current-list.html'),\n\t            link: function link($scope) {\n\t                $scope.model = {};\n\t                $scope.model.action = 'hide';\n\t                $scope.model.direction = 'up';\n\t                $scope.model.show = true;\n\n\t                $scope.hideList = function () {\n\t                    $scope.model.action = 'show';\n\t                    $scope.model.direction = 'down';\n\t                    $scope.model.show = false;\n\t                };\n\n\t                $scope.showList = function () {\n\t                    $scope.model.action = 'hide';\n\t                    $scope.model.direction = 'up';\n\t                    $scope.model.show = true;\n\t                };\n\n\t                $scope.toggleListView = function () {\n\t                    if ($scope.model.action === 'hide') {\n\t                        $scope.hideList();\n\t                    } else {\n\t                        $scope.showList();\n\t                    }\n\t                };\n\n\t                $scope.$on('lpAutomationsShowList', $scope.showList);\n\t                $scope.$on('lpAutomationsHideList', $scope.hideList);\n\t            }\n\t        };\n\t    };\n\n\t    // @ngInject\n\t    exports.automationShowDetails = function ($templateCache) {\n\t        $templateCache.put('automation-show-details.html', '<div class=\"automation-show-details-wrapper\">' + '<div class=\"row\">' + '<div ng-repeat=\"detail in details\" class=\"col-xs-12 col-sm-6 col-md-6 cell\">' + '<label>{{ detail.label }}:</label>' + '<div class=\"property-value\">{{ detail.value }}</div>' + '</div>' + '</div>' + '</div>');\n\n\t        return {\n\t            scope: {\n\t                trigger: '=automationShowDetails',\n\t                layout: '&',\n\t                showAutomationDetails: '='\n\t            },\n\t            restrict: 'AC',\n\t            template: $templateCache.get('automation-show-details.html'),\n\t            link: function link($scope) {\n\t                $scope.$watch('trigger', function (value) {\n\t                    if (value) {\n\t                        $scope.details = $scope.layout();\n\t                    }\n\t                });\n\t            }\n\t        };\n\t    };\n\n\t    /**\n\t     * Confirm delete button (reusable)\n\t     *\n\t     */\n\t    // @ngInject\n\t    exports.lpConfirmDelete = function ($templateCache) {\n\t        $templateCache.put('lp-confirm-delete.html', '<div ng-show=\"!trigger\" title=\"Delete Automation\" ng-click=\"(trigger = true)\" class=\"btn btn-danger glyphicon glyphicon-remove\">' + '<div class=\"button-content\" lp-i18n=\"Delete\"></div>' + '</div>' + '<div ng-hide=\"!trigger\" ng-class=\"{\\'animated bounceInRight yesNoSure\\': trigger}\">' + '<div class=\"btn btn-link glyphicon glyphicon-chevron-left\" title=\"Cancel deleting\" ng-click=\"(trigger = false)\">' + '<div class=\"button-content\" lp-i18n=\"Cancel\"></div>' + '</div>' + '<div class=\"btn btn-danger yesNoSure glyphicon glyphicon-trash\" title=\"Really Delete\" ng-click=\"callback()\">' + '<div class=\"button-content\" lp-i18n=\"Delete!\"></div>' + '</div>' + '</div>');\n\n\t        return {\n\t            scope: {\n\t                trigger: '=lpConfirmDelete',\n\t                callback: '&'\n\t            },\n\t            restrict: 'AC',\n\t            template: $templateCache.get('lp-confirm-delete.html')\n\t        };\n\t    };\n\n\t    /**\n\t     * ------------------------------------------------\n\t     *   MAIN Directive to show the 'Create New' form\n\t     * ------------------------------------------------\n\t     */\n\t    // @ngInject\n\t    exports.lpCreateNewAutomation = function ($templateCache) {\n\n\t        $templateCache.put('lp-automations-new-form.html', '<div class=\"lp-automations-new-form-wrapper\">' + '<div select-automation-trigger=\"\" class=\"form-step\"></div>' + '<div select-automation-selectors=\"\" class=\"form-step\"></div>' + '<div select-automation-filters=\"\" class=\"form-step\"></div>' + '<div select-automation-channel=\"\" class=\"form-step\"></div>' + '<div select-automation-transport=\"\" class=\"form-step\"></div>' + '<div automation-save=\"\" class=\"form-step\"></div>' + '</div>');\n\n\t        return {\n\t            restrict: 'A',\n\t            template: $templateCache.get('lp-automations-new-form.html')\n\t        };\n\t    };\n\n\t    /**\n\t     * STEP - 1: Directive to select TRIGGER\n\t     */\n\t    // @ngInject\n\t    exports.selectAutomationTrigger = function ($templateCache) {\n\n\t        $templateCache.put('lp-automations-select-trigger.html', '<div ng-show=\"isListedStep(selectStep, \\'selectTrigger\\')\" class=\"lp-automations-select-wrapper\">' + '<h5 lp-i18n=\"Choose a trigger for the automation:\"></h5>' + '<ul class=\"row\">' + '<li ng-repeat=\"recipe in automationsModel.recipes track by $index\" class=\"col-xs-12 col-sm-4 col-md-3\">' + '<div ng-class=\"{\\'selected\\': getTriggerName(currentAutomationObject.trigger) === getTriggerName(recipe)}\" class=\"btn btn-default btn-block btn-automation\" ng-click=\"selectTrigger(recipe, getTriggerName(currentAutomationObject.trigger) === getTriggerName(recipe))\">' + '{{recipe.name}}' + '</div>' + '</li>' + '</ul>' + '<div ng-show=\"isCurrentStep(\\'selectTrigger\\')\" class=\"text-right\">' + '<button ng-click=\"cancelAddingNewAutomation()\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></button>' + '<button class=\"btn btn-primary text-right go-next\" ng-click=\"selectTrigger()\" lp-i18n=\"Next\"></button>' + '</div>' + '<div ng-show=\"!isCurrentStep(\\'selectTrigger\\')\" class=\"step-overlay\"></div>' + '</div>');\n\n\t        return {\n\t            restrict: 'A',\n\t            template: $templateCache.get('lp-automations-select-trigger.html')\n\t        };\n\t    };\n\n\t    /**\n\t     * STEP - 2: Directive to choose SELECTORS\n\t     */\n\t    // @ngInject\n\t    exports.selectAutomationSelectors = function ($templateCache) {\n\n\t        $templateCache.put('lp-automations-choose-selector.html', '<div ng-show=\"isListedStep(selectStep, \\'chooseSelectors\\')\" class=\"lp-automations-select-wrapper\">' + '<div ng-repeat=\"selector in currentAutomationObject.trigger.selectors\">' + '<div ng-if=\"selector.name === \\'accountId\\'\">' + '<div class=\"select-automation-selectors-account\"></div>' + '</div>' + '</div>' + '<div ng-show=\"isCurrentStep(\\'chooseSelectors\\')\" class=\"text-right\"><br />' + '<button ng-click=\"cancelAddingNewAutomation()\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></button>' + '<button ng-click=\"backStep(\\'selectTrigger\\', \\'chooseSelectors\\')\" class=\"btn btn-link\" lp-i18n=\"Back\"></button>' + '<button ng-class=\"{\\'disabled\\': inputModel.counterForSelectors === 0 && currentAutomationObject.isNew && !accountsModel.selected}\" class=\"btn btn-primary text-right go-next\" ng-click=\"goToFilters()\" lp-i18n=\"Next\"></button>' + '</div>' + '<div ng-show=\"!isCurrentStep(\\'chooseSelectors\\')\" class=\"step-overlay\"></div>' + '</div>');\n\n\t        return {\n\t            restrict: 'A',\n\t            template: $templateCache.get('lp-automations-choose-selector.html')\n\t        };\n\t    };\n\n\t    /**\n\t     * STEP - 2.1: Directive to choose SELECTORS:ACCOUNT\n\t     */\n\t    // @ngInject\n\t    exports.selectAutomationSelectorsAccount = function ($templateCache) {\n\n\t        $templateCache.put('lp-automations-choose-selector-account.html', '<h5 lp-i18n=\"Select an account:\"></h5>' + '<div class=\"row\">' + '<div class=\"col-xs-12 col-sm-8\">' + '<div lp-accounts-select=\"lp-accounts-select\" designated-class=\"lp-normal-account-select-size\" ng-model=\"accountsModel.selected\" lp-accounts=\"accountsModel.accounts\" name=\"accountId\" class=\"lp-accounts-header\" ng-change=\"selectAccount()\"></div>' + '</div>');\n\n\t        return {\n\t            restrict: 'AC',\n\t            template: $templateCache.get('lp-automations-choose-selector-account.html')\n\t        };\n\t    };\n\n\t    /**\n\t     * STEP - 3: Directive to fill in FILTERS\n\t     */\n\t    // @ngInject\n\t    exports.selectAutomationFilters = function ($templateCache) {\n\n\t        $templateCache.put('lp-automations-select-rule.html', '<div ng-show=\"isListedStep(selectStep, \\'selectFilters\\')\" class=\"lp-automations-select-wrapper\">' + '<form ng-submit=\"selectFilterValue(step3Form)\" name=\"step3Form\" novalidate>' + '<div ng-repeat=\"filter in currentAutomationObject.trigger.filters\">' + '<div>' + '<h5>{{filter.label}}:</h5>' + '<div class=\"row\" style=\"margin-bottom: 10px\">' + '<div ng-if=\"filter.type === \\'amount\\'\">' + '<div class=\"select-automation-filter-amount\"></div>' + '</div>' + '<div ng-if=\"filter.type === \\'string\\'\">' + '<div class=\"select-automation-filter-string\"></div>' + '</div>' + '</div>' + '</div>' + '</div>' + '<div ng-show=\"isCurrentStep(\\'selectFilters\\')\" class=\"text-right\">' + '<div ng-click=\"cancelAddingNewAutomation()\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></div>' + '<div ng-click=\"backStep(\\'chooseSelectors\\', \\'selectFilters\\')\" class=\"btn btn-link\" lp-i18n=\"Back\"></div>' + '<button class=\"btn btn-primary text-right\" type=\"submit\" lp-i18n=\"Next\"></button>' + '</div>' + '</form>' + '<div ng-show=\"!isCurrentStep(\\'selectFilters\\')\" class=\"step-overlay\"></div>' + '</div>');\n\n\t        return {\n\t            restrict: 'A',\n\t            template: $templateCache.get('lp-automations-select-rule.html')\n\t        };\n\t    };\n\n\t    /**\n\t     * STEP - 3.1: Directive to select FILTER:AMOUNT\n\t     */\n\t    // @ngInject\n\t    exports.selectAutomationFilterAmount = function ($templateCache) {\n\n\t        $templateCache.put('lp-automations-filter-amount.html', '<div class=\"col-xs-12 col-md-4\">' + '<div dropdown-select=\"dropdown-select\" empty-placeholder-text=\"More then\" ng-model=\"inputModel.filters[$index][filter.name].condition\" options=\"val as val.name for val in automationsModel.amountDirection\"></div>' + '</div>' + '<div class=\"col-xs-12 col-md-8\">' + '<div class=\"row\">' + '<div class=\"col-xs-6 col-sm-6 col-md-6\">' + '<input name=\"paymentAmount\" required=\"required\" type=\"number\" min=\"1\" ng-model=\"inputModel.filters[$index][filter.name].value\" class=\"form-control\" placeholder=\"{{filter.placeholder}}\" />' + '</div>' + '<div class=\"col-xs-6 col-sm-6 col-md-6 currency-filter\">' + '<input class=\"form-control\" placeholder=\"{{\\'Formatted amount\\'|translate}}\" disabled value=\"{{inputModel.filters[$index][filter.name].value | currency: currencySymbol || \\'€\\'}}\" />' + '</div>' + '</div>' + '<div ng-show=\"step3Form.paymentAmount.$error.required === true && form3submitInvalid\" class=\"has-error\" lp-i18n=\"The field is required\"></div>' + '<div ng-show=\"step3Form.paymentAmount.$error.number === true && form3submitInvalid\" class=\"has-error\" lp-i18n=\"Follow the currency format\"></div>' + '<div ng-show=\"step3Form.paymentAmount.$error.min === true && form3submitInvalid\" class=\"has-error\" lp-i18n=\"Only positive numbers allowed\"></div>' + '</div>');\n\n\t        return {\n\t            restrict: 'AC',\n\t            template: $templateCache.get('lp-automations-filter-amount.html')\n\t        };\n\t    };\n\n\t    /**\n\t     * STEP - 3.2: Directive to select FILTER:STRING\n\t     */\n\t    // @ngInject\n\t    exports.selectAutomationFilterString = function ($templateCache) {\n\n\t        $templateCache.put('lp-automations-filter-string.html', '<div class=\"col-xs-12 col-sm-12 col-md-12\">' + '<input name=\"text\" required=\"required\" type=\"text\" ng-model=\"inputModel.filters[$index][filter.name].value\" class=\"form-control\" placeholder=\"{{filter.placeholder}}\" />' + '<div ng-show=\"step3ShowErrorMessage\" class=\"has-error\" lp-i18n=\"The field is required\"></div>' + '<div ng-show=\"step3Form.text.$error.required === true && form3submitInvalid\" class=\"has-error\" lp-i18n=\"The field is required\"></div>' + '</div>');\n\n\t        return {\n\t            restrict: 'AC',\n\t            template: $templateCache.get('lp-automations-filter-string.html')\n\t        };\n\t    };\n\n\t    /**\n\t     * STEP - 4: Directive to select CHANNEL\n\t     */\n\t    // @ngInject\n\t    exports.selectAutomationChannel = function ($templateCache) {\n\n\t        $templateCache.put('lp-automations-select-channel.html', '<div ng-show=\"isListedStep(selectStep, \\'selectChannel\\')\" class=\"lp-automations-select-wrapper\">' + '<h5 lp-i18n=\"Choose an action for the trigger:\"></h5>' + '<ul class=\"row\">' + '<li ng-click=\"markChannelSelected($index)\" ng-repeat=\"action in currentAutomationObject.trigger.actions track by $index\" class=\"col-xs-12 col-sm-4 col-md-3\">' + '<div ng-class=\"{\\'selected\\': inputModel.channelSelected[$index]}\" class=\"btn btn-default btn-block btn-automation\" ng-click=\"selectChannel(action)\">{{action.type}}</div>' + '</li>' + '</ul>' + '<div ng-show=\"isCurrentStep(\\'selectChannel\\')\" class=\"text-right\">' + '<button ng-click=\"cancelAddingNewAutomation()\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></button>' + '<button ng-click=\"backStep(\\'selectFilters\\', \\'selectChannel\\')\" class=\"btn btn-link\" lp-i18n=\"Back\"></button>' + '<button ng-class=\"{\\'disabled\\': currentAutomationObject.data.actions.length < 1}\" class=\"btn btn-primary\" ng-click=\"goToTransport()\" lp-i18n=\"Next\"></button>' + '</div>' + '<div ng-show=\"!isCurrentStep(\\'selectChannel\\')\" class=\"step-overlay\"></div>' + '</div>');\n\n\t        return {\n\t            restrict: 'A',\n\t            template: $templateCache.get('lp-automations-select-channel.html'),\n\t            link: function link($scope) {\n\t                $scope.markChannelSelected = function (index) {\n\t                    if ($scope.inputModel.channelSelected[index]) {\n\t                        $scope.inputModel.channelSelected[index] = false;\n\t                    } else {\n\t                        $scope.inputModel.channelSelected[index] = true;\n\t                    }\n\t                };\n\t            }\n\t        };\n\t    };\n\n\t    /**\n\t     * STEP - 5: Directive to select TRANSPORT\n\t     */\n\t    // @ngInject\n\t    exports.selectAutomationTransport = function ($templateCache) {\n\n\t        $templateCache.put('lp-automations-select-transport.html', '<div ng-show=\"isListedStep(selectStep, \\'selectTransport\\')\" class=\"lp-automations-select-wrapper\">' + '<form ng-submit=\"selectLocation(step5Form.$invalid)\" name=\"step5Form\" novalidate>' + '<div ng-repeat=\"action in currentAutomationObject.data.actions\">' + '<div ng-if=\"action.type === \\'email\\'\">' + '<div class=\"select-automation-transport-email\"></div>' + '</div>' + '<div ng-if=\"action.type === \\'sms\\'\">' + '<div class=\"select-automation-transport-phone\"></div>' + '</div>' + '</div>' + '<div ng-show=\"isCurrentStep(\\'selectTransport\\')\" class=\"text-right\">' + '<div ng-click=\"cancelAddingNewAutomation()\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></div>' + '<div ng-click=\"backStep(\\'selectChannel\\', \\'selectTransport\\')\" class=\"btn btn-link\" lp-i18n=\"Back\"></div>' + '<button class=\"btn btn-primary\" type=\"submit\" lp-i18n=\"Next\"></button>' + '</div>' + '</form>' + '<div ng-show=\"!isCurrentStep(\\'selectTransport\\')\" class=\"step-overlay\"></div>' + '</div>');\n\n\t        return {\n\t            restrict: 'A',\n\t            template: $templateCache.get('lp-automations-select-transport.html')\n\t        };\n\t    };\n\n\t    /**\n\t     * STEP - 5.1: Directive to select EMAIL\n\t     */\n\t    // @ngInject\n\t    exports.selectAutomationTransportEmail = function ($templateCache) {\n\n\t        $templateCache.put('lp-automations-select-email.html', '<h5 lp-i18n=\"Enter recipient E-mail:\"></h5>' + '<div class=\"row\">' + '<div class=\"col-xs-12 col-sm-12 col-md-12\">' + '<input name=\"emailAddress\" required=\"required\" type=\"email\" class=\"form-control\" ng-model=\"action.location.emailAddress\" placeholder=\"{{\\'E-mail\\'|translate}}\" />' + '<div ng-show=\"step5Form.emailAddress.$error.required === true  && form5submitInvalid\" class=\"has-error\" lp-i18n=\"The field is required\"></div>' + '<div ng-show=\"step5Form.emailAddress.$error.email === true  && form5submitInvalid\" class=\"has-error\" lp-i18n=\"The email input is invalid\"></div>' + '</div>' + '</div>' + '<br />');\n\n\t        return {\n\t            restrict: 'AC',\n\t            template: $templateCache.get('lp-automations-select-email.html')\n\t        };\n\t    };\n\n\t    /**\n\t     * STEP - 5.2: Directive to select PHONE number\n\t     */\n\t    // @ngInject\n\t    exports.selectAutomationTransportPhone = function ($templateCache) {\n\n\t        $templateCache.put('lp-automations-select-phone.html', '<h5 lp-i18n=\"Enter recipient Phone number:\"></h5>' + '<div class=\"row\">' + '<div class=\"col-xs-12 col-sm-12 col-md-12\">' + '<input name=\"phoneNumber\" required=\"required\" type=\"text\" class=\"form-control\" ng-model=\"action.location.phoneNumber\" placeholder=\"{{\\'Phone number\\'|translate}}\" />' + '<div ng-show=\"step5Form.phoneNumber.$error.required === true && form5submitInvalid\" class=\"has-error\" lp-i18n=\"The field is required\"></div>' + '</div>' + '</div>' + '<br />');\n\n\t        return {\n\t            restrict: 'AC',\n\t            template: $templateCache.get('lp-automations-select-phone.html')\n\t        };\n\t    };\n\n\t    /**\n\t     * STEP - 6: Directive to SAVE changes\n\t     */\n\t    // @ngInject\n\t    exports.automationSave = function ($templateCache) {\n\n\t        $templateCache.put('lp-automations-save.html', '<div ng-show=\"isListedStep(selectStep, \\'saveAutomation\\')\" class=\"lp-automations-select-wrapper\">' + '<h5 lp-i18n=\"Enter a name for your automation:\"></h5>' + '<form ng-submit=\"saveAutomation(step5Form.$invalid)\" name=\"step6Form\" novalidate>' + '<div class=\"row\">' + '<div class=\"col-xs-12 col-sm-12\">' + '<input required=\"required\" type=\"text\" class=\"form-control\" ng-model=\"inputModel.automationName\" placeholder=\"{{\\'Name\\'|translate}}\" />' + '<div ng-show=\"step6ShowErrorMessage\" class=\"has-error\" lp-i18n=\"The field is empty or invalid.\"></div>' + '</div>' + '</div>' + '<br />' + '<div ng-show=\"isCurrentStep(\\'saveAutomation\\')\" class=\"text-right\">' + '<div ng-click=\"cancelAddingNewAutomation()\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></div>' + '<div ng-click=\"backStep(\\'selectTransport\\', \\'saveAutomation\\')\" class=\"btn btn-link\" lp-i18n=\"Back\"></div>' + '<button ng-class=\"{\\'disabled\\': !inputModel.automationName}\" ng-show=\"!currentAutomationObject.isNew\" class=\"btn btn-primary\" type=\"submit\" style=\"margin-right: 6px\" lp-i18n=\"Save Changes\"></button>' + '<button ng-class=\"{\\'disabled\\': !inputModel.automationName}\" ng-show=\"currentAutomationObject.isNew\" class=\"btn btn-default\" type=\"submit\" ng-click=\"(inputModel.enable = false)\" style=\"margin-right: 6px\" lp-i18n=\"Save\"></button>' + '<button ng-class=\"{\\'disabled\\': !inputModel.automationName}\" ng-show=\"currentAutomationObject.isNew\" class=\"btn btn-primary\" type=\"submit\" ng-click=\"(inputModel.enable = true)\" lp-i18n=\"Save and Enable\"></button>' + '</div>' + '</form>' + '</div>');\n\n\t        return {\n\t            restrict: 'A',\n\t            template: $templateCache.get('lp-automations-save.html')\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** scripts/main.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/_karma_webpack_//\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 0a36af825627ed79afb4\n **/","/**\n * @module widget-alert-messages\n * @version 1.0.0\n * @file ng-widget-sample description\n * @copyright Backbase Amsterdam\n * @requires module:lp/main\n * @requires module:lp/modules/core\n * @requires interact\n *\n * @example Require Widget\n * // add this in the index.html\n * window.requireWidget( __WIDGET__ ,'scripts/index');\n */\n\ndefine( function (require, exports, module) {\n\n    'use strict';\n\n    module.name = 'widget-automation-alerts';\n\n    var base = require('base');\n    var core = require('core');\n    var ui = require('ui');\n\n    var accounts = require('module-accounts');\n    var automation = require('module-automation');\n\n    var deps = [\n        core.name,\n        ui.name,\n        accounts.name,\n        automation.name\n    ];\n\n    // @ngInject\n    function run(lpWidget, lpAccounts, lpAutomation, lpCoreBus) {\n\n        lpAccounts.setConfig({\n            'accountsEndpoint': lpWidget.getPreference('accountsEndpoint')\n        });\n\n        lpAutomation.setConfig({\n            'automationsEndpoint': lpWidget.getPreference('automationsEndpoint'),\n            'automationEndpoint': lpWidget.getPreference('automationEndpoint'),\n            'automationsActivationEndpoint': lpWidget.getPreference('automationsActivationEndpoint'),\n            'automationsDeactivationEndpoint': lpWidget.getPreference('automationsDeactivationEndpoint'),\n            'recipesEndpoint': lpWidget.getPreference('recipesEndpoint'),\n            'locale': lpWidget.getPreference('locale'),\n            'title': lpWidget.getPreference('title')\n        });\n\n        lpCoreBus.publish('cxp.item.loaded', {id: lpWidget.model.name});\n    }\n\n    module.exports = base.createModule(module.name, deps)\n        .controller( require('./controllers') )\n        .directive( require('./directives') )\n        .run( run );\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/main.js\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"base\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"core\"\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ui\"\n ** module id = 5\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-accounts\"\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-automation\"\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * Controllers\n * @module controllers\n */\ndefine(function (require, exports) {\n\n    'use strict';\n\n    /**\n     * MainCtrl description.\n     */\n    // @ngInject\n    exports.MainCtrl = function($scope, $window, lpAccounts, lpAutomation, lpCoreUtils) {\n\n        var ctrl = this;\n        var initialModel = function() { return { filters: [], counterForSelectors: 0, counterForTriggers: 0, counterForActions: 0, channelSelected: []}; };\n\n        /**\n         * Go to step, defined with stepName\n         *\n         * @param stepName\n         */\n        ctrl.goTo = function(stepName) {\n            $scope.currentStep = stepName;\n            $scope.selectStep[$scope.currentStep] = 1;\n        };\n\n        /**\n         * Hiding a step or several steps (if stepName is a comma-separated list of step names)\n         *\n         * @param stepName\n         */\n        ctrl.hideStep = function(stepsToHide) {\n            if (typeof stepsToHide === 'string') {\n                stepsToHide.split(',').forEach(function(step) {\n                    $scope.selectStep[step] = false;\n                });\n            }\n        };\n\n        /**\n         * Get trigger name\n         *\n         * @param trigger\n         * @returns {AutomationModel.recipes.triggerDefinition.name|*|string}\n         */\n        $scope.getTriggerName = function(trigger) {\n            if (!trigger || !trigger.triggerDefinition) {\n                return false;\n            } else {\n                return trigger.triggerDefinition.name;\n            }\n        };\n\n        /**\n         * Helper function to know if the given number is the last step\n         * of filling the form\n         *\n         * @param stepsArr\n         * @param currentStep\n         * @returns {boolean}\n         */\n        $scope.isCurrentStep = function(currentStep) {\n            return $scope.currentStep === currentStep;\n        };\n\n        /**\n         * get the form back to specified step\n         *\n         * @param step\n         * @param stepsToHide\n         */\n        $scope.backStep = function(step, stepsToHide) {\n            if (step && stepsToHide) {\n\n                // exception for selectors step\n                if (step === 'chooseSelectors' && $scope.inputModel.counterForSelectors < 1) {\n                    step = 'selectTrigger';\n                }\n\n                ctrl.hideStep(stepsToHide);\n                ctrl.goTo(step);\n            }\n        };\n\n        /**\n         * Helper function to know if the given number is listed in the array\n         *\n         * @param stepsArr\n         * @param currentStep\n         * @returns {boolean}\n         */\n        $scope.isListedStep = function(stepsObj, currentStep) {\n            return stepsObj[currentStep] === 1;\n        };\n\n        // Pre-fill initial structure\n        var initialize = function() {\n            $scope.locale = lpAutomation.getAttribute('locale');\n            $scope.title = lpAutomation.getAttribute('title');\n            $scope.currencySymbol = $scope.locale === 'en-US' ? '$' : '€';\n\n            $scope.accountsModel = {};\n            $scope.automationsModel = {\n                automations: [],\n                recipes: [],\n                amountDirection: [\n                    {\n                        'name': 'Less than',\n                        'value': 'lt'\n                    },\n                    {\n                        'name': 'Less than or Equal',\n                        'value': 'lte'\n                    },\n                    {\n                        'name': 'Equal',\n                        'value': 'eq'\n                    },\n                    {\n                        'name': 'More than or Equal',\n                        'value': 'gte'\n                    },\n                    {\n                        'name': 'More than',\n                        'value': 'gt'\n                    }\n                ]\n            };\n\n            // Load accounts to be used in selectors\n            lpAccounts.load().then(function(accounts) {\n                $scope.accountsModel.accounts = accounts;\n            });\n\n            // Get stored automations list\n            lpAutomation.loadAutomations().then(function(automations) {\n                $scope.automationsModel.automations = automations;\n            });\n\n            // Get recipes list\n            lpAutomation.loadRecipes().then(function(recipes) {\n                $scope.automationsModel.recipes = recipes;\n            });\n\n            // pre-configs\n            $scope.implementedSelectors = ['accountId'];\n\n            // Steps list (named)\n            $scope.selectStep = {};\n            $scope.currentStep = '';\n\n            // Temporary model for input values\n            $scope.inputModel = initialModel();\n\n            // new automation container\n            $scope.currentAutomationObject = null;\n        };\n\n        // cancel the form\n        // -----------------------------------\n        // here we clear the all form fields\n        $scope.cancelAddingNewAutomation = function() {\n            $scope.selectStep = {};\n            $scope.currentStep = '';\n            $scope.counterForSelectors = 0;\n            $scope.accountsModel.selected = null;\n            $scope.inputModel = initialModel();\n            $scope.currentAutomationObject = null;\n            $scope.fillingAutomationProgress = false;\n            $scope.$broadcast('lpAutomationsShowList');\n        };\n\n        // Step 0: UPDATE automation\n        $scope.updateAutomation = function(automation, justPrefill) {\n            var inputModel = initialModel();\n            var currentAutomationObject = {\n                isNew: false,\n                id: automation.id,\n                parent: automation.parent\n            };\n\n            // PRE-FILL: get clear schemas\n            var myRecipe = lpCoreUtils.clone(lpCoreUtils.find($scope.automationsModel.recipes, function(recipe) {\n                return $scope.getTriggerName(recipe) === automation.trigger.id;\n            }));\n            var clearFilters = lpCoreUtils.clone(myRecipe.filters);\n\n            // PRE-FILL: trigger\n            currentAutomationObject.trigger = lpCoreUtils.assign(myRecipe, automation.trigger);\n            ctrl.updateBackup = {\n                selectedTriggerId: $scope.getTriggerName(currentAutomationObject.trigger),\n                automation: lpCoreUtils.clone(automation)\n            };\n\n            // PRE-FILL: selected account (if any)\n            $scope.accountsModel.selected = lpCoreUtils.find($scope.accountsModel.accounts, function(account) {\n                return account.id === automation.trigger.selectors.accountId;\n            });\n\n            // PRE-FILL: filters\n            lpCoreUtils.forEach(clearFilters, function(filter, index) {\n                inputModel.filters[index] = {};\n\n                lpCoreUtils.forEach(myRecipe.filters, function(f) {\n                    var key = lpCoreUtils.keys(f)[0];\n                    if (filter.name === key) {\n                        inputModel.filters[index][key] = {};\n                        inputModel.filters[index][key].value = key === 'paymentAmount' ? Number(f[key][0].value) : f[key][0].value;\n                        inputModel.filters[index][key].condition = lpCoreUtils.find($scope.automationsModel.amountDirection, function(dir) {\n                            return dir.value === f[key][0].condition;\n                        });\n                    }\n                });\n            });\n            currentAutomationObject.trigger.filters = clearFilters;\n\n            // PRE-FILL: actions\n            inputModel.channelSelected = [];\n            currentAutomationObject.data = { actions: [] };\n            lpCoreUtils.forEach(myRecipe.actions, function(action, index) {\n                var selected = lpCoreUtils.pluck(automation.actions, 'type');\n                if (lpCoreUtils.indexOf(selected, action.type) > -1) {\n                    inputModel.channelSelected[index] = true;\n                    currentAutomationObject.data.actions.push(lpCoreUtils.find(automation.actions, function(a) {\n                        return a.type === action.type;\n                    }));\n                } else {\n                    inputModel.channelSelected[index] = false;\n                }\n            });\n\n            // PRE-FILL: if active\n            inputModel.enable = automation.isActive;\n\n            // PRE-FILL: name\n            inputModel.automationName = automation.name;\n\n            if (justPrefill) {\n                // to display details we need just prefils\n                return {\n                    current: currentAutomationObject,\n                    model: inputModel\n                };\n            } else {\n                $scope.fillingAutomationProgress = true;\n                $scope.currentAutomationObject = currentAutomationObject;\n                $scope.inputModel = inputModel;\n                $scope.$broadcast('lpAutomationsHideList');\n                ctrl.goTo('selectTrigger');\n            }\n        };\n\n        // Step 0: create NEW automation\n        $scope.createAutomation = function() {\n            $scope.$broadcast('lpAutomationsHideList');\n            $scope.fillingAutomationProgress = true;\n            $scope.currentAutomationObject = {\n                isNew: true\n            };\n\n            ctrl.goTo('selectTrigger');\n        };\n\n        // Step 1: select trigger\n        $scope.selectTrigger = function(trigger, clickSelected) {\n            if (clickSelected) { return; }\n            var newTriggerSelected = !!trigger;\n            var automation = $scope.currentAutomationObject;\n            trigger = trigger || automation.trigger;\n\n            // if we select new trigger, we should clear filters, which are related to\n            // previous trigger and clear selectors counter\n            if (newTriggerSelected) {\n                $scope.inputModel.filters = [];\n                $scope.inputModel.counterForSelectors = 0;\n\n                // restore data if we selected 'ours' trigger again\n                if (!automation.isNew && ctrl.updateBackup.selectedTriggerId === $scope.getTriggerName(trigger)) {\n                    $scope.updateAutomation(ctrl.updateBackup.automation);\n                    return;\n                }\n            }\n\n            automation.trigger = lpAutomation.normalizeTrigger(trigger);\n            automation.data = automation.data || { actions: [] };\n            automation.parent = automation.parent || trigger.id;\n            $scope.inputModel.counterForTriggers = $scope.inputModel.counterForTriggers || 1;\n            $scope.inputModel.counterForSelectors = $scope.inputModel.counterForSelectors || 0;\n\n            // TRICK: check if we have selectors to be shown (decide to skip the 'selectors' step)\n            var listOfAllowedSelectors = lpCoreUtils.intersection(lpCoreUtils.pluck(automation.trigger.selectors, 'name'), $scope.implementedSelectors);\n            if (listOfAllowedSelectors.length > 0) {\n                ctrl.goTo('chooseSelectors');\n            } else {\n                ctrl.goTo('selectFilters');\n            }\n        };\n\n        // Step 2: leave Selectors\n        $scope.goToFilters = function() {\n\n            // Update: at least one selector chosen\n            if (!$scope.currentAutomationObject.isNew && $scope.accountsModel.selected) {\n                $scope.inputModel.counterForSelectors += 1;\n            }\n\n            ctrl.goTo('selectFilters');\n        };\n\n        // Step 2.1: select account\n        $scope.selectAccount = function() {\n            var automation = $scope.currentAutomationObject;\n            automation.data.accountId = $scope.accountsModel.selected.id;\n            $scope.inputModel.counterForSelectors += 1;\n        };\n\n        // Step 3: select filters\n        $scope.selectFilterValue = function(form) {\n            var automation = $scope.currentAutomationObject;\n\n            if (form.$invalid || automation === null) {\n                $scope.form3submitInvalid = true;\n                return;\n            } else {\n                $scope.form3submitInvalid = false;\n            }\n\n            automation.data.filters = $scope.inputModel.filters;\n\n            ctrl.goTo('selectChannel');\n        };\n\n        // Step 4: select channel\n        $scope.selectChannel = function(action) {\n            var automation = $scope.currentAutomationObject;\n            var actions = automation.data.actions;\n            var isAddedActionIndex = false;\n\n            actions.forEach(function(act, index) {\n                if (act.type === action.type) { isAddedActionIndex = index; }\n            });\n\n            // add selected action to list (if not added before)\n            if (isAddedActionIndex === false) {\n                automation.data.actions.push(action);\n            } else {\n                actions.splice(isAddedActionIndex, 1);\n            }\n        };\n\n        // Step 4: go to next step\n        $scope.goToTransport = function() {\n            var automation = $scope.currentAutomationObject;\n            var actions = automation.data.actions;\n\n            // clear values\n            if (automation.isNew) {\n                actions.forEach(function(action, index) {\n                    var key = lpCoreUtils.keys(action.location)[0];\n                    action.location[key] = '';\n                });\n            }\n\n            ctrl.goTo('selectTransport');\n        };\n\n        // Step 5: select e-mail or phone number (or another transport)\n        $scope.selectLocation = function(isInvalid) {\n            if (isInvalid) {\n                $scope.form5submitInvalid = true;\n                return;\n            } else {\n                $scope.form5submitInvalid = false;\n            }\n\n            ctrl.goTo('saveAutomation');\n        };\n\n        // Step 6: saving automation\n        $scope.saveAutomation = function(isInvalid) {\n            var automation = $scope.currentAutomationObject;\n\n            automation.data.enabled = $scope.inputModel.enable;\n            automation.data.name = $scope.inputModel.automationName;\n\n            if (automation.isNew) {\n                lpAutomation.create(automation).then(function(response) {\n\n                    // success adding: add to list\n                    if (response && response.data.id) {\n                        response.result.id = response.data.id;\n                        $scope.automationsModel.automations.unshift(response.result);\n                    }\n\n                    // empty current model\n                    automation = null;\n                });\n            } else {\n                lpAutomation.update(automation).then(function(result) {\n                    lpCoreUtils.forEach($scope.automationsModel.automations, function(auto, i) {\n                        if (auto.id === result.id) {\n                            $scope.automationsModel.automations[i] = result;\n                        }\n                    });\n                    automation = null;\n                });\n            }\n\n            $scope.cancelAddingNewAutomation();\n        };\n\n        // Delete Automation\n        $scope.deleteAutomation = function(id, index) {\n            lpAutomation.remove(id).then(function(response) {\n                $scope.automationsModel.automations.splice(index, 1);\n            });\n        };\n\n        // Change status of the automation\n        $scope.toggleAutomationStatus = function(automation) {\n            $scope.toggleAutomationStatusHideButton = true;\n            lpAutomation.toggleStatus(automation).then(function(response) {\n                automation.isActive = !automation.isActive;\n                $scope.toggleAutomationStatusHideButton = false;\n            });\n        };\n\n        // Compose automation details object\n        $scope.composeAutomationDetails = function(automation) {\n            var result = [];\n            var preFill = $scope.updateAutomation(automation, true);\n\n            // trigger name\n            result.push({\n                label: 'Trigger name',\n                value: preFill.current.trigger.name\n            });\n\n            // Selectors (account)\n            var accountId = preFill.current.trigger.selectors.accountId;\n            if (accountId && $scope.accountsModel.selected) {\n                result.push({\n                    label: 'Account selected',\n                    value: $scope.accountsModel.selected.alias + ' (' + $scope.accountsModel.selected.identifier + ')'\n                });\n            }\n\n            // Filters\n            var filtersLayout = preFill.current.trigger.filters;\n            var filtersData = preFill.model.filters;\n            filtersLayout.forEach(function(fl) {\n                var fName = fl.name;\n                filtersData.forEach(function(fd) {\n                    if (fd[fName]) {\n                        var cond = fd[fName].condition && accountId ? fd[fName].condition : '';\n                        var val = fd[fName].value ? fd[fName].value : '';\n\n                        if (val) {\n                            result.push({\n                                label: fl.label || 'Filter',\n                                value: (cond.name ? cond.name : cond) + ' ' + val\n                            });\n                        }\n                    }\n                });\n            });\n\n            // Actions\n            var actions = preFill.current.data.actions;\n            actions.forEach(function(a) {\n                result.push({\n                    label: 'Action ' + a.type,\n                    value: lpCoreUtils.values(a.location)[0]\n                });\n            });\n\n            return result;\n        };\n\n        initialize();\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/controllers.js\n **/","/**\n * Directives\n * @module directives\n */\ndefine(function (require, exports, module) {\n\n    'use strict';\n\n    /**\n     * Directive to show the 'Create New' button\n     */\n    // @ngInject\n    exports.lpAutomationsNewButton = function($templateCache) {\n\n        $templateCache.put('lp-automations-new-button.html',\n            '<div class=\"lp-automations-new-button-wrapper text-right\">' +\n                '<button class=\"btn btn-primary create-new-button\" ng-class=\"{\\'disabled ng-hide\\': fillingAutomationProgress, \\'disabled\\': !automationsModel.recipes.length}\" ng-click=\"createAutomation()\">' +\n                    '<div class=\"create-button-text-full-view\" lp-i18n=\"Create Alert\"></div>' +\n                    '<div class=\"create-button-text-mobile-view\"><span class=\"glyphicon glyphicon-plus\">&nbsp;</span></div>' +\n                '</button>' +\n            '</div>'\n        );\n\n        return {\n            restrict: 'A',\n            template: $templateCache.get('lp-automations-new-button.html')\n        };\n    };\n\n\n    /**\n     * Directive to show the list of saved automations\n     */\n    // @ngInject\n    exports.lpAutomationsList = function($templateCache, $modal) {\n\n        $templateCache.put('lp-automations-current-list.html',\n            '<div class=\"lp-automations-list-wrapper\" >' +\n                '<div class=\"lp-automations-list-hide-show\" ng-click=\"toggleListView()\">' +\n                    '<div class=\"main-item\" lp-i18n=\"Toggle list\" translate-values=\"{action: model.action}\"></div>' +\n                    '<div class=\"secondary-item glyphicon glyphicon-chevron-{{ model.direction }}\"></div>' +\n                '</div>' +\n                '<div ng-show=\"model.show\" ng-if=\"!automationsModel.automations.length\" class=\"no-automations-stored\">' +\n                    '<span lp-i18n=\"No Automations Stored Yet...\"></span><button ng-click=\"createAutomation()\" ng-class=\"{\\'disabled\\': fillingAutomationProgress, \\'disabled\\': !automationsModel.recipes.length}\" class=\"btn btn-link\" lp-i18n=\"Create one!\"></button>' +\n                '</div>' +\n                '<div ng-show=\"model.show\">' +\n                    '<div ng-repeat=\"automation in automationsModel.automations track by $index\">' +\n                        '<div class=\"row automation-row\">' +\n                            '<div class=\"col-xs-2 col-sm-2 col-md-2 cell switcher\">' +\n                                '<div lp-enable-disable-toggle=\"automation.isActive\" ng-click=\"toggleAutomationStatus(automation)\"></div>' +\n                            '</div>' +\n                            '<div class=\"col-xs-6 col-sm-6 col-md-6 cell\" ng-click=\"(showAutomationDetails = !showAutomationDetails)\">' +\n                                '<div class=\"view-details-link\" title=\"{{\\'Click to view details\\'|translate}}\">{{ automation.name }}</div>' +\n                            '</div>' +\n                            '<div class=\"col-xs-2 col-sm-2 col-md-2 cell text-right\">' +\n                                '<div ng-click=\"updateAutomation(automation)\" class=\"btn btn-info glyphicon glyphicon-pencil\">' +\n                                    '<div class=\"button-content\" lp-i18n=\"Update\"></div>' +\n                                '</div>' +\n                            '</div>' +\n                            '<div class=\"col-xs-2 col-sm-2 col-md-2 cell text-right\" ng-class=\"{\\'delete-cell\\': automation.deleteQuestionOn}\">' +\n                                '<div lp-confirm-delete=\"automation.deleteQuestionOn\" callback=\"deleteAutomation(automation.id, $index)\"></div>' +\n                            '</div>' +\n                            '<div ng-show=\"automation.deleteQuestionOn || toggleAutomationStatusHideButton\" class=\"step-overlay\"></div>' +\n                        '</div>' +\n                        '<div ng-show=\"showAutomationDetails\" automation-show-details=\"showAutomationDetails\" layout=\"composeAutomationDetails(automation)\"></div>' +\n                    '</div>' +\n                '</div>' +\n            '</div>'\n        );\n\n        return {\n            restrict: 'A',\n            template: $templateCache.get('lp-automations-current-list.html'),\n            link: function($scope) {\n                $scope.model = {};\n                $scope.model.action = 'hide';\n                $scope.model.direction = 'up';\n                $scope.model.show = true;\n\n                $scope.hideList = function() {\n                    $scope.model.action = 'show';\n                    $scope.model.direction = 'down';\n                    $scope.model.show = false;\n                };\n\n                $scope.showList = function() {\n                    $scope.model.action = 'hide';\n                    $scope.model.direction = 'up';\n                    $scope.model.show = true;\n                };\n\n                $scope.toggleListView = function() {\n                    if ($scope.model.action === 'hide') {\n                        $scope.hideList();\n                    } else {\n                        $scope.showList();\n                    }\n                };\n\n                $scope.$on('lpAutomationsShowList', $scope.showList);\n                $scope.$on('lpAutomationsHideList', $scope.hideList);\n            }\n        };\n    };\n\n    // @ngInject\n    exports.automationShowDetails = function($templateCache) {\n        $templateCache.put('automation-show-details.html',\n            '<div class=\"automation-show-details-wrapper\">' +\n                '<div class=\"row\">' +\n                    '<div ng-repeat=\"detail in details\" class=\"col-xs-12 col-sm-6 col-md-6 cell\">' +\n                        '<label>{{ detail.label }}:</label>' +\n                        '<div class=\"property-value\">{{ detail.value }}</div>' +\n                    '</div>' +\n                '</div>' +\n            '</div>'\n        );\n\n        return {\n            scope: {\n                trigger: '=automationShowDetails',\n                layout: '&',\n                showAutomationDetails: '='\n            },\n            restrict: 'AC',\n            template: $templateCache.get('automation-show-details.html'),\n            link: function($scope) {\n                $scope.$watch('trigger', function(value) {\n                    if (value) {\n                        $scope.details = $scope.layout();\n                    }\n                });\n            }\n        };\n    };\n\n    /**\n     * Confirm delete button (reusable)\n     *\n     */\n    // @ngInject\n    exports.lpConfirmDelete = function($templateCache) {\n        $templateCache.put('lp-confirm-delete.html',\n            '<div ng-show=\"!trigger\" title=\"Delete Automation\" ng-click=\"(trigger = true)\" class=\"btn btn-danger glyphicon glyphicon-remove\">' +\n                '<div class=\"button-content\" lp-i18n=\"Delete\"></div>' +\n            '</div>' +\n            '<div ng-hide=\"!trigger\" ng-class=\"{\\'animated bounceInRight yesNoSure\\': trigger}\">' +\n                '<div class=\"btn btn-link glyphicon glyphicon-chevron-left\" title=\"Cancel deleting\" ng-click=\"(trigger = false)\">' +\n                    '<div class=\"button-content\" lp-i18n=\"Cancel\"></div>' +\n                '</div>' +\n                '<div class=\"btn btn-danger yesNoSure glyphicon glyphicon-trash\" title=\"Really Delete\" ng-click=\"callback()\">' +\n                    '<div class=\"button-content\" lp-i18n=\"Delete!\"></div>' +\n                '</div>' +\n            '</div>'\n        );\n\n        return {\n            scope: {\n                trigger: '=lpConfirmDelete',\n                callback: '&'\n            },\n            restrict: 'AC',\n            template: $templateCache.get('lp-confirm-delete.html')\n        };\n    };\n\n    /**\n     * ------------------------------------------------\n     *   MAIN Directive to show the 'Create New' form\n     * ------------------------------------------------\n     */\n    // @ngInject\n    exports.lpCreateNewAutomation = function($templateCache) {\n\n        $templateCache.put('lp-automations-new-form.html',\n            '<div class=\"lp-automations-new-form-wrapper\">' +\n                '<div select-automation-trigger=\"\" class=\"form-step\"></div>' +\n                '<div select-automation-selectors=\"\" class=\"form-step\"></div>' +\n                '<div select-automation-filters=\"\" class=\"form-step\"></div>' +\n                '<div select-automation-channel=\"\" class=\"form-step\"></div>' +\n                '<div select-automation-transport=\"\" class=\"form-step\"></div>' +\n                '<div automation-save=\"\" class=\"form-step\"></div>' +\n            '</div>'\n        );\n\n        return {\n            restrict: 'A',\n            template: $templateCache.get('lp-automations-new-form.html')\n        };\n    };\n\n    /**\n     * STEP - 1: Directive to select TRIGGER\n     */\n    // @ngInject\n    exports.selectAutomationTrigger = function($templateCache) {\n\n        $templateCache.put('lp-automations-select-trigger.html',\n            '<div ng-show=\"isListedStep(selectStep, \\'selectTrigger\\')\" class=\"lp-automations-select-wrapper\">' +\n                '<h5 lp-i18n=\"Choose a trigger for the automation:\"></h5>' +\n                '<ul class=\"row\">' +\n                    '<li ng-repeat=\"recipe in automationsModel.recipes track by $index\" class=\"col-xs-12 col-sm-4 col-md-3\">' +\n                        '<div ng-class=\"{\\'selected\\': getTriggerName(currentAutomationObject.trigger) === getTriggerName(recipe)}\" class=\"btn btn-default btn-block btn-automation\" ng-click=\"selectTrigger(recipe, getTriggerName(currentAutomationObject.trigger) === getTriggerName(recipe))\">' +\n                            '{{recipe.name}}' +\n                        '</div>' +\n                    '</li>' +\n                '</ul>' +\n                '<div ng-show=\"isCurrentStep(\\'selectTrigger\\')\" class=\"text-right\">' +\n                    '<button ng-click=\"cancelAddingNewAutomation()\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></button>' +\n                    '<button class=\"btn btn-primary text-right go-next\" ng-click=\"selectTrigger()\" lp-i18n=\"Next\"></button>' +\n                '</div>' +\n                '<div ng-show=\"!isCurrentStep(\\'selectTrigger\\')\" class=\"step-overlay\"></div>' +\n            '</div>'\n        );\n\n        return {\n            restrict: 'A',\n            template: $templateCache.get('lp-automations-select-trigger.html')\n        };\n    };\n\n    /**\n     * STEP - 2: Directive to choose SELECTORS\n     */\n    // @ngInject\n    exports.selectAutomationSelectors = function($templateCache) {\n\n        $templateCache.put('lp-automations-choose-selector.html',\n            '<div ng-show=\"isListedStep(selectStep, \\'chooseSelectors\\')\" class=\"lp-automations-select-wrapper\">' +\n                '<div ng-repeat=\"selector in currentAutomationObject.trigger.selectors\">' +\n                    '<div ng-if=\"selector.name === \\'accountId\\'\">' +\n                        '<div class=\"select-automation-selectors-account\"></div>' +\n                    '</div>' +\n                '</div>' +\n                '<div ng-show=\"isCurrentStep(\\'chooseSelectors\\')\" class=\"text-right\"><br />' +\n                    '<button ng-click=\"cancelAddingNewAutomation()\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></button>' +\n                    '<button ng-click=\"backStep(\\'selectTrigger\\', \\'chooseSelectors\\')\" class=\"btn btn-link\" lp-i18n=\"Back\"></button>' +\n                    '<button ng-class=\"{\\'disabled\\': inputModel.counterForSelectors === 0 && currentAutomationObject.isNew && !accountsModel.selected}\" class=\"btn btn-primary text-right go-next\" ng-click=\"goToFilters()\" lp-i18n=\"Next\"></button>' +\n                '</div>' +\n                '<div ng-show=\"!isCurrentStep(\\'chooseSelectors\\')\" class=\"step-overlay\"></div>' +\n            '</div>'\n        );\n\n        return {\n            restrict: 'A',\n            template: $templateCache.get('lp-automations-choose-selector.html')\n        };\n    };\n\n\n    /**\n     * STEP - 2.1: Directive to choose SELECTORS:ACCOUNT\n     */\n    // @ngInject\n    exports.selectAutomationSelectorsAccount = function($templateCache) {\n\n        $templateCache.put('lp-automations-choose-selector-account.html',\n            '<h5 lp-i18n=\"Select an account:\"></h5>' +\n            '<div class=\"row\">' +\n            '<div class=\"col-xs-12 col-sm-8\">' +\n                '<div lp-accounts-select=\"lp-accounts-select\" designated-class=\"lp-normal-account-select-size\" ng-model=\"accountsModel.selected\" lp-accounts=\"accountsModel.accounts\" name=\"accountId\" class=\"lp-accounts-header\" ng-change=\"selectAccount()\"></div>' +\n            '</div>'\n        );\n\n        return {\n            restrict: 'AC',\n            template: $templateCache.get('lp-automations-choose-selector-account.html')\n        };\n    };\n\n\n    /**\n     * STEP - 3: Directive to fill in FILTERS\n     */\n    // @ngInject\n    exports.selectAutomationFilters = function($templateCache) {\n\n        $templateCache.put('lp-automations-select-rule.html',\n            '<div ng-show=\"isListedStep(selectStep, \\'selectFilters\\')\" class=\"lp-automations-select-wrapper\">' +\n                '<form ng-submit=\"selectFilterValue(step3Form)\" name=\"step3Form\" novalidate>' +\n                    '<div ng-repeat=\"filter in currentAutomationObject.trigger.filters\">' +\n                        '<div>' +\n                            '<h5>{{filter.label}}:</h5>' +\n                            '<div class=\"row\" style=\"margin-bottom: 10px\">' +\n                                '<div ng-if=\"filter.type === \\'amount\\'\">' +\n                                    '<div class=\"select-automation-filter-amount\"></div>' +\n                                '</div>' +\n                                '<div ng-if=\"filter.type === \\'string\\'\">' +\n                                    '<div class=\"select-automation-filter-string\"></div>' +\n                                '</div>' +\n                            '</div>' +\n                        '</div>' +\n\n                    '</div>' +\n                    '<div ng-show=\"isCurrentStep(\\'selectFilters\\')\" class=\"text-right\">' +\n                        '<div ng-click=\"cancelAddingNewAutomation()\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></div>' +\n                        '<div ng-click=\"backStep(\\'chooseSelectors\\', \\'selectFilters\\')\" class=\"btn btn-link\" lp-i18n=\"Back\"></div>' +\n                        '<button class=\"btn btn-primary text-right\" type=\"submit\" lp-i18n=\"Next\"></button>' +\n                    '</div>' +\n                '</form>' +\n                '<div ng-show=\"!isCurrentStep(\\'selectFilters\\')\" class=\"step-overlay\"></div>' +\n            '</div>'\n        );\n\n        return {\n            restrict: 'A',\n            template: $templateCache.get('lp-automations-select-rule.html')\n        };\n    };\n\n    /**\n     * STEP - 3.1: Directive to select FILTER:AMOUNT\n     */\n    // @ngInject\n    exports.selectAutomationFilterAmount = function($templateCache) {\n\n        $templateCache.put('lp-automations-filter-amount.html',\n            '<div class=\"col-xs-12 col-md-4\">' +\n                '<div dropdown-select=\"dropdown-select\" empty-placeholder-text=\"More then\" ng-model=\"inputModel.filters[$index][filter.name].condition\" options=\"val as val.name for val in automationsModel.amountDirection\"></div>' +\n            '</div>' +\n            '<div class=\"col-xs-12 col-md-8\">' +\n                '<div class=\"row\">' +\n                    '<div class=\"col-xs-6 col-sm-6 col-md-6\">' +\n                        '<input name=\"paymentAmount\" required=\"required\" type=\"number\" min=\"1\" ng-model=\"inputModel.filters[$index][filter.name].value\" class=\"form-control\" placeholder=\"{{filter.placeholder}}\" />' +\n                    '</div>' +\n                    '<div class=\"col-xs-6 col-sm-6 col-md-6 currency-filter\">' +\n                        '<input class=\"form-control\" placeholder=\"{{\\'Formatted amount\\'|translate}}\" disabled value=\"{{inputModel.filters[$index][filter.name].value | currency: currencySymbol || \\'€\\'}}\" />' +\n                    '</div>' +\n                '</div>' +\n                '<div ng-show=\"step3Form.paymentAmount.$error.required === true && form3submitInvalid\" class=\"has-error\" lp-i18n=\"The field is required\"></div>' +\n                '<div ng-show=\"step3Form.paymentAmount.$error.number === true && form3submitInvalid\" class=\"has-error\" lp-i18n=\"Follow the currency format\"></div>' +\n                '<div ng-show=\"step3Form.paymentAmount.$error.min === true && form3submitInvalid\" class=\"has-error\" lp-i18n=\"Only positive numbers allowed\"></div>' +\n            '</div>'\n        );\n\n        return {\n            restrict: 'AC',\n            template: $templateCache.get('lp-automations-filter-amount.html')\n        };\n    };\n\n    /**\n     * STEP - 3.2: Directive to select FILTER:STRING\n     */\n        // @ngInject\n    exports.selectAutomationFilterString = function($templateCache) {\n\n        $templateCache.put('lp-automations-filter-string.html',\n            '<div class=\"col-xs-12 col-sm-12 col-md-12\">' +\n                '<input name=\"text\" required=\"required\" type=\"text\" ng-model=\"inputModel.filters[$index][filter.name].value\" class=\"form-control\" placeholder=\"{{filter.placeholder}}\" />' +\n                '<div ng-show=\"step3ShowErrorMessage\" class=\"has-error\" lp-i18n=\"The field is required\"></div>' +\n            '<div ng-show=\"step3Form.text.$error.required === true && form3submitInvalid\" class=\"has-error\" lp-i18n=\"The field is required\"></div>' +\n            '</div>'\n        );\n\n        return {\n            restrict: 'AC',\n            template: $templateCache.get('lp-automations-filter-string.html')\n        };\n    };\n\n    /**\n     * STEP - 4: Directive to select CHANNEL\n     */\n    // @ngInject\n    exports.selectAutomationChannel = function($templateCache) {\n\n        $templateCache.put('lp-automations-select-channel.html',\n            '<div ng-show=\"isListedStep(selectStep, \\'selectChannel\\')\" class=\"lp-automations-select-wrapper\">' +\n                '<h5 lp-i18n=\"Choose an action for the trigger:\"></h5>' +\n                '<ul class=\"row\">' +\n                    '<li ng-click=\"markChannelSelected($index)\" ng-repeat=\"action in currentAutomationObject.trigger.actions track by $index\" class=\"col-xs-12 col-sm-4 col-md-3\">' +\n                        '<div ng-class=\"{\\'selected\\': inputModel.channelSelected[$index]}\" class=\"btn btn-default btn-block btn-automation\" ng-click=\"selectChannel(action)\">{{action.type}}</div>' +\n                    '</li>' +\n                '</ul>' +\n                '<div ng-show=\"isCurrentStep(\\'selectChannel\\')\" class=\"text-right\">' +\n                    '<button ng-click=\"cancelAddingNewAutomation()\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></button>' +\n                    '<button ng-click=\"backStep(\\'selectFilters\\', \\'selectChannel\\')\" class=\"btn btn-link\" lp-i18n=\"Back\"></button>' +\n                    '<button ng-class=\"{\\'disabled\\': currentAutomationObject.data.actions.length < 1}\" class=\"btn btn-primary\" ng-click=\"goToTransport()\" lp-i18n=\"Next\"></button>' +\n                '</div>' +\n                '<div ng-show=\"!isCurrentStep(\\'selectChannel\\')\" class=\"step-overlay\"></div>' +\n            '</div>'\n        );\n\n        return {\n            restrict: 'A',\n            template: $templateCache.get('lp-automations-select-channel.html'),\n            link: function($scope) {\n                $scope.markChannelSelected = function(index) {\n                    if ($scope.inputModel.channelSelected[index]) {\n                        $scope.inputModel.channelSelected[index] = false;\n                    } else {\n                        $scope.inputModel.channelSelected[index] = true;\n                    }\n                };\n            }\n        };\n    };\n\n    /**\n     * STEP - 5: Directive to select TRANSPORT\n     */\n        // @ngInject\n    exports.selectAutomationTransport = function($templateCache) {\n\n        $templateCache.put('lp-automations-select-transport.html',\n            '<div ng-show=\"isListedStep(selectStep, \\'selectTransport\\')\" class=\"lp-automations-select-wrapper\">' +\n                '<form ng-submit=\"selectLocation(step5Form.$invalid)\" name=\"step5Form\" novalidate>' +\n                    '<div ng-repeat=\"action in currentAutomationObject.data.actions\">' +\n                        '<div ng-if=\"action.type === \\'email\\'\">' +\n                            '<div class=\"select-automation-transport-email\"></div>' +\n                        '</div>' +\n                        '<div ng-if=\"action.type === \\'sms\\'\">' +\n                            '<div class=\"select-automation-transport-phone\"></div>' +\n                        '</div>' +\n                    '</div>' +\n                    '<div ng-show=\"isCurrentStep(\\'selectTransport\\')\" class=\"text-right\">' +\n                        '<div ng-click=\"cancelAddingNewAutomation()\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></div>' +\n                        '<div ng-click=\"backStep(\\'selectChannel\\', \\'selectTransport\\')\" class=\"btn btn-link\" lp-i18n=\"Back\"></div>' +\n                        '<button class=\"btn btn-primary\" type=\"submit\" lp-i18n=\"Next\"></button>' +\n                    '</div>' +\n                '</form>' +\n                '<div ng-show=\"!isCurrentStep(\\'selectTransport\\')\" class=\"step-overlay\"></div>' +\n            '</div>'\n        );\n\n        return {\n            restrict: 'A',\n            template: $templateCache.get('lp-automations-select-transport.html')\n        };\n    };\n\n    /**\n     * STEP - 5.1: Directive to select EMAIL\n     */\n    // @ngInject\n    exports.selectAutomationTransportEmail = function($templateCache) {\n\n        $templateCache.put('lp-automations-select-email.html',\n            '<h5 lp-i18n=\"Enter recipient E-mail:\"></h5>' +\n            '<div class=\"row\">' +\n                '<div class=\"col-xs-12 col-sm-12 col-md-12\">' +\n                    '<input name=\"emailAddress\" required=\"required\" type=\"email\" class=\"form-control\" ng-model=\"action.location.emailAddress\" placeholder=\"{{\\'E-mail\\'|translate}}\" />' +\n                    '<div ng-show=\"step5Form.emailAddress.$error.required === true  && form5submitInvalid\" class=\"has-error\" lp-i18n=\"The field is required\"></div>' +\n                    '<div ng-show=\"step5Form.emailAddress.$error.email === true  && form5submitInvalid\" class=\"has-error\" lp-i18n=\"The email input is invalid\"></div>' +\n                '</div>' +\n            '</div>' +\n            '<br />'\n        );\n\n        return {\n            restrict: 'AC',\n            template: $templateCache.get('lp-automations-select-email.html')\n        };\n    };\n\n    /**\n     * STEP - 5.2: Directive to select PHONE number\n     */\n    // @ngInject\n    exports.selectAutomationTransportPhone = function($templateCache) {\n\n        $templateCache.put('lp-automations-select-phone.html',\n            '<h5 lp-i18n=\"Enter recipient Phone number:\"></h5>' +\n            '<div class=\"row\">' +\n                '<div class=\"col-xs-12 col-sm-12 col-md-12\">' +\n                    '<input name=\"phoneNumber\" required=\"required\" type=\"text\" class=\"form-control\" ng-model=\"action.location.phoneNumber\" placeholder=\"{{\\'Phone number\\'|translate}}\" />' +\n                    '<div ng-show=\"step5Form.phoneNumber.$error.required === true && form5submitInvalid\" class=\"has-error\" lp-i18n=\"The field is required\"></div>' +\n                '</div>' +\n            '</div>' +\n            '<br />'\n        );\n\n        return {\n            restrict: 'AC',\n            template: $templateCache.get('lp-automations-select-phone.html')\n        };\n    };\n\n    /**\n     * STEP - 6: Directive to SAVE changes\n     */\n    // @ngInject\n    exports.automationSave = function($templateCache) {\n\n        $templateCache.put('lp-automations-save.html',\n            '<div ng-show=\"isListedStep(selectStep, \\'saveAutomation\\')\" class=\"lp-automations-select-wrapper\">' +\n                '<h5 lp-i18n=\"Enter a name for your automation:\"></h5>' +\n                '<form ng-submit=\"saveAutomation(step5Form.$invalid)\" name=\"step6Form\" novalidate>' +\n                    '<div class=\"row\">' +\n                        '<div class=\"col-xs-12 col-sm-12\">' +\n                            '<input required=\"required\" type=\"text\" class=\"form-control\" ng-model=\"inputModel.automationName\" placeholder=\"{{\\'Name\\'|translate}}\" />' +\n                            '<div ng-show=\"step6ShowErrorMessage\" class=\"has-error\" lp-i18n=\"The field is empty or invalid.\"></div>' +\n                        '</div>' +\n                    '</div>' +\n                    '<br />' +\n                    '<div ng-show=\"isCurrentStep(\\'saveAutomation\\')\" class=\"text-right\">' +\n                        '<div ng-click=\"cancelAddingNewAutomation()\" class=\"btn btn-link\" lp-i18n=\"Cancel\"></div>' +\n                        '<div ng-click=\"backStep(\\'selectTransport\\', \\'saveAutomation\\')\" class=\"btn btn-link\" lp-i18n=\"Back\"></div>' +\n                        '<button ng-class=\"{\\'disabled\\': !inputModel.automationName}\" ng-show=\"!currentAutomationObject.isNew\" class=\"btn btn-primary\" type=\"submit\" style=\"margin-right: 6px\" lp-i18n=\"Save Changes\"></button>' +\n                        '<button ng-class=\"{\\'disabled\\': !inputModel.automationName}\" ng-show=\"currentAutomationObject.isNew\" class=\"btn btn-default\" type=\"submit\" ng-click=\"(inputModel.enable = false)\" style=\"margin-right: 6px\" lp-i18n=\"Save\"></button>' +\n                        '<button ng-class=\"{\\'disabled\\': !inputModel.automationName}\" ng-show=\"currentAutomationObject.isNew\" class=\"btn btn-primary\" type=\"submit\" ng-click=\"(inputModel.enable = true)\" lp-i18n=\"Save and Enable\"></button>' +\n                    '</div>' +\n                '</form>' +\n            '</div>'\n        );\n\n        return {\n            restrict: 'A',\n            template: $templateCache.get('lp-automations-save.html')\n        };\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/directives.js\n **/"],"sourceRoot":""}