{"version":3,"sources":["webpack:///widget-secure-messaging/webpack/universalModuleDefinition","webpack:///widget-secure-messaging/scripts/main.js","webpack:///widget-secure-messaging/webpack/bootstrap 32703d934d1b137f5b6d","webpack:///widget-secure-messaging/./scripts/main.js","webpack:///widget-secure-messaging/(webpack)/buildin/module.js","webpack:///widget-secure-messaging/./scripts/factories.js","webpack:///widget-secure-messaging/./scripts/services.js","webpack:///widget-secure-messaging/./scripts/topics-service.js","webpack:///widget-secure-messaging/./scripts/defaultTopics.js","webpack:///widget-secure-messaging/./scripts/controllers.js","webpack:///widget-secure-messaging/./scripts/directives.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_2__","__WEBPACK_EXTERNAL_MODULE_3__","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_5__","__WEBPACK_EXTERNAL_MODULE_12__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","run","lpWidget","lpCoreBus","model","publish","name","base","ui","core","users","deps","$inject","createModule","service","controller","directive","undefined","webpackPolyfill","deprecate","paths","children","SharedData","lpCoreUtils","util","resolveDisplayName","x500value","regExp","test","match","exec","findIndexById","list","index","forEach","item","indexOf","add","unshift","remove","splice","isInboxEmpty","threads","unread","length","read","draftLetters","archived","active","addToList","removeFromList","selectedThread","editLetter","alerts","loading","editLetterInd","Thread","$resource","endpoint","getResolvedPreference","queryActive","method","params","isArray","queryArchived","status","querySent","messages","threadId","itemType","letters","archive","action","Message","markAsRead","itemId","Letter","lpPortal","query","save","letterId","send","respond","create","generateUUID","sender","userId","AlertsManager","$timeout","ALERT_TIMEOUT","push","message","type","timeout","self","close","msg","Topics","loadDefault","availableRecipients","fetch","then","response","data","topics","topic","recipient","question","preQuestion","category","$","window","jQuery","MessageController","$scope","$q","lpDefaultProfileImage","templatesDir","getWidgetBaseUrl","shared","categories","getPreference","split","MSG_AUTOSAVE_TIMEOUT","tabs","inbox","sent","modalShown","loadThreads","showLoadingIndicator","tmpUnread","tmpRead","all","senderName","otherUser","subject","isUndefined","logoPath","containsUnread","concat","$promise","each","drafts","timestamp","updatedDate","result","error","selectThreadAction","thread","returnObj","defer","closeContentAction","resolve","closeModal","createEditLetterAction","extend","isThreadLoading","value","show","$markAsRead","lastMessageIdInThread","draft","scrollTo","deleteDraft","$remove","letter","showSideContent","tabSelected","$on","CreateLetterController","$rootScope","alertsManager","resolvePortalPlaceholders","get","addresses","address","subjects","$apply","prepareMessage","selectedQuestion","recipients","Date","element","$save","success","$send","sentThread","$broadcast","newMessageForm","$setPristine","submitted","Hammer","closeMessageIfSelected","scope","quickDeleteThread","$parent","$emit","messageList","restrict","title","items","replace","templateUrl","link","elem","attrs","decodePhotoUrl","photoUrl","decodeURIComponent","showList","expandView","toggleVisibility","picture","url","select","event","stopPropagation","expanded","expand","selectedItem","quickReply","promise","quickDelete","quickArchive","$archive","messageContent","replySaveInProgressInd","replySaveTimeoutId","openReplyAction","toggleMessageVisibility","isLastInThread","setTimeout","focus","on","clearTimeout","saveReplyAction","cancelReplyAction","clearReplyAction","replyMessageForm","$respond","sendReplyAction","vSuccess","swipe","hammer","ev","toggleClass"],"mappings":"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","file":"scripts/main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"ui\"), require(\"core\"), require(\"module-users\"), require(\"hammerjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"ui\", \"core\", \"module-users\", \"hammerjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-secure-messaging\"] = factory(require(\"base\"), require(\"ui\"), require(\"core\"), require(\"module-users\"), require(\"hammerjs\"));\n\telse\n\t\troot[\"widget-secure-messaging\"] = factory(root[\"base\"], root[\"ui\"], root[\"core\"], root[\"module-users\"], root[\"hammerjs\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_12__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"ui\"), require(\"core\"), require(\"module-users\"), require(\"hammerjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"ui\", \"core\", \"module-users\", \"hammerjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-secure-messaging\"] = factory(require(\"base\"), require(\"ui\"), require(\"core\"), require(\"module-users\"), require(\"hammerjs\"));\n\telse\n\t\troot[\"widget-secure-messaging\"] = factory(root[\"base\"], root[\"ui\"], root[\"core\"], root[\"module-users\"], root[\"hammerjs\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_12__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require, exports, module) {\n\t    'use strict';\n\n\t    module.name = 'secure-messaging';\n\n\t    var base = __webpack_require__(2);\n\t    var ui = __webpack_require__(3);\n\t    var core = __webpack_require__(4);\n\n\t    var users = __webpack_require__(5);\n\n\t    var deps = [\n\t        core.name,\n\t        ui.name,\n\t        users.name\n\t    ];\n\n\t    // @ngInject\n\t   function run(lpWidget, lpCoreBus) {\n\t        if(lpWidget && lpWidget.model) {\n\t            lpCoreBus.publish('cxp.item.loaded', {\n\t                id: lpWidget.model.name\n\t            });\n\t        }\n\t    }\n\t    run.$inject = [\"lpWidget\", \"lpCoreBus\"];\n\n\t    module.exports = base.createModule(module.name, deps)\n\t        .factory(__webpack_require__(6))\n\t        .service(__webpack_require__(7))\n\t        .service(__webpack_require__(8))\n\t        .controller(__webpack_require__(10))\n\t        .directive(__webpack_require__(11))\n\t        .run( run );\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Factories\n\t * @module factories\n\t */\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require, exports) {\n\t    'use strict';\n\n\t    /* Data shared between controllers */\n\n\t    // @ngInject\n\t    exports.SharedData = function(lpCoreUtils) {\n\t        var util = lpCoreUtils;\n\t        // Parses DN (Distinguished Name) value and returns CN (Common Name) value\n\t        var resolveDisplayName = function(x500value) {\n\t            var regExp = /CN=([^,]+)/i;\n\t            if (regExp.test(x500value)) {\n\t                var match = regExp.exec(x500value);\n\t                return match[1];\n\t            } else {\n\t                return x500value;\n\t            }\n\t        };\n\n\t        var findIndexById = function(list, id) {\n\t            var index = -1;\n\t            util.forEach(list, function(item) {\n\t                if (item.id === id) {\n\t                    index = list.indexOf(item);\n\t                    return index;\n\t                }\n\t            });\n\t            return index;\n\t        };\n\n\t        var add = function(list, item) {\n\t            var index = findIndexById(list, item.id); // since item can be updated, and changed\n\t            if (index !== -1) {\n\t                list[index] = item; // if found, update\n\t            } else {\n\t                list.unshift(item); // if not found, add\n\t            }\n\t        };\n\n\t        var remove = function(list, item) {\n\t            var index = findIndexById(list, item.id);\n\t            if (index !== -1) { // letter found\n\t                list.splice(index, 1);\n\t            }\n\t        };\n\n\t        /* Indicator if inbox contains at least a single item */\n\t        var isInboxEmpty = function() {\n\t            return this.threads.unread.length === 0 &&\n\t                this.threads.read.length === 0 &&\n\t                this.draftLetters.length === 0 &&\n\t                this.threads.archived.length === 0;\n\t        };\n\n\t        return {\n\t            // Thread containers\n\t            threads: {unread: [], read: [], archived: [], active: []},\n\t            draftLetters: [],\n\t            addToList: add,\n\t            removeFromList: remove,\n\t            // Read/Create message data\n\t            selectedThread: null,\n\t            editLetter: null,\n\t            // Alerts\n\t            alerts: [],\n\t            // Flags\n\t            loading: false,\n\t            editLetterInd: false,\n\t            // Helpers (might move to separate service?)\n\t            resolveDisplayName: resolveDisplayName,\n\t            isInboxEmpty: isInboxEmpty\n\t        };\n\t    };\n\t    exports.SharedData.$inject = [\"lpCoreUtils\"];\n\n\t    /* Thread - Message container of sent items */\n\t    // @ngInject\n\t    exports.Thread = function($resource, lpWidget) {\n\t        var endpoint = lpWidget.getResolvedPreference('threadSrc');\n\t        return $resource(endpoint, {}, {\n\t                    queryActive: {method: 'GET', params: {}, isArray: true},\n\t                    queryArchived: {method: 'GET', params: {status: 'archived'}, isArray: true},\n\t                    querySent: {method: 'GET', params: {status: 'sent'}, isArray: true},\n\t                    messages: {method: 'GET', params: {threadId: '@id', itemType: 'messages'}, isArray: true},\n\t                    letters: {method: 'GET', params: {threadId: '@id', itemType: 'letters'}, isArray: true},\n\t                    remove: {method: 'DELETE', params: {threadId: '@id'}},\n\t                    archive: {method: 'POST', params: {threadId: '@id', action: 'archive_thread_request'}}\n\t        });\n\t    };\n\t    exports.Thread.$inject = [\"$resource\", \"lpWidget\"];\n\n\t    /* Message - a sent item in a thread */\n\t    // @ngInject\n\t    exports.Message = function($resource, lpWidget) {\n\t        var endpoint = lpWidget.getResolvedPreference('threadSrc');\n\t        return $resource(endpoint, {}, {\n\t            markAsRead: {method: 'POST', params: {threadId: '@threadId', itemType: 'messages', itemId: '@id', action: 'read_message_request'}}\n\t        });\n\t    };\n\t    exports.Message.$inject = [\"$resource\", \"lpWidget\"];\n\n\t    /* Letter - a newly created or unsent item */\n\t    // @ngInject\n\t    exports.Letter = function($resource, lpWidget, lpPortal, lpCoreUtils) {\n\t        var endpoint = lpWidget.getResolvedPreference('letterSrc');\n\t        var Letter = $resource(endpoint, {}, {\n\t                query: {method: 'GET', params: {action: 'drafts'}, isArray: true},\n\t                save: {method: 'PUT', params: {action: 'save', letterId: '@id'}},\n\t                send: {method: 'POST', params: {action: 'send', letterId: '@id'}},\n\t                remove: {method: 'DELETE', params: {action: 'delete', letterId: '@id'}},\n\t                respond: {method: 'PUT', params: {action: 'response', threadId: '@threadId', letterId: '@id'}}\n\t        });\n\t        Letter.create = function() {\n\t            return new Letter({\n\t                id: lpCoreUtils.generateUUID(),\n\t                sender: lpPortal.userId\n\t            });\n\t        };\n\t        return Letter;\n\t    };\n\t    exports.Letter.$inject = [\"$resource\", \"lpWidget\", \"lpPortal\", \"lpCoreUtils\"];\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Services\n\t * @module services\n\t */\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require, exports) {\n\n\t    'use strict';\n\n\t    /* Responsible for managing alert messages */\n\t    // @ngInject\n\t    exports.AlertsManager = function($timeout, $resource) {\n\t        var ALERT_TIMEOUT = 3000; // Time in which message will auto-close if timeout = true\n\t        var alerts = [];\n\t        this.list = function() {\n\t            return alerts;\n\t        };\n\t        this.push = function(message, type, timeout) {\n\t            var self = this;\n\t            self.close(); // support only 1 alert for now\n\t            alerts.push({\n\t                type: type || 'danger',\n\t                msg: message\n\t            });\n\t            if (timeout !== false) {\n\t                $timeout(function() { self.close(); }, ALERT_TIMEOUT);\n\t            }\n\t        };\n\t        this.close = function() {\n\t            alerts = [];\n\t        };\n\t    };\n\t    exports.AlertsManager.$inject = [\"$timeout\", \"$resource\"];\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Topics Service\n\t * @module topics-service\n\t */\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require, exports) {\n\t    'use strict';\n\t    var base = __webpack_require__(2);\n\n\t    /* Provides the list of message topics */\n\t    // @ngInject\n\t    exports.Topics = function() {\n\n\t        return {\n\t           loadDefault: function(availableRecipients) {\n\t                // Real call NYI implemented in demo service.\n\t                return base.fetch('real/api/to/demo-service').then(function(response) {\n\t                        return response.data.topics;\n\t                }, function handleError() {\n\t                    var topics = __webpack_require__(9);\n\n\t                    // Append recipient address;\n\t                    topics.forEach(function(topic){\n\t                        topic.recipient = availableRecipients[topic.recipient];\n\t                    });\n\n\t                    return topics;\n\t                });\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t    'use strict';\n\n\t    return [\n\t        {\n\t            question: 'I have a question about Online Banking',\n\t            preQuestion: 'Online Banking Assistance',\n\t            recipient: 0,\n\t            category: 'support'\n\t        },\n\t        {\n\t            question: 'I have a question about Mobile Banking',\n\t            preQuestion: 'Mobile Banking Assistance',\n\t            recipient: 1,\n\t            category: 'mobile'\n\t        },\n\t        {\n\t            question: 'I have a question about Bill Pay',\n\t            preQuestion: 'Bill Pay Assistance',\n\t            recipient: 0,\n\t            category: 'offer'\n\t        },\n\t        {\n\t            question: 'I have a question about Accounts or Payments',\n\t            preQuestion: 'Account or Payment Inquiry',\n\t            recipient: 0,\n\t            category: 'business'\n\t        },\n\t        {\n\t            question: 'I have a question about Fee or Interest Charges',\n\t            preQuestion: 'Fee or Interest Charges',\n\t            recipient: 1,\n\t            category: 'mobile'\n\t        },\n\t        {\n\t            question: 'I have a question about Loans',\n\t            preQuestion: 'Loan Inquiry',\n\t            recipient: 0,\n\t            category: 'consultancy'\n\t        },\n\t        {\n\t            question: 'I have a question about Taxes',\n\t            preQuestion: 'Tax Information',\n\t            recipient: 1,\n\t            category: 'support'\n\t        },\n\t        {\n\t            question: 'I have a Transaction Dispute',\n\t            preQuestion: 'Transaction Dispute',\n\t            recipient: 0,\n\t            category: 'support'\n\t        },\n\t        {\n\t            question: 'I have a question about Wire Transfer',\n\t            preQuestion: 'Wire Transfer Inquiry',\n\t            recipient: 0,\n\t            category: 'consultancy'\n\t        },\n\t        {\n\t            question: 'I have another question',\n\t            preQuestion: 'Other',\n\t            recipient: 1,\n\t            category: 'other'\n\t        }\n\t    ];\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Factories\n\t * @module factories\n\t */\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require, exports) {\n\n\t    'use strict';\n\n\t    var $ = window.jQuery;\n\n\t    /* Main view controller */\n\t    // @ngInject\n\t    exports.MessageController = function($scope, $q, lpWidget, SharedData, AlertsManager, Thread, Letter, Message, lpDefaultProfileImage, lpCoreUtils) {\n\t        $scope.templatesDir = lpCoreUtils.getWidgetBaseUrl(lpWidget) + '/templates/'; // Used for template includes\n\t        $scope.alerts = AlertsManager; // Takes care of alert notifications\n\t        $scope.shared = SharedData; // Common data is stored here etc\n\t        $scope.categories = lpWidget.getPreference('categoryList').split(','); // Fetch available categories\n\t        $scope.MSG_AUTOSAVE_TIMEOUT = 500;\n\t        $scope.tabs = { inbox: {}, sent: {}, archive: {} };\n\t        $scope.modalShown = false;\n\n\t        /*\n\t         * Loads active (read/unread) threads\n\t         * @param showLoadingIndicator - flag used to indicate if system should show loading indicator in the UI\n\t         */\n\t        $scope.loadThreads = function(showLoadingIndicator) {\n\t            var tmpUnread = [], tmpRead = [];\n\t            if (showLoadingIndicator) {\n\t                SharedData.loading = true;\n\t            }\n\t            $q.all({\n\t                    // Load threads\n\t                    active: Thread.queryActive({}, function(data){\n\t                            lpCoreUtils.forEach(data, function(message) {\n\t                                var senderName = SharedData.resolveDisplayName(message.otherUser);\n\t                                var subject = message.subject.split(' - ')[1];\n\t                                message.senderName = senderName;\n\t                                if (!lpCoreUtils.isUndefined(subject)) {\n\t                                    message.subject = subject;\n\t                                }\n\t                                // Generate thread logo\n\t                                message.logoPath = lpDefaultProfileImage(senderName, 55, 55);\n\t                                if (message.containsUnread) { // Check if message is READ or UNREAD\n\t                                    tmpUnread.push(message);\n\t                                } else {\n\t                                    tmpRead.push(message);\n\t                                }\n\t                            });\n\t                            var threads = SharedData.threads;\n\t                            threads.active = tmpUnread.concat(tmpRead);\n\t                            threads.unread = tmpUnread;\n\t                            threads.read = tmpRead;\n\t                    }).$promise,\n\n\t                    // Load archived threads\n\t                    archived: Thread.queryArchived({}, function(data) {\n\t                            $.each(data, function() {\n\t                                var senderName = SharedData.resolveDisplayName(this.otherUser);\n\t                                this.senderName = senderName;\n\t                                this.logoPath = lpDefaultProfileImage(senderName, 55, 55);\n\t                                this.status = 'ARCHIVED';\n\t                            });\n\t                            SharedData.threads.archived = data;\n\t                    }).$promise,\n\n\t                    // Load archived threads\n\t                    sent: Thread.querySent({}, function(data) {\n\t                            $.each(data, function() {\n\t                                var senderName = SharedData.resolveDisplayName(this.otherUser);\n\t                                var subject = this.subject.split(' - ')[1]; //show only second part of the subject\n\t                                this.senderName = senderName;\n\t                                this.logoPath = lpDefaultProfileImage(senderName, 55, 55);\n\t                                this.status = 'SENT';\n\t                                if (!lpCoreUtils.isUndefined(subject)) {\n\t                                    this.subject = subject;\n\t                                }\n\t                            });\n\t                            SharedData.threads.sent = data;\n\t                    }).$promise,\n\n\t                    // Load drafts\n\t                    drafts: Letter.query({}, function(data) {\n\t                            $.each(data, function() {\n\t                                var subject = this.subject && this.subject.split(' - ')[1];\n\t                                if (!lpCoreUtils.isUndefined(subject)) {\n\t                                    this.subject = subject;\n\t                                }\n\t                                this.status = 'DRAFT';\n\t                                this.timestamp = this.updatedDate; //since Thread & Letter has different date fields\n\t                            });\n\t                            SharedData.draftLetters = data;\n\t                            if (data.length > 0) {\n\t                                $scope.modalShown = true;\n\t                            }\n\t                    }).$promise\n\t            }).then(function(result) {\n\t                SharedData.loading = false;\n\t            }, function(error) {\n\t                SharedData.loading = false;\n\t                AlertsManager.push('SERVICE_UNAVAILABLE', 'danger', false);\n\t            });\n\t        };\n\n\t        /* UI Action to open message for review */\n\t        // TODO: Move to message-list directive\n\t        $scope.selectThreadAction = function(thread) {\n\t             // create a deferred object\n\t            var returnObj = $q.defer();\n\n\t            // Close if clicked on selected message\n\t            if ($scope.shared.selectedThread !== null) {\n\t                if ($scope.shared.selectedThread.id === thread.id) {\n\t                    $scope.closeContentAction();\n\t                    returnObj.resolve();\n\t                    return returnObj;\n\t                }\n\t            }\n\n\t            // Edit thread if Draft\n\t            if (thread.status === 'DRAFT') {\n\t                $scope.closeModal();\n\t                $scope.createEditLetterAction($.extend({}, thread));\n\t                returnObj.resolve();\n\t            } else {\n\t                // Select thread\n\t                $scope.shared.selectedThread = thread;\n\t                $scope.isThreadLoading = true;\n\n\t                // Load thread content\n\t                Thread.messages({threadId: thread.id}).$promise.then(\n\t                    function(data){\n\t                        $scope.shared.selectedThread.messages = [];\n\n\t                        $.each(data, function(index, value) {\n\t                            var message = new Message(value);\n\t                            // Generate message logo\n\t                            message.logoPath = lpDefaultProfileImage(SharedData.resolveDisplayName(message.sender), 55, 55);\n\n\t                            // Generate message sender display name\n\t                            // Resolve other party name\n\t                            message.senderName = $scope.shared.resolveDisplayName(message.sender);\n\n\t                            // Mark unread message as read\n\t                            if (message.status === 'UNREAD') {\n\t                                message.show = true; // Mark unread messages to showup as expanded\n\t                                message.$markAsRead({threadId: $scope.shared.selectedThread.id}); // Mark message as Read\n\t                            }\n\n\t                            // Store last thread message id. Needed for Reply functionality\n\t                            if ((index + 1) === data.length) {\n\t                                $scope.shared.selectedThread.lastMessageIdInThread = message.id;  // Mark last message in the thread\n\t                            }\n\t                            $scope.shared.selectedThread.messages.push(message);\n\t                        });\n\t                        $scope.isThreadLoading = false; // Thread loading finished\n\t                    }\n\t                );\n\t                // Load thread draft\n\t                Thread.letters({threadId: thread.id}).$promise.then(\n\t                    function(data) {\n\t                        $scope.shared.selectedThread.draft = null;\n\t                        if (data.length > 0) {\n\t                            $scope.shared.selectedThread.draft = new Letter(data[0]);\n\t                            $scope.shared.selectedThread.draft.threadId = $scope.shared.selectedThread.id;\n\t                        }\n\t                        returnObj.resolve();\n\t                    }\n\t                );\n\t            }\n\t            // Scroll to the top of the window\n\t            window.scrollTo(0, 0);\n\t            return returnObj;\n\t        };\n\n\t        $scope.deleteDraft = function(item) {\n\t            if (item.status === 'DRAFT') {\n\t                item.$remove().then(\n\t                    function() {\n\t                        SharedData.removeFromList(SharedData.draftLetters, item);\n\t                    },\n\t                    function() {\n\t                        AlertsManager.push('DELETE_ERROR', 'danger', false);\n\t                    }\n\t                );\n\n\t                $scope.modalShown = false;\n\t            }\n\t        };\n\n\t        /* UI Action to close message review */\n\t        $scope.closeContentAction = function() {\n\t            $scope.shared.selectedThread = null;\n\t        };\n\n\t        /*\n\t         * UI Action to create or edit (draft) letter\n\t         * @param letter - if provided Edit action will be triggered\n\t         */\n\t        $scope.createEditLetterAction = function(letter) {\n\t            if (letter !== null && letter !== undefined) {\n\t                $scope.shared.editLetter = letter;\n\t            }\n\t            $scope.shared.editLetterInd = true;\n\t            // Close any opened item\n\t            $scope.closeContentAction();\n\t            // Switch to Inbox tab\n\t            $scope.tabs['inbox'].active = true;\n\t        };\n\n\t        $scope.showSideContent = function() {\n\t            return $scope.shared.selectedThread !== null || $scope.shared.editLetterInd;\n\t        };\n\n\t        $scope.tabSelected = function() {\n\t            SharedData.selectedThread = null;\n\t        };\n\n\t        $scope.closeModal = function() {\n\t            $scope.modalShown = false;\n\t        };\n\n\t        //On initial load we want to show loading indicator\n\t        $scope.loadThreads(true);\n\t        $scope.$on('refresh', $scope.loadThreads);\n\t    };\n\t    exports.MessageController.$inject = [\"$scope\", \"$q\", \"lpWidget\", \"SharedData\", \"AlertsManager\", \"Thread\", \"Letter\", \"Message\", \"lpDefaultProfileImage\", \"lpCoreUtils\"];\n\n\t    /* New letter creation container */\n\t    // @ngInject\n\t    exports.CreateLetterController = function($rootScope, $scope, $resource, SharedData, AlertsManager, lpWidget, Thread, Letter, lpCoreUtils, Topics) {\n\t        var util = lpCoreUtils;\n\n\t        $scope.shared = SharedData;\n\t        $scope.alertsManager = AlertsManager;\n\t        $scope.availableRecipients = [];\n\t        var endpoint = util.resolvePortalPlaceholders(lpWidget.getPreference('recipientsSrc'));\n\t        $resource(endpoint).get().$promise.then(\n\t            function(data){\n\t                $.each(data.addresses, function(index, value) {\n\t                    var recipient = { address: value };\n\t                    recipient.name = $scope.shared.resolveDisplayName(value);\n\t                    $scope.availableRecipients.push(recipient);\n\t                });\n\n\t                if($scope.availableRecipients && $scope.availableRecipients.length > 0) {\n\t                    Topics.loadDefault($scope.availableRecipients).then(function(topics){\n\t                        $scope.subjects = topics || [];\n\t                        $scope.$apply();\n\t                    });\n\t                }\n\t            }\n\t        );\n\n\t        // Create or Edit\n\t        if ($scope.shared.editLetter !== null) {\n\t            $scope.letter = $scope.shared.editLetter;\n\t        } else {\n\t            $scope.letter = Letter.create();\n\t        }\n\n\t        /*\n\t         * Pre-send message modifications\n\t         * @param letter - message to modify\n\t         */\n\t        var prepareMessage = function (letter) {\n\t            var selectedQuestion = $scope.selectedQuestion;\n\t            if(selectedQuestion) {\n\t                if (typeof selectedQuestion.recipient === 'string') {\n\t                    letter.recipients = [selectedQuestion.recipient];\n\t                }\n\t                letter.subject = selectedQuestion.preQuestion + ' - ' + selectedQuestion.question;\n\t                letter.category = selectedQuestion.category;\n\t            }\n\t            letter.timestamp = new Date();\n\t            letter.status = 'DRAFT';\n\t        };\n\n\t        /*\n\t        * Send message ui-action\n\t        * @param message - message to send\n\t        * @param element - form element to reset afterwards\n\t        */\n\t        $scope.save = function(letter, element) {\n\t            prepareMessage(letter);\n\t            letter.$save().then(\n\t                function(success) {\n\t                    SharedData.addToList(SharedData.draftLetters, letter);\n\t                    AlertsManager.push('SAVE_SUCCESSFULLY', 'success', true);\n\t                },\n\t                function(error) {\n\t                    AlertsManager.push('SAVE_ERROR', 'danger', false);\n\t                });\n\t            $scope.close(element);\n\t        };\n\n\t        /*\n\t        * Send message ui-action\n\t        * @param message - message to send\n\t        * @param element - form element to reset afterwards\n\t        */\n\t        $scope.send = function(letter, element) {\n\t            prepareMessage(letter);\n\t            letter.$save().then(\n\t                function() {\n\t                    letter.$send().then(\n\t                        function(success) {\n\t                            var sentThread = new Thread(letter);\n\t                            sentThread.status = 'SENT';\n\t                            sentThread.id = success.threadId;\n\n\t                            SharedData.addToList(SharedData.threads.sent, sentThread);\n\t                            SharedData.removeFromList(SharedData.draftLetters, letter);\n\n\t                            AlertsManager.push('SEND_SUCCESSFULLY', 'success', true);\n\t                            $rootScope.$broadcast('refresh', false);\n\t                        },\n\t                        function(error) {\n\t                            AlertsManager.push('SEND_ERROR', 'danger', false);\n\t                        }\n\t                    );\n\t                });\n\t            $scope.close(element);\n\t        };\n\n\t        /*\n\t        * Cancel message ui-action.\n\t        * Initiates cancellation of message creation\n\t        * @param element - form element to reset afterwards\n\t        */\n\t        $scope.close = function(element) {\n\t            $scope.shared.editLetterInd = false;\n\t            $scope.shared.editLetter = null;\n\t            element.newMessageForm.$setPristine();\n\t            element.newMessageForm.submitted = false;\n\t        };\n\t    };\n\t    exports.CreateLetterController.$inject = [\"$rootScope\", \"$scope\", \"$resource\", \"SharedData\", \"AlertsManager\", \"lpWidget\", \"Thread\", \"Letter\", \"lpCoreUtils\", \"Topics\"];\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Factories\n\t * @module factories\n\t */\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require, exports) {\n\n\t    'use strict';\n\n\t    var Hammer = __webpack_require__(12);\n\t    var $ = window.jQuery;\n\t    var closeMessageIfSelected = function(message, scope) {\n\t        if (scope.shared && scope.shared.selectedThread !== null &&\n\t            message.id === scope.shared.selectedThread.id) {\n\n\t            scope.shared.selectedThread = null;\n\t        }\n\t    };\n\t    var quickDeleteThread = function(item, SharedData, scope, AlertsManager) {\n\t        if (item.status === 'DRAFT') {\n\t            scope.$parent.deleteDraft(item);\n\t        } else {\n\t            item.$remove().then(\n\t                function(success) {\n\t                    closeMessageIfSelected(item, scope);\n\t                    switch (item.status) {\n\t                        case 'ARCHIVED':\n\t                            SharedData.removeFromList(SharedData.threads.archived, item);\n\t                            break;\n\t                        case 'SENT':\n\t                            SharedData.removeFromList(SharedData.threads.sent, item);\n\t                            break;\n\t                        default:\n\t                            if (item.containsUnread) {\n\t                                SharedData.removeFromList(SharedData.threads.unread, item);\n\t                            } else {\n\t                                SharedData.removeFromList(SharedData.threads.read, item);\n\t                            }\n\t                    }\n\t                    scope.$emit('refresh', true);\n\t                },\n\t                function(error) {\n\t                    AlertsManager.push('DELETE_ERROR', 'danger', false);\n\t                }\n\t            );\n\n\t        }\n\t    };\n\n\t    /* Message list display directive */\n\t    // @ngInject\n\t    exports.messageList = function($rootScope, SharedData, AlertsManager, lpWidget, lpCoreUtils, lpDefaultProfileImage) {\n\t        var templatesDir = lpCoreUtils.getWidgetBaseUrl(lpWidget) + '/templates';\n\n\t        return {\n\t            restrict: 'E',\n\t            scope: { title: '@', items: '=' },\n\t            replace: true,\n\t            templateUrl: templatesDir + '/message-list.html',\n\t            link: function(scope, elem, attrs) {\n\n\t                var decodePhotoUrl = function(photoUrl) {\n\t                    return photoUrl ? decodeURIComponent(photoUrl) : lpDefaultProfileImage();\n\t                };\n\n\t                scope.showList = true;\n\t                scope.shared = SharedData;\n\t                scope.expandView = false;\n\n\t                scope.toggleVisibility = function() {\n\t                    scope.showList = !scope.showList;\n\t                };\n\n\t                scope.picture = function(url) {\n\t                    return decodePhotoUrl(url);\n\t                };\n\n\t                scope.select = function(thread, event) {\n\t                    event.stopPropagation();\n\t                    return scope.$parent.selectThreadAction(thread);\n\t                };\n\n\t                scope.expanded = function() {\n\t                    return scope.$parent.showSideContent();\n\t                };\n\n\t                scope.expand = function(index) {\n\t                    scope.index = scope.index === index ? -1 : index;\n\t                };\n\n\t                scope.selectedItem = function() {\n\t                    return scope.shared.selectedThread;\n\t                };\n\n\t                scope.quickReply = function(thread, event) {\n\t                    event.stopPropagation();\n\t                    if (scope.shared.selectedThread === null || scope.shared.selectedThread.id !== thread.id) {\n\t                        scope.$parent.selectThreadAction(thread).promise.then(function(){\n\t                            $rootScope.$broadcast('initiateReply');\n\t                        });\n\t                    } else {\n\t                        $rootScope.$broadcast('initiateReply');\n\t                    }\n\t                };\n\t                scope.quickDelete = function(item) {\n\t                    quickDeleteThread(item, SharedData, scope, AlertsManager);\n\t                };\n\t                scope.quickArchive = function(item) {\n\t                    item.$archive().then(\n\t                        function(success) {\n\t                            item.status = 'ARCHIVED';\n\t                            if (item.containsUnread){\n\t                                SharedData.removeFromList(SharedData.threads.unread, item);\n\t                            } else {\n\t                                SharedData.removeFromList(SharedData.threads.read, item);\n\t                            }\n\t                            SharedData.addToList(SharedData.threads.archived, item);\n\t                        }\n\t                    );\n\t                };\n\t            }\n\t        };\n\t    };\n\t    exports.messageList.$inject = [\"$rootScope\", \"SharedData\", \"AlertsManager\", \"lpWidget\", \"lpCoreUtils\", \"lpDefaultProfileImage\"];\n\n\t    /* Message content display directive */\n\t    // @ngInject\n\t    exports.messageContent = function($timeout, AlertsManager, Letter, lpWidget, lpCoreUtils, SharedData) {\n\t        var templatesDir = lpCoreUtils.getWidgetBaseUrl(lpWidget) + '/templates';\n\n\t        return {\n\t            restrict: 'E',\n\t            scope: { thread: '=' },\n\t            replace: true,\n\t            templateUrl: templatesDir + '/message-content.html',\n\t            link: function(scope, elem, attrs) {\n\n\t                scope.replySaveInProgressInd = false; // Used to display 'Saving..' text for user\n\t                var replySaveTimeoutId = null;\n\n\t                scope.$on('initiateReply', function() {\n\t                    scope.openReplyAction();\n\t                });\n\n\t                scope.toggleMessageVisibility = function(message) {\n\t                    if (!message.isLastInThread) {\n\t                        message.show = !message.show;\n\t                    }\n\t                };\n\n\t                /*\n\t                 * UI Action to initiate Reply to message\n\t                 */\n\t                scope.openReplyAction = function() {\n\t                    if (scope.thread.draft === null) {\n\t                        scope.thread.draft = Letter.create();\n\t                        scope.thread.draft.threadId = scope.thread.id;\n\t                    }\n\t                    setTimeout(function(){\n\t                        $('#replyMessageFormBody').focus();\n\t                        $('#replyMessageFormBody').on('input propertychange', function() {\n\t                            if (scope.thread.draft !== null) {\n\t                                clearTimeout(replySaveTimeoutId);\n\t                                replySaveTimeoutId = setTimeout(function() {\n\t                                    scope.saveReplyAction(scope.thread.draft);\n\t                                }, scope.$parent.MSG_AUTOSAVE_TIMEOUT);\n\t                            }\n\t                        });\n\t                    }, scope.$parent.MSG_AUTOSAVE_TIMEOUT);\n\t                };\n\t                scope.quickDelete = function(item) {\n\t                     quickDeleteThread(item, SharedData, scope, AlertsManager);\n\t                     scope.close();\n\t                     scope.$emit('refresh', true);\n\t                };\n\t                /*\n\t                 * Cancel Reply UI Action\n\t                 * @param element - HTML element with reply form to clear validations\n\t                 */\n\t                scope.cancelReplyAction = function(element) {\n\t                    if (scope.thread.draft !== null) {\n\t                        scope.thread.draft.$remove();\n\t                        scope.clearReplyAction(element);\n\t                    }\n\t                };\n\t                /*\n\t                 * Clear Reply Action, clears reply forms validation\n\t                 * @param element - HTML element with reply form to clear validations\n\t                 */\n\t                scope.clearReplyAction = function(element) {\n\t                    scope.thread.draft = null;\n\t                    element.replyMessageForm.$setPristine();\n\t                    element.replyMessageForm.submitted = false;\n\t                };\n\t                /*\n\t                 * Save Reply UI Action\n\t                 * @param letter - letter which should be send\n\t                 */\n\t                scope.saveReplyAction = function(letter) {\n\t                    scope.replySaveInProgressInd = true;\n\t                    letter.$respond().then(\n\t                        function (success) {\n\t                            // Add deplay for better user experience\n\t                            $timeout(function() { scope.replySaveInProgressInd = false; }, scope.$parent.MSG_AUTOSAVE_TIMEOUT);\n\t                        }\n\t                    );\n\t                };\n\t                /*\n\t                 * Send Reply UI Action\n\t                 * @param letter - letter which should be send\n\t                 */\n\t                scope.sendReplyAction = function(letter) {\n\t                    letter.timestamp = new Date();\n\t                    letter.$respond().then(\n\t                        function (success) {\n\t                            letter.$send().then(\n\t                                function(vSuccess) {\n\t                                    AlertsManager.push('SEND_SUCCESSFULLY', 'success', true);\n\t                                },\n\t                                function(error) {\n\t                                    AlertsManager.push('SEND_ERROR', 'danger', false);\n\t                                }\n\t                            );\n\t                        },\n\t                        function(error) {\n\t                            AlertsManager.push('SEND_ERROR', 'danger', false);\n\t                        }\n\t                    );\n\t                    this.clearReplyAction(this); // Clear reply\n\t                    this.close(); // Close opened thread\n\t                };\n\t                /*\n\t                 * Closes thread review\n\t                 */\n\t                scope.close = function() {\n\t                    scope.thread = null;\n\t                };\n\t            }\n\t        };\n\t    };\n\t    exports.messageContent.$inject = [\"$timeout\", \"AlertsManager\", \"Letter\", \"lpWidget\", \"lpCoreUtils\", \"SharedData\"];\n\n\t    /* Directive to support touch swipe event */\n\t    // @ngInject\n\t    exports.swipe = function() {\n\t        return {\n\t            restrict: 'A',\n\t            scope: {},\n\t            replace: true,\n\t            link: function(scope, elem, attrs) {\n\t                var hammer = new Hammer(elem[0]);\n\t                hammer.on('panleft', function(ev) { //2.0 removed use different\n\t                    $(this).toggleClass('swipe-on');\n\t                });\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** scripts/main.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 32703d934d1b137f5b6d\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    module.name = 'secure-messaging';\n\n    var base = require('base');\n    var ui = require('ui');\n    var core = require('core');\n\n    var users = require('module-users');\n\n    var deps = [\n        core.name,\n        ui.name,\n        users.name\n    ];\n\n    // @ngInject\n   function run(lpWidget, lpCoreBus) {\n        if(lpWidget && lpWidget.model) {\n            lpCoreBus.publish('cxp.item.loaded', {\n                id: lpWidget.model.name\n            });\n        }\n    }\n\n    module.exports = base.createModule(module.name, deps)\n        .factory(require('./factories'))\n        .service(require('./services'))\n        .service(require('./topics-service'))\n        .controller(require('./controllers'))\n        .directive(require('./directives'))\n        .run( run );\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./scripts/main.js\n ** module id = 0\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 1\n ** module chunks = 0\n **/","/**\n * Factories\n * @module factories\n */\ndefine(function(require, exports) {\n    'use strict';\n\n    /* Data shared between controllers */\n\n    // @ngInject\n    exports.SharedData = function(lpCoreUtils) {\n        var util = lpCoreUtils;\n        // Parses DN (Distinguished Name) value and returns CN (Common Name) value\n        var resolveDisplayName = function(x500value) {\n            var regExp = /CN=([^,]+)/i;\n            if (regExp.test(x500value)) {\n                var match = regExp.exec(x500value);\n                return match[1];\n            } else {\n                return x500value;\n            }\n        };\n\n        var findIndexById = function(list, id) {\n            var index = -1;\n            util.forEach(list, function(item) {\n                if (item.id === id) {\n                    index = list.indexOf(item);\n                    return index;\n                }\n            });\n            return index;\n        };\n\n        var add = function(list, item) {\n            var index = findIndexById(list, item.id); // since item can be updated, and changed\n            if (index !== -1) {\n                list[index] = item; // if found, update\n            } else {\n                list.unshift(item); // if not found, add\n            }\n        };\n\n        var remove = function(list, item) {\n            var index = findIndexById(list, item.id);\n            if (index !== -1) { // letter found\n                list.splice(index, 1);\n            }\n        };\n\n        /* Indicator if inbox contains at least a single item */\n        var isInboxEmpty = function() {\n            return this.threads.unread.length === 0 &&\n                this.threads.read.length === 0 &&\n                this.draftLetters.length === 0 &&\n                this.threads.archived.length === 0;\n        };\n\n        return {\n            // Thread containers\n            threads: {unread: [], read: [], archived: [], active: []},\n            draftLetters: [],\n            addToList: add,\n            removeFromList: remove,\n            // Read/Create message data\n            selectedThread: null,\n            editLetter: null,\n            // Alerts\n            alerts: [],\n            // Flags\n            loading: false,\n            editLetterInd: false,\n            // Helpers (might move to separate service?)\n            resolveDisplayName: resolveDisplayName,\n            isInboxEmpty: isInboxEmpty\n        };\n    };\n\n    /* Thread - Message container of sent items */\n    // @ngInject\n    exports.Thread = function($resource, lpWidget) {\n        var endpoint = lpWidget.getResolvedPreference('threadSrc');\n        return $resource(endpoint, {}, {\n                    queryActive: {method: 'GET', params: {}, isArray: true},\n                    queryArchived: {method: 'GET', params: {status: 'archived'}, isArray: true},\n                    querySent: {method: 'GET', params: {status: 'sent'}, isArray: true},\n                    messages: {method: 'GET', params: {threadId: '@id', itemType: 'messages'}, isArray: true},\n                    letters: {method: 'GET', params: {threadId: '@id', itemType: 'letters'}, isArray: true},\n                    remove: {method: 'DELETE', params: {threadId: '@id'}},\n                    archive: {method: 'POST', params: {threadId: '@id', action: 'archive_thread_request'}}\n        });\n    };\n\n    /* Message - a sent item in a thread */\n    // @ngInject\n    exports.Message = function($resource, lpWidget) {\n        var endpoint = lpWidget.getResolvedPreference('threadSrc');\n        return $resource(endpoint, {}, {\n            markAsRead: {method: 'POST', params: {threadId: '@threadId', itemType: 'messages', itemId: '@id', action: 'read_message_request'}}\n        });\n    };\n\n    /* Letter - a newly created or unsent item */\n    // @ngInject\n    exports.Letter = function($resource, lpWidget, lpPortal, lpCoreUtils) {\n        var endpoint = lpWidget.getResolvedPreference('letterSrc');\n        var Letter = $resource(endpoint, {}, {\n                query: {method: 'GET', params: {action: 'drafts'}, isArray: true},\n                save: {method: 'PUT', params: {action: 'save', letterId: '@id'}},\n                send: {method: 'POST', params: {action: 'send', letterId: '@id'}},\n                remove: {method: 'DELETE', params: {action: 'delete', letterId: '@id'}},\n                respond: {method: 'PUT', params: {action: 'response', threadId: '@threadId', letterId: '@id'}}\n        });\n        Letter.create = function() {\n            return new Letter({\n                id: lpCoreUtils.generateUUID(),\n                sender: lpPortal.userId\n            });\n        };\n        return Letter;\n    };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./scripts/factories.js\n ** module id = 6\n ** module chunks = 0\n **/","/**\n * Services\n * @module services\n */\ndefine(function(require, exports) {\n\n    'use strict';\n\n    /* Responsible for managing alert messages */\n    // @ngInject\n    exports.AlertsManager = function($timeout, $resource) {\n        var ALERT_TIMEOUT = 3000; // Time in which message will auto-close if timeout = true\n        var alerts = [];\n        this.list = function() {\n            return alerts;\n        };\n        this.push = function(message, type, timeout) {\n            var self = this;\n            self.close(); // support only 1 alert for now\n            alerts.push({\n                type: type || 'danger',\n                msg: message\n            });\n            if (timeout !== false) {\n                $timeout(function() { self.close(); }, ALERT_TIMEOUT);\n            }\n        };\n        this.close = function() {\n            alerts = [];\n        };\n    };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./scripts/services.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * Topics Service\n * @module topics-service\n */\ndefine(function(require, exports) {\n    'use strict';\n    var base = require('base');\n\n    /* Provides the list of message topics */\n    // @ngInject\n    exports.Topics = function() {\n\n        return {\n           loadDefault: function(availableRecipients) {\n                // Real call NYI implemented in demo service.\n                return base.fetch('real/api/to/demo-service').then(function(response) {\n                        return response.data.topics;\n                }, function handleError() {\n                    var topics = require('./defaultTopics');\n\n                    // Append recipient address;\n                    topics.forEach(function(topic){\n                        topic.recipient = availableRecipients[topic.recipient];\n                    });\n\n                    return topics;\n                });\n            }\n        };\n    };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./scripts/topics-service.js\n ** module id = 8\n ** module chunks = 0\n **/","define(function() {\n    'use strict';\n\n    return [\n        {\n            question: 'I have a question about Online Banking',\n            preQuestion: 'Online Banking Assistance',\n            recipient: 0,\n            category: 'support'\n        },\n        {\n            question: 'I have a question about Mobile Banking',\n            preQuestion: 'Mobile Banking Assistance',\n            recipient: 1,\n            category: 'mobile'\n        },\n        {\n            question: 'I have a question about Bill Pay',\n            preQuestion: 'Bill Pay Assistance',\n            recipient: 0,\n            category: 'offer'\n        },\n        {\n            question: 'I have a question about Accounts or Payments',\n            preQuestion: 'Account or Payment Inquiry',\n            recipient: 0,\n            category: 'business'\n        },\n        {\n            question: 'I have a question about Fee or Interest Charges',\n            preQuestion: 'Fee or Interest Charges',\n            recipient: 1,\n            category: 'mobile'\n        },\n        {\n            question: 'I have a question about Loans',\n            preQuestion: 'Loan Inquiry',\n            recipient: 0,\n            category: 'consultancy'\n        },\n        {\n            question: 'I have a question about Taxes',\n            preQuestion: 'Tax Information',\n            recipient: 1,\n            category: 'support'\n        },\n        {\n            question: 'I have a Transaction Dispute',\n            preQuestion: 'Transaction Dispute',\n            recipient: 0,\n            category: 'support'\n        },\n        {\n            question: 'I have a question about Wire Transfer',\n            preQuestion: 'Wire Transfer Inquiry',\n            recipient: 0,\n            category: 'consultancy'\n        },\n        {\n            question: 'I have another question',\n            preQuestion: 'Other',\n            recipient: 1,\n            category: 'other'\n        }\n    ];\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./scripts/defaultTopics.js\n ** module id = 9\n ** module chunks = 0\n **/","/**\n * Factories\n * @module factories\n */\ndefine(function(require, exports) {\n\n    'use strict';\n\n    var $ = window.jQuery;\n\n    /* Main view controller */\n    // @ngInject\n    exports.MessageController = function($scope, $q, lpWidget, SharedData, AlertsManager, Thread, Letter, Message, lpDefaultProfileImage, lpCoreUtils) {\n        $scope.templatesDir = lpCoreUtils.getWidgetBaseUrl(lpWidget) + '/templates/'; // Used for template includes\n        $scope.alerts = AlertsManager; // Takes care of alert notifications\n        $scope.shared = SharedData; // Common data is stored here etc\n        $scope.categories = lpWidget.getPreference('categoryList').split(','); // Fetch available categories\n        $scope.MSG_AUTOSAVE_TIMEOUT = 500;\n        $scope.tabs = { inbox: {}, sent: {}, archive: {} };\n        $scope.modalShown = false;\n\n        /*\n         * Loads active (read/unread) threads\n         * @param showLoadingIndicator - flag used to indicate if system should show loading indicator in the UI\n         */\n        $scope.loadThreads = function(showLoadingIndicator) {\n            var tmpUnread = [], tmpRead = [];\n            if (showLoadingIndicator) {\n                SharedData.loading = true;\n            }\n            $q.all({\n                    // Load threads\n                    active: Thread.queryActive({}, function(data){\n                            lpCoreUtils.forEach(data, function(message) {\n                                var senderName = SharedData.resolveDisplayName(message.otherUser);\n                                var subject = message.subject.split(' - ')[1];\n                                message.senderName = senderName;\n                                if (!lpCoreUtils.isUndefined(subject)) {\n                                    message.subject = subject;\n                                }\n                                // Generate thread logo\n                                message.logoPath = lpDefaultProfileImage(senderName, 55, 55);\n                                if (message.containsUnread) { // Check if message is READ or UNREAD\n                                    tmpUnread.push(message);\n                                } else {\n                                    tmpRead.push(message);\n                                }\n                            });\n                            var threads = SharedData.threads;\n                            threads.active = tmpUnread.concat(tmpRead);\n                            threads.unread = tmpUnread;\n                            threads.read = tmpRead;\n                    }).$promise,\n\n                    // Load archived threads\n                    archived: Thread.queryArchived({}, function(data) {\n                            $.each(data, function() {\n                                var senderName = SharedData.resolveDisplayName(this.otherUser);\n                                this.senderName = senderName;\n                                this.logoPath = lpDefaultProfileImage(senderName, 55, 55);\n                                this.status = 'ARCHIVED';\n                            });\n                            SharedData.threads.archived = data;\n                    }).$promise,\n\n                    // Load archived threads\n                    sent: Thread.querySent({}, function(data) {\n                            $.each(data, function() {\n                                var senderName = SharedData.resolveDisplayName(this.otherUser);\n                                var subject = this.subject.split(' - ')[1]; //show only second part of the subject\n                                this.senderName = senderName;\n                                this.logoPath = lpDefaultProfileImage(senderName, 55, 55);\n                                this.status = 'SENT';\n                                if (!lpCoreUtils.isUndefined(subject)) {\n                                    this.subject = subject;\n                                }\n                            });\n                            SharedData.threads.sent = data;\n                    }).$promise,\n\n                    // Load drafts\n                    drafts: Letter.query({}, function(data) {\n                            $.each(data, function() {\n                                var subject = this.subject && this.subject.split(' - ')[1];\n                                if (!lpCoreUtils.isUndefined(subject)) {\n                                    this.subject = subject;\n                                }\n                                this.status = 'DRAFT';\n                                this.timestamp = this.updatedDate; //since Thread & Letter has different date fields\n                            });\n                            SharedData.draftLetters = data;\n                            if (data.length > 0) {\n                                $scope.modalShown = true;\n                            }\n                    }).$promise\n            }).then(function(result) {\n                SharedData.loading = false;\n            }, function(error) {\n                SharedData.loading = false;\n                AlertsManager.push('SERVICE_UNAVAILABLE', 'danger', false);\n            });\n        };\n\n        /* UI Action to open message for review */\n        // TODO: Move to message-list directive\n        $scope.selectThreadAction = function(thread) {\n             // create a deferred object\n            var returnObj = $q.defer();\n\n            // Close if clicked on selected message\n            if ($scope.shared.selectedThread !== null) {\n                if ($scope.shared.selectedThread.id === thread.id) {\n                    $scope.closeContentAction();\n                    returnObj.resolve();\n                    return returnObj;\n                }\n            }\n\n            // Edit thread if Draft\n            if (thread.status === 'DRAFT') {\n                $scope.closeModal();\n                $scope.createEditLetterAction($.extend({}, thread));\n                returnObj.resolve();\n            } else {\n                // Select thread\n                $scope.shared.selectedThread = thread;\n                $scope.isThreadLoading = true;\n\n                // Load thread content\n                Thread.messages({threadId: thread.id}).$promise.then(\n                    function(data){\n                        $scope.shared.selectedThread.messages = [];\n\n                        $.each(data, function(index, value) {\n                            var message = new Message(value);\n                            // Generate message logo\n                            message.logoPath = lpDefaultProfileImage(SharedData.resolveDisplayName(message.sender), 55, 55);\n\n                            // Generate message sender display name\n                            // Resolve other party name\n                            message.senderName = $scope.shared.resolveDisplayName(message.sender);\n\n                            // Mark unread message as read\n                            if (message.status === 'UNREAD') {\n                                message.show = true; // Mark unread messages to showup as expanded\n                                message.$markAsRead({threadId: $scope.shared.selectedThread.id}); // Mark message as Read\n                            }\n\n                            // Store last thread message id. Needed for Reply functionality\n                            if ((index + 1) === data.length) {\n                                $scope.shared.selectedThread.lastMessageIdInThread = message.id;  // Mark last message in the thread\n                            }\n                            $scope.shared.selectedThread.messages.push(message);\n                        });\n                        $scope.isThreadLoading = false; // Thread loading finished\n                    }\n                );\n                // Load thread draft\n                Thread.letters({threadId: thread.id}).$promise.then(\n                    function(data) {\n                        $scope.shared.selectedThread.draft = null;\n                        if (data.length > 0) {\n                            $scope.shared.selectedThread.draft = new Letter(data[0]);\n                            $scope.shared.selectedThread.draft.threadId = $scope.shared.selectedThread.id;\n                        }\n                        returnObj.resolve();\n                    }\n                );\n            }\n            // Scroll to the top of the window\n            window.scrollTo(0, 0);\n            return returnObj;\n        };\n\n        $scope.deleteDraft = function(item) {\n            if (item.status === 'DRAFT') {\n                item.$remove().then(\n                    function() {\n                        SharedData.removeFromList(SharedData.draftLetters, item);\n                    },\n                    function() {\n                        AlertsManager.push('DELETE_ERROR', 'danger', false);\n                    }\n                );\n\n                $scope.modalShown = false;\n            }\n        };\n\n        /* UI Action to close message review */\n        $scope.closeContentAction = function() {\n            $scope.shared.selectedThread = null;\n        };\n\n        /*\n         * UI Action to create or edit (draft) letter\n         * @param letter - if provided Edit action will be triggered\n         */\n        $scope.createEditLetterAction = function(letter) {\n            if (letter !== null && letter !== undefined) {\n                $scope.shared.editLetter = letter;\n            }\n            $scope.shared.editLetterInd = true;\n            // Close any opened item\n            $scope.closeContentAction();\n            // Switch to Inbox tab\n            $scope.tabs['inbox'].active = true;\n        };\n\n        $scope.showSideContent = function() {\n            return $scope.shared.selectedThread !== null || $scope.shared.editLetterInd;\n        };\n\n        $scope.tabSelected = function() {\n            SharedData.selectedThread = null;\n        };\n\n        $scope.closeModal = function() {\n            $scope.modalShown = false;\n        };\n\n        //On initial load we want to show loading indicator\n        $scope.loadThreads(true);\n        $scope.$on('refresh', $scope.loadThreads);\n    };\n\n    /* New letter creation container */\n    // @ngInject\n    exports.CreateLetterController = function($rootScope, $scope, $resource, SharedData, AlertsManager, lpWidget, Thread, Letter, lpCoreUtils, Topics) {\n        var util = lpCoreUtils;\n\n        $scope.shared = SharedData;\n        $scope.alertsManager = AlertsManager;\n        $scope.availableRecipients = [];\n        var endpoint = util.resolvePortalPlaceholders(lpWidget.getPreference('recipientsSrc'));\n        $resource(endpoint).get().$promise.then(\n            function(data){\n                $.each(data.addresses, function(index, value) {\n                    var recipient = { address: value };\n                    recipient.name = $scope.shared.resolveDisplayName(value);\n                    $scope.availableRecipients.push(recipient);\n                });\n\n                if($scope.availableRecipients && $scope.availableRecipients.length > 0) {\n                    Topics.loadDefault($scope.availableRecipients).then(function(topics){\n                        $scope.subjects = topics || [];\n                        $scope.$apply();\n                    });\n                }\n            }\n        );\n\n        // Create or Edit\n        if ($scope.shared.editLetter !== null) {\n            $scope.letter = $scope.shared.editLetter;\n        } else {\n            $scope.letter = Letter.create();\n        }\n\n        /*\n         * Pre-send message modifications\n         * @param letter - message to modify\n         */\n        var prepareMessage = function (letter) {\n            var selectedQuestion = $scope.selectedQuestion;\n            if(selectedQuestion) {\n                if (typeof selectedQuestion.recipient === 'string') {\n                    letter.recipients = [selectedQuestion.recipient];\n                }\n                letter.subject = selectedQuestion.preQuestion + ' - ' + selectedQuestion.question;\n                letter.category = selectedQuestion.category;\n            }\n            letter.timestamp = new Date();\n            letter.status = 'DRAFT';\n        };\n\n        /*\n        * Send message ui-action\n        * @param message - message to send\n        * @param element - form element to reset afterwards\n        */\n        $scope.save = function(letter, element) {\n            prepareMessage(letter);\n            letter.$save().then(\n                function(success) {\n                    SharedData.addToList(SharedData.draftLetters, letter);\n                    AlertsManager.push('SAVE_SUCCESSFULLY', 'success', true);\n                },\n                function(error) {\n                    AlertsManager.push('SAVE_ERROR', 'danger', false);\n                });\n            $scope.close(element);\n        };\n\n        /*\n        * Send message ui-action\n        * @param message - message to send\n        * @param element - form element to reset afterwards\n        */\n        $scope.send = function(letter, element) {\n            prepareMessage(letter);\n            letter.$save().then(\n                function() {\n                    letter.$send().then(\n                        function(success) {\n                            var sentThread = new Thread(letter);\n                            sentThread.status = 'SENT';\n                            sentThread.id = success.threadId;\n\n                            SharedData.addToList(SharedData.threads.sent, sentThread);\n                            SharedData.removeFromList(SharedData.draftLetters, letter);\n\n                            AlertsManager.push('SEND_SUCCESSFULLY', 'success', true);\n                            $rootScope.$broadcast('refresh', false);\n                        },\n                        function(error) {\n                            AlertsManager.push('SEND_ERROR', 'danger', false);\n                        }\n                    );\n                });\n            $scope.close(element);\n        };\n\n        /*\n        * Cancel message ui-action.\n        * Initiates cancellation of message creation\n        * @param element - form element to reset afterwards\n        */\n        $scope.close = function(element) {\n            $scope.shared.editLetterInd = false;\n            $scope.shared.editLetter = null;\n            element.newMessageForm.$setPristine();\n            element.newMessageForm.submitted = false;\n        };\n    };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./scripts/controllers.js\n ** module id = 10\n ** module chunks = 0\n **/","/**\n * Factories\n * @module factories\n */\ndefine(function(require, exports) {\n\n    'use strict';\n\n    var Hammer = require('hammerjs');\n    var $ = window.jQuery;\n    var closeMessageIfSelected = function(message, scope) {\n        if (scope.shared && scope.shared.selectedThread !== null &&\n            message.id === scope.shared.selectedThread.id) {\n\n            scope.shared.selectedThread = null;\n        }\n    };\n    var quickDeleteThread = function(item, SharedData, scope, AlertsManager) {\n        if (item.status === 'DRAFT') {\n            scope.$parent.deleteDraft(item);\n        } else {\n            item.$remove().then(\n                function(success) {\n                    closeMessageIfSelected(item, scope);\n                    switch (item.status) {\n                        case 'ARCHIVED':\n                            SharedData.removeFromList(SharedData.threads.archived, item);\n                            break;\n                        case 'SENT':\n                            SharedData.removeFromList(SharedData.threads.sent, item);\n                            break;\n                        default:\n                            if (item.containsUnread) {\n                                SharedData.removeFromList(SharedData.threads.unread, item);\n                            } else {\n                                SharedData.removeFromList(SharedData.threads.read, item);\n                            }\n                    }\n                    scope.$emit('refresh', true);\n                },\n                function(error) {\n                    AlertsManager.push('DELETE_ERROR', 'danger', false);\n                }\n            );\n\n        }\n    };\n\n    /* Message list display directive */\n    // @ngInject\n    exports.messageList = function($rootScope, SharedData, AlertsManager, lpWidget, lpCoreUtils, lpDefaultProfileImage) {\n        var templatesDir = lpCoreUtils.getWidgetBaseUrl(lpWidget) + '/templates';\n\n        return {\n            restrict: 'E',\n            scope: { title: '@', items: '=' },\n            replace: true,\n            templateUrl: templatesDir + '/message-list.html',\n            link: function(scope, elem, attrs) {\n\n                var decodePhotoUrl = function(photoUrl) {\n                    return photoUrl ? decodeURIComponent(photoUrl) : lpDefaultProfileImage();\n                };\n\n                scope.showList = true;\n                scope.shared = SharedData;\n                scope.expandView = false;\n\n                scope.toggleVisibility = function() {\n                    scope.showList = !scope.showList;\n                };\n\n                scope.picture = function(url) {\n                    return decodePhotoUrl(url);\n                };\n\n                scope.select = function(thread, event) {\n                    event.stopPropagation();\n                    return scope.$parent.selectThreadAction(thread);\n                };\n\n                scope.expanded = function() {\n                    return scope.$parent.showSideContent();\n                };\n\n                scope.expand = function(index) {\n                    scope.index = scope.index === index ? -1 : index;\n                };\n\n                scope.selectedItem = function() {\n                    return scope.shared.selectedThread;\n                };\n\n                scope.quickReply = function(thread, event) {\n                    event.stopPropagation();\n                    if (scope.shared.selectedThread === null || scope.shared.selectedThread.id !== thread.id) {\n                        scope.$parent.selectThreadAction(thread).promise.then(function(){\n                            $rootScope.$broadcast('initiateReply');\n                        });\n                    } else {\n                        $rootScope.$broadcast('initiateReply');\n                    }\n                };\n                scope.quickDelete = function(item) {\n                    quickDeleteThread(item, SharedData, scope, AlertsManager);\n                };\n                scope.quickArchive = function(item) {\n                    item.$archive().then(\n                        function(success) {\n                            item.status = 'ARCHIVED';\n                            if (item.containsUnread){\n                                SharedData.removeFromList(SharedData.threads.unread, item);\n                            } else {\n                                SharedData.removeFromList(SharedData.threads.read, item);\n                            }\n                            SharedData.addToList(SharedData.threads.archived, item);\n                        }\n                    );\n                };\n            }\n        };\n    };\n\n    /* Message content display directive */\n    // @ngInject\n    exports.messageContent = function($timeout, AlertsManager, Letter, lpWidget, lpCoreUtils, SharedData) {\n        var templatesDir = lpCoreUtils.getWidgetBaseUrl(lpWidget) + '/templates';\n\n        return {\n            restrict: 'E',\n            scope: { thread: '=' },\n            replace: true,\n            templateUrl: templatesDir + '/message-content.html',\n            link: function(scope, elem, attrs) {\n\n                scope.replySaveInProgressInd = false; // Used to display 'Saving..' text for user\n                var replySaveTimeoutId = null;\n\n                scope.$on('initiateReply', function() {\n                    scope.openReplyAction();\n                });\n\n                scope.toggleMessageVisibility = function(message) {\n                    if (!message.isLastInThread) {\n                        message.show = !message.show;\n                    }\n                };\n\n                /*\n                 * UI Action to initiate Reply to message\n                 */\n                scope.openReplyAction = function() {\n                    if (scope.thread.draft === null) {\n                        scope.thread.draft = Letter.create();\n                        scope.thread.draft.threadId = scope.thread.id;\n                    }\n                    setTimeout(function(){\n                        $('#replyMessageFormBody').focus();\n                        $('#replyMessageFormBody').on('input propertychange', function() {\n                            if (scope.thread.draft !== null) {\n                                clearTimeout(replySaveTimeoutId);\n                                replySaveTimeoutId = setTimeout(function() {\n                                    scope.saveReplyAction(scope.thread.draft);\n                                }, scope.$parent.MSG_AUTOSAVE_TIMEOUT);\n                            }\n                        });\n                    }, scope.$parent.MSG_AUTOSAVE_TIMEOUT);\n                };\n                scope.quickDelete = function(item) {\n                     quickDeleteThread(item, SharedData, scope, AlertsManager);\n                     scope.close();\n                     scope.$emit('refresh', true);\n                };\n                /*\n                 * Cancel Reply UI Action\n                 * @param element - HTML element with reply form to clear validations\n                 */\n                scope.cancelReplyAction = function(element) {\n                    if (scope.thread.draft !== null) {\n                        scope.thread.draft.$remove();\n                        scope.clearReplyAction(element);\n                    }\n                };\n                /*\n                 * Clear Reply Action, clears reply forms validation\n                 * @param element - HTML element with reply form to clear validations\n                 */\n                scope.clearReplyAction = function(element) {\n                    scope.thread.draft = null;\n                    element.replyMessageForm.$setPristine();\n                    element.replyMessageForm.submitted = false;\n                };\n                /*\n                 * Save Reply UI Action\n                 * @param letter - letter which should be send\n                 */\n                scope.saveReplyAction = function(letter) {\n                    scope.replySaveInProgressInd = true;\n                    letter.$respond().then(\n                        function (success) {\n                            // Add deplay for better user experience\n                            $timeout(function() { scope.replySaveInProgressInd = false; }, scope.$parent.MSG_AUTOSAVE_TIMEOUT);\n                        }\n                    );\n                };\n                /*\n                 * Send Reply UI Action\n                 * @param letter - letter which should be send\n                 */\n                scope.sendReplyAction = function(letter) {\n                    letter.timestamp = new Date();\n                    letter.$respond().then(\n                        function (success) {\n                            letter.$send().then(\n                                function(vSuccess) {\n                                    AlertsManager.push('SEND_SUCCESSFULLY', 'success', true);\n                                },\n                                function(error) {\n                                    AlertsManager.push('SEND_ERROR', 'danger', false);\n                                }\n                            );\n                        },\n                        function(error) {\n                            AlertsManager.push('SEND_ERROR', 'danger', false);\n                        }\n                    );\n                    this.clearReplyAction(this); // Clear reply\n                    this.close(); // Close opened thread\n                };\n                /*\n                 * Closes thread review\n                 */\n                scope.close = function() {\n                    scope.thread = null;\n                };\n            }\n        };\n    };\n\n    /* Directive to support touch swipe event */\n    // @ngInject\n    exports.swipe = function() {\n        return {\n            restrict: 'A',\n            scope: {},\n            replace: true,\n            link: function(scope, elem, attrs) {\n                var hammer = new Hammer(elem[0]);\n                hammer.on('panleft', function(ev) { //2.0 removed use different\n                    $(this).toggleClass('swipe-on');\n                });\n            }\n        };\n    };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./scripts/directives.js\n ** module id = 11\n ** module chunks = 0\n **/"],"sourceRoot":""}