{"version":3,"sources":["webpack:///widget-places/webpack/universalModuleDefinition","webpack:///widget-places/scripts/main.js","webpack:///widget-places/webpack/bootstrap e414c19eba4ddae66dbc","webpack:///widget-places/./scripts/main.js","webpack:///widget-places/(webpack)/buildin/module.js","webpack:///widget-places/external \"base\"","webpack:///widget-places/external \"core\"","webpack:///widget-places/external \"ui\"","webpack:///widget-places/external \"module-places\"","webpack:///widget-places/./scripts/controllers.js","webpack:///widget-places/external \"jquery\"","webpack:///widget-places/./scripts/directives.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_3__","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_5__","__WEBPACK_EXTERNAL_MODULE_6__","__WEBPACK_EXTERNAL_MODULE_8__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","run","lpCoreBus","lpWidget","publish","model","name","$inject","base","core","ui","places","deps","createModule","controller","directive","undefined","webpackPolyfill","deprecate","paths","children","PlacesCtrl","$scope","$q","$filter","$timeout","lpPlaces","lpPlacesUtils","lpCoreUtils","httpService","angulargmUtils","lpCoreError","centerMap","map","zoom","parseInt","getPreference","center","google","maps","LatLng","latitude","longitude","parseError","err","isString","message","trim","data","isArray","errors","length","pluck","join","handleError","status","isError","captureException","addAlert","alertTimeout","mapFilterResults","filters","merge","types","services","filter","label","selected","readFilterData","filterService","getInstance","endpoint","resolvePortalPlaceholders","read","success","error","throwException","PlacesError","getSelectedFilterTypes","chain","value","readLocationData","isLoading","hasCoords","isUndefined","assert","selectedTypes","locationService","lat","long","type","radius","locations","indexOf","each","place","hasTimes","isPlainObject","openingHours","periods","period","weekDay","date","isoWeekday","day","dayShort","format","time","formatTime","trimPeriod","replace","getColor","assignedColors","markerColorPool","shift","getLocation","setDefaultLocation","cancel","idTimeout","deferred","resolve","defer","promise","timeout","delayDefaultLocation","window","navigator","geolocation","getCurrentPosition","geo","coords","attachEvents","addEventListener","refreshHTML","onZoomChanged","$event","maxZoomOut","options","getZoom","setZoom","initialize","then","selectFirstResult","result","$","firstResult","text","val","geocoder","Geocoder","geocode","address","results","GeocoderStatus","OK","location","geometry","reject","createException","clone","sticky","parseBoolean","fillViewportHeight","mapId","title","mapTypeId","MapTypeId","ROADMAP","styles","featureType","elementType","stylers","visibility","isopen","staticMapApiUrl","staticMapZoom","staticMapThumbSize","directionApiUrl","viewStatus","sizeRules","max","size","min","alerts","$watch","redraw","debounce","getMarkerOptions","object","abbr","icon","mapIcon","titleField","maxLengthLabel","charAt","color","isCanvasSupported","canvasIcon","googleIcon","search","isEmpty","lng","searchname","$broadcast","msg","alert","push","closeAlert","index","splice","openInfoWindow","marker","directionUrl","infoWindow","open","getMap","resized","width","setView","tab","splitSize","fullSize","hideMe","mapClass","listClass","listSize","mapSize","$emit","toggleFilter","stopPropagation","placesList","restrict","scope","$element","openDetails","showDetails","mapUrl","css","detailSection","toggleDetails","loadMorePlaces","templateUrl","getWidgetBaseUrl","tabContentsFillHeight","$window","getPosition","element","body","document","win","defaultView","docElem","documentElement","box","createElement","style","paddingLeft","appendChild","isBoxModel","offsetWidth","removeChild","getBoundingClientRect","clientTop","clientLeft","scrollTop","pageYOffset","scrollLeft","pageXOffset","top","left","priority","link","changeHeightHandler","node","doc","tabsContent","querySelector","position","getComputedStyle","marginBottom","viewPort","Math","clientWidth","innerWidth","height","clientHeight","innerHeight","offsetHeight","scrollHeight","overflowY","$on"],"mappings":"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","file":"scripts/main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-places\"), require(\"jquery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"core\", \"ui\", \"module-places\", \"jquery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-places\"] = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-places\"), require(\"jquery\"));\n\telse\n\t\troot[\"widget-places\"] = factory(root[\"base\"], root[\"core\"], root[\"ui\"], root[\"module-places\"], root[\"jquery\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_8__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-places\"), require(\"jquery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"base\", \"core\", \"ui\", \"module-places\", \"jquery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-places\"] = factory(require(\"base\"), require(\"core\"), require(\"ui\"), require(\"module-places\"), require(\"jquery\"));\n\telse\n\t\troot[\"widget-places\"] = factory(root[\"base\"], root[\"core\"], root[\"ui\"], root[\"module-places\"], root[\"jquery\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_8__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\n\t    'use strict';\n\n\t    module.name = 'widget-places';\n\n\t    var base = __webpack_require__(3);\n\t    var core = __webpack_require__(4);\n\t    var ui = __webpack_require__(5);\n\t    var places = __webpack_require__(6);\n\n\t    var deps = [core.name, ui.name, places.name];\n\n\t    // @ngInject\n\t    function run(lpCoreBus, lpWidget) {\n\t        lpCoreBus.publish('cxp.item.loaded', { id: lpWidget.model.name });\n\t    }\n\n\t    module.exports = base.createModule(module.name, deps).controller(__webpack_require__(7)).directive(__webpack_require__(9)).run(run);\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    exports.PlacesCtrl = function ($scope, $q, $filter, $timeout, lpWidget, lpPlaces, lpPlacesUtils, lpCoreUtils, httpService, angulargmUtils, lpCoreError, lpCoreBus) {\n\n\t        var PlacesError = lpCoreError.createException('PlacesError');\n\t        var assignedColors = {}; // Colors assigned to types\n\t        var markerColorPool = lpCoreUtils.clone(lpPlacesUtils.markerColorPool); // Color polor for instance\n\n\t        $scope.sticky = lpCoreUtils.parseBoolean(lpWidget.getPreference('sticky'));\n\n\t        $scope.fillViewportHeight = lpCoreUtils.parseBoolean(lpWidget.getPreference('fillViewportHeight'));\n\n\t        function centerMap() {\n\t            $scope.map.zoom = parseInt(lpWidget.getPreference('zoom'), 10);\n\t            $timeout(function () {\n\t                $scope.map.center = new google.maps.LatLng($scope.latitude, $scope.longitude);\n\t            }, 250);\n\t        }\n\n\t        function parseError(err) {\n\t            if (lpCoreUtils.isString(err.message) && lpCoreUtils.trim(err.message)) {\n\t                return err.message;\n\t            }\n\n\t            if (err.data) {\n\t                if (lpCoreUtils.isArray(err.data.errors) && err.data.errors.length) {\n\t                    return lpCoreUtils(err.data.errors).pluck('message').join('<br />');\n\t                } else if (lpCoreUtils.isString(err.data) && lpCoreUtils.trim(err.data)) {\n\t                    return err.data;\n\t                }\n\t            }\n\n\t            return 'Unknown server error ocurred';\n\t        }\n\n\t        function handleError(err) {\n\t            var message = parseError(err);\n\t            $scope.status.isError = true;\n\t            lpCoreError.captureException(err);\n\t            $scope.addAlert(message, 'danger', lpPlacesUtils.alertTimeout);\n\t        }\n\n\t        function mapFilterResults(data) {\n\t            $scope.filters = lpCoreUtils.merge(data.types, data.services) // combine\n\t            .map(function (filter) {\n\t                return {\n\t                    id: filter.id,\n\t                    label: filter.label,\n\t                    selected: true //select them all\n\t                };\n\t            });\n\t        }\n\n\t        function readFilterData() {\n\t            var filterService = httpService.getInstance({\n\t                endpoint: lpCoreUtils.resolvePortalPlaceholders(lpWidget.getPreference('filterDataSrc'))\n\t            });\n\t            return filterService.read().success(mapFilterResults).error(function () {\n\t                lpCoreError.throwException(new PlacesError('Unable to fetch data.'));\n\t            });\n\t        }\n\n\t        function getSelectedFilterTypes() {\n\t            return lpCoreUtils($scope.filters).chain().filter({ 'selected': true }).pluck('id').value();\n\t        }\n\n\t        function readLocationData() {\n\t            $scope.status.isLoading = true;\n\t            var hasCoords = lpCoreUtils.isUndefined($scope.latitude) && lpCoreUtils.isUndefined($scope.longitude);\n\t            lpCoreError.assert(hasCoords === false, 'Missing coordonates.');\n\n\t            $scope.selectedTypes = getSelectedFilterTypes();\n\t            /**\n\t             * Fetch data from source.\n\t             */\n\t            var locationService = httpService.getInstance({\n\t                endpoint: lpCoreUtils.resolvePortalPlaceholders(lpWidget.getPreference('placesDataSrc'))\n\t            });\n\n\t            return locationService.read({\n\t                lat: $scope.latitude,\n\t                long: $scope.longitude,\n\t                // services types\n\t                type: $scope.selectedTypes.join(','),\n\t                //Radius in ok from current location\n\t                radius: $scope.radius\n\t                //Pagination\n\t                // limit: params.pageSize,\n\t                // offset: params.nextPage * params.pageSize,\n\n\t            }).success(function (data) {\n\t                $scope.status.isLoading = false;\n\t                // TODO fix api on no results found now is returning\n\t                // data returns [\"No Results Found.\"] should be empty array\n\t                var locations = data.locations || [];\n\t                if (locations[0] && lpCoreUtils.isString(locations[0]) && locations[0].indexOf('No') > -1) {\n\t                    $scope.data = {\n\t                        locations: []\n\t                    };\n\t                } else {\n\t                    // locations\n\t                    //#TODO create a Widget data Service to enhance/transform the API response model\n\t                    lpCoreUtils.each(locations, function (place) {\n\t                        var hasTimes = lpCoreUtils.isPlainObject(place.openingHours) && lpCoreUtils.isUndefined(place.openingHours.periods) === false;\n\t                        if (hasTimes) {\n\t                            lpCoreUtils.map(place.openingHours.periods, function (period) {\n\t                                var weekDay = lpCoreUtils.date().isoWeekday(parseInt(period.day, 10));\n\t                                period.dayShort = weekDay.format('ddd');\n\t                                period.day = weekDay.format('dddd');\n\n\t                                period.time = formatTime(period.time);\n\t                            });\n\t                        }\n\t                    });\n\t                    $scope.data = locations;\n\t                }\n\t                centerMap();\n\t            });\n\t        }\n\n\t        /**\n\t         * formatTime return formatted time period\n\t         * @param {Sring} period of formats 'dddd-dddd' or 'dd:dd-dd:dd' with possible spaces between times\n\t         * @return {String} time period of format 'dd:dd - dd:dd'\n\t         */\n\t        function formatTime(period) {\n\t            var trimPeriod = lpCoreUtils.trim(period, '-');\n\n\t            return trimPeriod.replace(/(\\d{2}):?(\\d{2})\\s*-\\s*(\\d{2}):?(\\d{2})/, '$1:$2 - $3:$4');\n\t        }\n\n\t        function getColor(type) {\n\t            /*\n\t             * Check if given id is already assigned a color, otherwise return one from the pool\n\t             */\n\n\t            if (!assignedColors[type]) {\n\t                assignedColors[type] = markerColorPool.shift();\n\t            }\n\t            return assignedColors[type];\n\t        }\n\n\t        // move module to lpPlaces\n\t        function getLocation() {\n\t            var deferred = $q.defer(),\n\t                promise = deferred.promise,\n\t                timeout = lpWidget.getPreference('geolocationTimeout') || 5000,\n\t                delayDefaultLocation = 200,\n\t                idTimeout;\n\n\t            function setDefaultLocation() {\n\t                $scope.latitude = lpWidget.getPreference('latitude');\n\t                $scope.longitude = lpWidget.getPreference('longitude');\n\t                $timeout.cancel(idTimeout);\n\t                deferred.resolve($scope);\n\t            }\n\n\t            if ('geolocation' in window.navigator && lpWidget.getPreference('currentPosition')) {\n\t                idTimeout = $timeout(function () {\n\t                    setDefaultLocation();\n\t                }, timeout + delayDefaultLocation);\n\t                navigator.geolocation.getCurrentPosition(function (geo) {\n\t                    $scope.latitude = geo.coords.latitude;\n\t                    $scope.longitude = geo.coords.longitude;\n\t                    deferred.resolve($scope);\n\t                }, setDefaultLocation, { timeout: timeout });\n\t            } else if (lpWidget.getPreference('latitude') && lpWidget.getPreference('longitude')) {\n\t                setDefaultLocation();\n\t            } else {\n\t                lpCoreError.throwException(new PlacesError('Missing Latitude and Longitude.'));\n\t            }\n\t            return promise;\n\t        }\n\n\t        function attachEvents() {\n\t            // Re-initialize on preferences change\n\t            lpWidget.addEventListener('preferencesSaved', function () {\n\t                lpWidget.refreshHTML();\n\t            });\n\n\t            $scope.onZoomChanged = function (map, $event) {\n\t                var maxZoomOut = $scope.options.map.maxZoomOut;\n\t                if (map.getZoom() < maxZoomOut) {\n\t                    map.setZoom(maxZoomOut);\n\t                }\n\t            };\n\t        }\n\n\t        function initialize() {\n\n\t            readFilterData().then(getLocation).then(readLocationData).then(attachEvents)['catch'](handleError)['finally'](function () {\n\t                $scope.status.isLoading = false;\n\t            });\n\t        }\n\n\t        $scope.mapId = lpWidget.id;\n\n\t        $scope.title = lpWidget.getPreference('title');\n\n\t        // Initial options\n\t        $scope.options = {\n\t            map: {\n\t                maxZoomOut: lpWidget.getPreference('maxZoomOut') || 0,\n\t                mapTypeId: lpPlacesUtils.maps.MapTypeId.ROADMAP,\n\t                styles: [{\n\t                    featureType: 'poi',\n\t                    elementType: 'labels',\n\t                    stylers: [{\n\t                        visibility: lpCoreUtils.parseBoolean(lpWidget.getPreference('showPOI')) ? 'on' : 'off'\n\t                    }]\n\t                }]\n\t            }\n\t        };\n\n\t        $scope.status = {\n\t            isLoading: true,\n\t            isError: false,\n\t            isopen: false\n\t        };\n\n\t        $scope.map = {};\n\n\t        $scope.map.staticMapApiUrl = lpWidget.getPreference('staticMapApiUrl');\n\t        $scope.map.staticMapZoom = lpWidget.getPreference('staticMapZoom');\n\t        $scope.map.staticMapThumbSize = lpWidget.getPreference('staticMapThumbSize');\n\t        $scope.map.directionApiUrl = lpWidget.getPreference('directionApiUrl');\n\t        $scope.radius = lpWidget.getPreference('placesFilterRadius') || 50;\n\t        $scope.viewStatus = '';\n\n\t        /**\n\t         * Responsive logic to handle size changes.\n\t         */\n\t        $scope.sizeRules = [{\n\t            max: 200,\n\t            size: 'tile'\n\t        }, {\n\t            min: 201,\n\t            max: 450,\n\t            size: 'small'\n\t        }, {\n\t            min: 451,\n\t            size: 'normal'\n\t        }];\n\n\t        /**\n\t         * Alert messages.\n\t         */\n\t        $scope.alerts = [];\n\t        $scope.selectedTypes = getSelectedFilterTypes();\n\t        $scope.$watch('data', function () {\n\t            // Redraw locations\n\t            if (!lpCoreUtils.isUndefined($scope.data)) {\n\t                $scope.places = $scope.data;\n\t                $scope.redraw();\n\t            }\n\t        }, true);\n\n\t        $scope.$watch('filters', lpCoreUtils.debounce(function () {\n\t            if (!$scope.status.isLoading && !$scope.status.isError) {\n\t                readLocationData();\n\t            }\n\t        }, 800), true);\n\n\t        /**\n\t         * Define marker's properties and visibility.\n\t         * Called every time map is redraw.\n\t         */\n\t        $scope.getMarkerOptions = function (object) {\n\t            var label = object.abbr || object.type.label;\n\t            var icon = object.icon || object.type.mapIcon;\n\t            var title = object[lpPlacesUtils.titleField];\n\n\t            // Shorten label to fit inside the marker\n\t            if (label.length > lpPlacesUtils.maxLengthLabel) {\n\t                label = label.charAt(0);\n\t            }\n\n\t            // Create custom icon\n\t            if (!icon) {\n\t                var color = object.color || getColor(object.type.id);\n\t                icon = lpPlacesUtils.isCanvasSupported() ? lpPlaces.canvasIcon(label, color) : lpPlaces.googleIcon(label, color);\n\t                object.icon = icon;\n\t            }\n\n\t            return {\n\t                title: title ? title + '' : '', // Make sure this is a string\n\t                icon: icon\n\t            };\n\t        };\n\n\t        function selectFirstResult() {\n\t            var $ = __webpack_require__(8);\n\t            var firstResult = $('.pac-container .pac-item:first').text() || $('input.filters-name').val();\n\t            var result;\n\t            var deferred = $q.defer();\n\t            var promise = deferred.promise;\n\t            var geocoder = new lpPlacesUtils.maps.Geocoder();\n\t            geocoder.geocode({ 'address': firstResult }, function (results, status) {\n\t                if (status === lpPlacesUtils.maps.GeocoderStatus.OK) {\n\t                    result = {\n\t                        place: results[0],\n\t                        location: results[0].geometry.location\n\t                    };\n\t                    deferred.resolve(result);\n\t                    return result;\n\t                } else {\n\t                    deferred.reject();\n\t                }\n\t            });\n\n\t            return promise;\n\t        }\n\t        /**\n\t         * Search places based on lat/lng coordinates.\n\t         */\n\t        $scope.search = function (result) {\n\t            if (!result || lpCoreUtils.isEmpty(result.location)) {\n\t                selectFirstResult().then(function (firstResult) {\n\t                    $scope.latitude = firstResult.location.lat();\n\t                    $scope.longitude = firstResult.location.lng();\n\t                    readLocationData().then(function () {\n\t                        $scope.filters.searchname = firstResult.place['formatted_address'];\n\t                    });\n\t                }, function () {\n\t                    $scope.addAlert('The location you provided is not valid!', 'warning', lpPlacesUtils.alertTimeout);\n\t                    return;\n\t                });\n\t            } else {\n\t                $scope.latitude = result.location.lat();\n\t                $scope.longitude = result.location.lng();\n\t                readLocationData();\n\t            }\n\t        };\n\n\t        // Refresh map\n\t        $scope.redraw = function () {\n\t            $scope.$broadcast('gmMarkersRedraw', 'places');\n\t        };\n\n\t        $scope.addAlert = function (msg, type, timeout) {\n\t            var alert = {\n\t                msg: msg,\n\t                type: type || 'error'\n\t            };\n\t            $scope.alerts.push(alert);\n\n\t            if (timeout) {\n\t                $timeout(function () {\n\t                    $scope.closeAlert($scope.alerts.indexOf(alert));\n\t                }, timeout, false);\n\t            }\n\t        };\n\n\t        $scope.closeAlert = function (index) {\n\t            if (index > -1) {\n\t                $scope.alerts.splice(index, 1);\n\t            }\n\t        };\n\n\t        /**\n\t         * Open info window for specific marker\n\t         */\n\t        $scope.openInfoWindow = function (place, marker) {\n\t            $scope.directionUrl = $scope.map.directionApiUrl + '?daddr=' + place.location.latitude + ',' + place.location.longitude;\n\t            $scope.place = place;\n\t            $scope.infoWindow.open(marker.getMap(), marker);\n\t        };\n\n\t        $scope.resized = function (width) {\n\t            $scope.$broadcast('gmMapResize', $scope.mapId);\n\t        };\n\n\t        $scope.setView = function (tab) {\n\t            var splitSize = 'col-xs-6',\n\t                fullSize = 'col-xs-12',\n\t                hideMe = 'hidden';\n\n\t            $scope.viewStatus = tab;\n\t            $scope.mapClass = '';\n\t            $scope.listClass = '';\n\t            $scope.listSize = '';\n\t            $scope.mapSize = '';\n\n\t            switch ($scope.viewStatus) {\n\t                case 'map':\n\t                    $scope.listClass = hideMe;\n\t                    $scope.mapSize = fullSize;\n\t                    break;\n\t                case 'list':\n\t                    $scope.mapClass = hideMe;\n\t                    $scope.listSize = fullSize;\n\t                    break;\n\t                case 'split':\n\t                    $scope.listSize = splitSize;\n\t                    $scope.mapSize = splitSize;\n\t            }\n\t            $scope.$emit('view-changed');\n\t        };\n\n\t        $scope.toggleFilter = function ($event, filter) {\n\t            $event.stopPropagation(); // avoid the dropdown to close after click\n\t        };\n\n\t        // Start application\n\t        initialize();\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {\n\n\t    'use strict';\n\n\t    // @ngInject\n\n\t    exports.placesList = function (lpCoreUtils, lpCoreBus, lpWidget) {\n\n\t        return {\n\t            restrict: 'A',\n\t            replace: true,\n\t            scope: {\n\t                places: '=placesObjects',\n\t                map: '=mapObject',\n\t                filters: '=filterObject'\n\t            },\n\t            controller: ['$scope', '$element', 'angulargmUtils', function ($scope, $element, angulargmUtils) {\n\n\t                $scope.css = {\n\t                    'detailSection': 'col-md-6 col-xs-6'\n\t                };\n\n\t                function openDetails(place) {\n\t                    if (place.showDetails === false || place.showDetails === undefined) {\n\t                        place.showDetails = true;\n\n\t                        place.mapUrl = $scope.map.staticMapApiUrl + '?zoom=' + $scope.map.staticMapZoom + '&size=' + $scope.map.staticMapThumbSize + '&markers=color:red%7C' + place.location.latitude + ',' + place.location.longitude;\n\n\t                        place.directionUrl = $scope.map.directionApiUrl + '?daddr=' + place.location.latitude + ',' + place.location.longitude;\n\t                    }\n\t                }\n\n\t                $scope.toggleDetails = function (place, $event) {\n\t                    $event.stopPropagation();\n\n\t                    if (place.showDetails) {\n\t                        place.showDetails = false;\n\t                    } else {\n\t                        openDetails(place);\n\t                    }\n\t                };\n\n\t                $scope.loadMorePlaces = function () {\n\t                    lpCoreBus.publish('launchpad-retail.places.loadMore', {}, true);\n\t                };\n\t            }],\n\n\t            templateUrl: lpCoreUtils.getWidgetBaseUrl(lpWidget) + '/templates/placesList.html'\n\t        };\n\t    };\n\n\t    // @ngInject\n\t    exports.tabContentsFillHeight = function ($window, lpCoreUtils, lpCoreBus, lpWidget, $timeout) {\n\n\t        function getPosition(element) {\n\t            var body = document.body,\n\t                win = document.defaultView,\n\t                docElem = document.documentElement,\n\t                box = document.createElement('div');\n\t            box.style.paddingLeft = box.style.width = '1px';\n\t            body.appendChild(box);\n\t            var isBoxModel = box.offsetWidth === 2;\n\t            body.removeChild(box);\n\t            box = element.getBoundingClientRect();\n\t            var clientTop = docElem.clientTop || body.clientTop || 0,\n\t                clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t                scrollTop = win.pageYOffset || isBoxModel && docElem.scrollTop || body.scrollTop,\n\t                scrollLeft = win.pageXOffset || isBoxModel && docElem.scrollLeft || body.scrollLeft;\n\t            return {\n\t                top: box.top + scrollTop - clientTop,\n\t                left: box.left + scrollLeft - clientLeft };\n\t        }\n\n\t        return {\n\t            restrict: 'C',\n\t            replace: true,\n\t            priority: 500,\n\t            link: function link(scope, element) {\n\t                if (!scope.fillViewportHeight) {\n\t                    return;\n\t                }\n\t                function changeHeightHandler() {\n\t                    $timeout(function () {\n\t                        var node = element[0],\n\t                            doc = $window.document,\n\t                            tabsContent = doc.querySelector('.tabs-content'),\n\t                            position = getPosition(tabsContent),\n\t                            style = $window.getComputedStyle(tabsContent, null),\n\t                            marginBottom = parseInt(style.marginBottom, 10),\n\t                            viewPort = {\n\t                            width: Math.max(doc.documentElement.clientWidth, window.innerWidth || 0),\n\t                            height: Math.max(doc.documentElement.clientHeight, window.innerHeight || 0)\n\t                        };\n\t                        node.style.height = viewPort.height - position.top - marginBottom + 'px';\n\t                        if (node.offsetHeight < node.scrollHeight) {\n\t                            node.style.overflowY = 'scroll';\n\t                        } else {\n\t                            node.style.overflowY = 'visible';\n\t                        }\n\t                    });\n\t                }\n\n\t                scope.$on('view-changed', changeHeightHandler);\n\t                $window.addEventListener('resize', changeHeightHandler);\n\t            }\n\t        };\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** scripts/main.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e414c19eba4ddae66dbc\n **/","\r\ndefine(function (require, exports, module) {\r\n\r\n    'use strict';\r\n\r\n    module.name = 'widget-places';\r\n\r\n    var base = require('base');\r\n    var core = require('core');\r\n    var ui = require('ui');\r\n    var places = require('module-places');\r\n\r\n     var deps = [\r\n        core.name,\r\n        ui.name,\r\n        places.name\r\n    ];\r\n\r\n    // @ngInject\r\n    function run(lpCoreBus, lpWidget) {\r\n      lpCoreBus.publish('cxp.item.loaded', {id: lpWidget.model.name});\r\n    }\r\n\r\n    module.exports = base.createModule(module.name, deps)\r\n        .controller( require('./controllers') )\r\n        .directive( require('./directives') )\r\n        .run( run );\r\n\r\n});\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/main.js\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"base\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"core\"\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ui\"\n ** module id = 5\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"module-places\"\n ** module id = 6\n ** module chunks = 0\n **/","define(function(require, exports, module) {\n    'use strict';\n\n    // @ngInject\n    exports.PlacesCtrl = function($scope, $q, $filter, $timeout, lpWidget, lpPlaces, lpPlacesUtils, lpCoreUtils, httpService, angulargmUtils, lpCoreError, lpCoreBus) {\n\n        var PlacesError = lpCoreError.createException('PlacesError');\n        var assignedColors = {}; // Colors assigned to types\n        var markerColorPool = lpCoreUtils.clone(lpPlacesUtils.markerColorPool); // Color polor for instance\n\n        $scope.sticky = lpCoreUtils.parseBoolean(lpWidget.getPreference('sticky'));\n\n        $scope.fillViewportHeight = lpCoreUtils.parseBoolean(lpWidget.getPreference('fillViewportHeight'));\n\n        function centerMap() {\n            $scope.map.zoom = parseInt(lpWidget.getPreference('zoom'), 10);\n            $timeout(function() {\n                $scope.map.center = new google.maps.LatLng($scope.latitude, $scope.longitude);\n            }, 250);\n        }\n\n        function parseError(err) {\n            if (lpCoreUtils.isString(err.message) && lpCoreUtils.trim(err.message)) {\n                return err.message;\n            }\n\n            if (err.data) {\n                if (lpCoreUtils.isArray(err.data.errors) && err.data.errors.length) {\n                    return lpCoreUtils(err.data.errors).pluck('message').join('<br />');\n                } else if (lpCoreUtils.isString(err.data) && lpCoreUtils.trim(err.data)){\n                    return err.data;\n                }\n            }\n\n            return 'Unknown server error ocurred';\n        }\n\n        function handleError(err) {\n            var message = parseError(err);\n            $scope.status.isError = true;\n            lpCoreError.captureException(err);\n            $scope.addAlert(message, 'danger', lpPlacesUtils.alertTimeout);\n        }\n\n        function mapFilterResults(data) {\n            $scope.filters = lpCoreUtils\n                .merge(data.types, data.services) // combine\n                .map(function(filter) {\n                    return {\n                        id: filter.id,\n                        label: filter.label,\n                        selected: true //select them all\n                    };\n                });\n        }\n\n        function readFilterData() {\n            var filterService = httpService.getInstance({\n                endpoint: lpCoreUtils.resolvePortalPlaceholders(lpWidget.getPreference('filterDataSrc'))\n            });\n            return filterService.read()\n                .success(mapFilterResults)\n                .error(function(){\n                    lpCoreError.throwException( new PlacesError('Unable to fetch data.') );\n                });\n        }\n\n        function getSelectedFilterTypes() {\n            return lpCoreUtils($scope.filters).chain()\n                .filter({'selected': true})\n                .pluck('id')\n                .value();\n        }\n\n        function readLocationData() {\n            $scope.status.isLoading = true;\n            var hasCoords = lpCoreUtils.isUndefined($scope.latitude) && lpCoreUtils.isUndefined($scope.longitude);\n            lpCoreError.assert(hasCoords === false, 'Missing coordonates.');\n\n            $scope.selectedTypes = getSelectedFilterTypes();\n            /**\n             * Fetch data from source.\n             */\n            var locationService = httpService.getInstance({\n                endpoint: lpCoreUtils.resolvePortalPlaceholders(lpWidget.getPreference('placesDataSrc'))\n            });\n\n            return locationService.read({\n                lat: $scope.latitude,\n                long: $scope.longitude,\n                // services types\n                type: $scope.selectedTypes.join(','),\n                //Radius in ok from current location\n                radius: $scope.radius\n                    //Pagination\n                    // limit: params.pageSize,\n                    // offset: params.nextPage * params.pageSize,\n\n            }).success(function(data) {\n                $scope.status.isLoading = false;\n                // TODO fix api on no results found now is returning\n                // data returns [\"No Results Found.\"] should be empty array\n                var locations = data.locations || [];\n                if (locations[0] && lpCoreUtils.isString(locations[0]) && locations[0].indexOf('No') > -1) {\n                    $scope.data = {\n                        locations: []\n                    };\n                } else {\n                    // locations\n                    //#TODO create a Widget data Service to enhance/transform the API response model\n                    lpCoreUtils.each(locations, function(place) {\n                        var hasTimes = lpCoreUtils.isPlainObject(place.openingHours) &&\n                                        lpCoreUtils.isUndefined(place.openingHours.periods) === false;\n                        if( hasTimes ){\n                            lpCoreUtils.map(place.openingHours.periods, function(period) {\n                                var weekDay = lpCoreUtils.date().isoWeekday(parseInt(period.day, 10));\n                                period.dayShort = weekDay.format('ddd');\n                                period.day = weekDay.format('dddd');\n\n                                period.time = formatTime(period.time);\n                            });\n                        }\n                    });\n                    $scope.data = locations;\n                }\n                centerMap();\n\n            });\n        }\n\n        /**\n         * formatTime return formatted time period\n         * @param {Sring} period of formats 'dddd-dddd' or 'dd:dd-dd:dd' with possible spaces between times\n         * @return {String} time period of format 'dd:dd - dd:dd'\n         */\n        function formatTime(period) {\n            var trimPeriod = lpCoreUtils.trim(period, '-');\n\n            return trimPeriod.replace(/(\\d{2}):?(\\d{2})\\s*-\\s*(\\d{2}):?(\\d{2})/, '$1:$2 - $3:$4');\n        }\n\n        function getColor(type) {\n            /*\n             * Check if given id is already assigned a color, otherwise return one from the pool\n             */\n\n            if (!assignedColors[type]) {\n                assignedColors[type] = markerColorPool.shift();\n            }\n            return assignedColors[type];\n        }\n\n        // move module to lpPlaces\n        function getLocation() {\n            var deferred = $q.defer(),\n              promise = deferred.promise,\n              timeout = lpWidget.getPreference('geolocationTimeout') || 5000,\n              delayDefaultLocation = 200,\n              idTimeout;\n\n            function setDefaultLocation() {\n                $scope.latitude = lpWidget.getPreference('latitude');\n                $scope.longitude = lpWidget.getPreference('longitude');\n                $timeout.cancel(idTimeout);\n                deferred.resolve($scope);\n            }\n\n            if ('geolocation' in window.navigator && lpWidget.getPreference('currentPosition')) {\n                idTimeout = $timeout(function () {\n                    setDefaultLocation();\n                }, timeout + delayDefaultLocation);\n                navigator.geolocation.getCurrentPosition(function(geo) {\n                    $scope.latitude = geo.coords.latitude;\n                    $scope.longitude = geo.coords.longitude;\n                    deferred.resolve($scope);\n                }, setDefaultLocation, { timeout: timeout });\n\n            } else if (lpWidget.getPreference('latitude') && lpWidget.getPreference('longitude')) {\n                setDefaultLocation();\n            } else {\n                lpCoreError.throwException( new PlacesError('Missing Latitude and Longitude.') );\n            }\n            return promise;\n        }\n\n        function attachEvents() {\n            // Re-initialize on preferences change\n            lpWidget.addEventListener('preferencesSaved', function() {\n                lpWidget.refreshHTML();\n            });\n\n            $scope.onZoomChanged = function(map, $event) {\n                var maxZoomOut = $scope.options.map.maxZoomOut;\n                if (map.getZoom() < maxZoomOut) {\n                    map.setZoom(maxZoomOut);\n                }\n            };\n        }\n\n        function initialize() {\n\n            readFilterData()\n                .then(getLocation)\n                .then(readLocationData)\n                .then(attachEvents)\n                ['catch'](handleError)\n                ['finally'](function(){\n                    $scope.status.isLoading = false;\n                });\n\n\n        }\n\n        $scope.mapId = lpWidget.id;\n\n        $scope.title = lpWidget.getPreference('title');\n\n        // Initial options\n        $scope.options = {\n            map: {\n                maxZoomOut: lpWidget.getPreference('maxZoomOut') || 0,\n                mapTypeId: lpPlacesUtils.maps.MapTypeId.ROADMAP,\n                styles: [{\n                    featureType: 'poi',\n                    elementType: 'labels',\n                    stylers: [{\n                        visibility: lpCoreUtils.parseBoolean(lpWidget.getPreference('showPOI')) ? 'on' : 'off'\n                    }]\n                }]\n            }\n        };\n\n        $scope.status = {\n            isLoading: true,\n            isError: false,\n            isopen: false\n        };\n\n        $scope.map = {};\n\n        $scope.map.staticMapApiUrl = lpWidget.getPreference('staticMapApiUrl');\n        $scope.map.staticMapZoom = lpWidget.getPreference('staticMapZoom');\n        $scope.map.staticMapThumbSize = lpWidget.getPreference('staticMapThumbSize');\n        $scope.map.directionApiUrl = lpWidget.getPreference('directionApiUrl');\n        $scope.radius = lpWidget.getPreference('placesFilterRadius') || 50;\n        $scope.viewStatus = '';\n\n        /**\n         * Responsive logic to handle size changes.\n         */\n        $scope.sizeRules = [{\n            max: 200,\n            size: 'tile'\n        }, {\n            min: 201,\n            max: 450,\n            size: 'small'\n        }, {\n            min: 451,\n            size: 'normal'\n        }];\n\n        /**\n         * Alert messages.\n         */\n        $scope.alerts = [];\n        $scope.selectedTypes = getSelectedFilterTypes();\n        $scope.$watch('data', function() {\n            // Redraw locations\n            if( !lpCoreUtils.isUndefined($scope.data) ){\n                $scope.places = $scope.data;\n                $scope.redraw();\n            }\n\n        }, true);\n\n        $scope.$watch('filters', lpCoreUtils.debounce(function() {\n            if (!$scope.status.isLoading && !$scope.status.isError) {\n                readLocationData();\n            }\n        }, 800), true);\n\n\n        /**\n         * Define marker's properties and visibility.\n         * Called every time map is redraw.\n         */\n        $scope.getMarkerOptions = function(object) {\n            var label = object.abbr || object.type.label;\n            var icon = object.icon || object.type.mapIcon;\n            var title = object[lpPlacesUtils.titleField];\n\n            // Shorten label to fit inside the marker\n            if (label.length > lpPlacesUtils.maxLengthLabel) {\n                label = label.charAt(0);\n            }\n\n            // Create custom icon\n            if (!icon) {\n                var color = object.color || getColor(object.type.id);\n                icon = lpPlacesUtils.isCanvasSupported() ? lpPlaces.canvasIcon(label, color) : lpPlaces.googleIcon(label, color);\n                object.icon = icon;\n            }\n\n            return {\n                title: title ? title + '' : '', // Make sure this is a string\n                icon: icon\n            };\n        };\n\n        function selectFirstResult() {\n            var $ = require('jquery');\n            var firstResult = $('.pac-container .pac-item:first').text() || $('input.filters-name').val();\n            var result;\n            var deferred = $q.defer();\n            var promise = deferred.promise;\n            var geocoder = new lpPlacesUtils.maps.Geocoder();\n            geocoder.geocode({'address': firstResult }, function(results, status) {\n                if (status === lpPlacesUtils.maps.GeocoderStatus.OK) {\n                    result = {\n                        place: results[0],\n                        location: results[0].geometry.location\n                    };\n                    deferred.resolve(result);\n                    return result;\n                } else {\n                    deferred.reject();\n                }\n            });\n\n            return promise;\n         }\n        /**\n         * Search places based on lat/lng coordinates.\n         */\n        $scope.search = function(result) {\n            if (!result || lpCoreUtils.isEmpty(result.location) ) {\n                selectFirstResult().then(function(firstResult) {\n                    $scope.latitude = firstResult.location.lat();\n                    $scope.longitude = firstResult.location.lng();\n                    readLocationData().then(function(){\n                        $scope.filters.searchname = firstResult.place['formatted_address'];\n                    });\n\n                }, function() {\n                    $scope.addAlert('The location you provided is not valid!', 'warning', lpPlacesUtils.alertTimeout);\n                    return;\n                });\n            } else {\n                $scope.latitude = result.location.lat();\n                $scope.longitude = result.location.lng();\n                readLocationData();\n            }\n\n        };\n\n        // Refresh map\n        $scope.redraw = function() {\n            $scope.$broadcast('gmMarkersRedraw', 'places');\n        };\n\n        $scope.addAlert = function(msg, type, timeout) {\n            var alert = {\n                msg: msg,\n                type: type || 'error'\n            };\n            $scope.alerts.push(alert);\n\n            if (timeout) {\n                $timeout(function() {\n                    $scope.closeAlert($scope.alerts.indexOf(alert));\n                }, timeout, false);\n            }\n        };\n\n        $scope.closeAlert = function(index) {\n            if (index > -1) {\n                $scope.alerts.splice(index, 1);\n            }\n        };\n\n        /**\n         * Open info window for specific marker\n         */\n        $scope.openInfoWindow = function(place, marker) {\n            $scope.directionUrl = $scope.map.directionApiUrl + '?daddr=' +\n                place.location.latitude + ',' + place.location.longitude;\n            $scope.place = place;\n            $scope.infoWindow.open(marker.getMap(), marker);\n        };\n\n        $scope.resized = function(width) {\n            $scope.$broadcast('gmMapResize', $scope.mapId);\n        };\n\n        $scope.setView = function(tab) {\n            var splitSize = 'col-xs-6',\n                fullSize = 'col-xs-12',\n                hideMe = 'hidden';\n\n            $scope.viewStatus = tab;\n            $scope.mapClass = '';\n            $scope.listClass = '';\n            $scope.listSize = '';\n            $scope.mapSize = '';\n\n            switch ($scope.viewStatus) {\n                case 'map':\n                    $scope.listClass = hideMe;\n                    $scope.mapSize = fullSize;\n                    break;\n                case 'list':\n                    $scope.mapClass = hideMe;\n                    $scope.listSize = fullSize;\n                    break;\n                case 'split':\n                    $scope.listSize = splitSize;\n                    $scope.mapSize = splitSize;\n            }\n            $scope.$emit('view-changed');\n        };\n\n        $scope.toggleFilter = function($event, filter) {\n            $event.stopPropagation(); // avoid the dropdown to close after click\n        };\n\n        // Start application\n        initialize();\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/controllers.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"jquery\"\n ** module id = 8\n ** module chunks = 0\n **/","define(function (require, exports, module) {\n\n    'use strict';\n\n    // @ngInject\n    exports.placesList = function(lpCoreUtils, lpCoreBus, lpWidget) {\n\n        return {\n            restrict: 'A',\n            replace: true,\n            scope: {\n                places: '=placesObjects',\n                map: '=mapObject',\n                filters: '=filterObject'\n            },\n            controller: ['$scope', '$element', 'angulargmUtils', function($scope, $element, angulargmUtils) {\n\n                $scope.css = {\n                    'detailSection': 'col-md-6 col-xs-6'\n                };\n\n                function openDetails(place) {\n                    if(place.showDetails === false || place.showDetails === undefined) {\n                        place.showDetails = true;\n\n                        place.mapUrl = $scope.map.staticMapApiUrl +\n                                        '?zoom=' + $scope.map.staticMapZoom +\n                                        '&size=' + $scope.map.staticMapThumbSize +\n                                        '&markers=color:red%7C' + place.location.latitude + ',' +\n                                        place.location.longitude;\n\n                        place.directionUrl = $scope.map.directionApiUrl + '?daddr=' + place.location.latitude + ',' + place.location.longitude;\n\n                    }\n                }\n\n                $scope.toggleDetails = function(place, $event) {\n                    $event.stopPropagation();\n\n                    if(place.showDetails) {\n                        place.showDetails = false;\n                    } else {\n                        openDetails(place);\n                    }\n                };\n\n                $scope.loadMorePlaces = function() {\n                    lpCoreBus.publish('launchpad-retail.places.loadMore', {}, true);\n                };\n\n            }],\n\n            templateUrl: lpCoreUtils.getWidgetBaseUrl(lpWidget) + '/templates/placesList.html'\n        };\n    };\n\n    // @ngInject\n    exports.tabContentsFillHeight = function($window, lpCoreUtils, lpCoreBus, lpWidget, $timeout) {\n\n        function getPosition(element){\n            var body = document.body,\n              win = document.defaultView,\n              docElem = document.documentElement,\n              box = document.createElement('div');\n            box.style.paddingLeft = box.style.width = '1px';\n            body.appendChild(box);\n            var isBoxModel = box.offsetWidth === 2;\n            body.removeChild(box);\n            box = element.getBoundingClientRect();\n            var clientTop = docElem.clientTop || body.clientTop || 0,\n              clientLeft = docElem.clientLeft || body.clientLeft || 0,\n              scrollTop = win.pageYOffset || isBoxModel && docElem.scrollTop || body.scrollTop,\n              scrollLeft = win.pageXOffset || isBoxModel && docElem.scrollLeft || body.scrollLeft;\n            return {\n                top: box.top + scrollTop - clientTop,\n                left: box.left + scrollLeft - clientLeft};\n        }\n\n        return {\n            restrict: 'C',\n            replace: true,\n            priority: 500,\n            link: function (scope, element) {\n                if(!scope.fillViewportHeight){\n                    return;\n                }\n                function changeHeightHandler() {\n                    $timeout(function () {\n                        var node = element[0],\n                          doc = $window.document,\n                          tabsContent = doc.querySelector('.tabs-content'),\n                          position = getPosition(tabsContent),\n                          style = $window.getComputedStyle(tabsContent, null),\n                          marginBottom = parseInt(style.marginBottom, 10),\n                          viewPort = {\n                              width: Math.max(doc.documentElement.clientWidth, window.innerWidth || 0),\n                              height: Math.max(doc.documentElement.clientHeight, window.innerHeight || 0)\n                          };\n                        node.style.height = ((viewPort.height - position.top) - marginBottom) + 'px';\n                        if (node.offsetHeight < node.scrollHeight) {\n                            node.style.overflowY = 'scroll';\n                        } else {\n                            node.style.overflowY = 'visible';\n                        }\n                    });\n                }\n\n                scope.$on('view-changed', changeHeightHandler);\n                $window.addEventListener('resize', changeHeightHandler);\n            }\n        };\n    };\n\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./scripts/directives.js\n **/"],"sourceRoot":""}